# Generate random samples from a normal distribution
p<-0.8
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.8 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14,  fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=1000, p=0.8",
x = "Sample Proportion", y = "Density") +
theme_minimal()
# Generate random samples from a normal distribution
p<-0.99
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.99 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14, fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=1000, p=0.99",
x = "Sample Proportion", y = "Density") +
theme_minimal()
(plot0.05 + plot0.25 + plot0.5) / (plot0.8 + plot0.99)
#| fig-width: 8
#| fig-height: 4
# Load necessary libraries
library(tidyverse)
library(patchwork)
# Set seed for reproducibility
set.seed(123)
# Generate sample size
sample_size <- 50
p<-0.05
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.05 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14,  fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=1000, p=0.25",
x = "Sample Proportion", y = "Density") +
theme_minimal()
# Generate Samples
p<-0.001
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.001 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14,  fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=1000, p=0.001",
x = "Sample Proportion", y = "Density") +
theme_minimal()
# Generate Samples
p<-0.25
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.25 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14,  fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=1000, p=0.05",
x = "Sample Proportion", y = "Density") +
theme_minimal()
# Generate random samples from a normal distribution
p<-0.5
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.5 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14,  fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=1000, p=0.5",
x = "Sample Proportion", y = "Density") +
theme_minimal()
# Generate random samples from a normal distribution
p<-0.8
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.8 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14,  fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=1000, p=0.8",
x = "Sample Proportion", y = "Density") +
theme_minimal()
# Generate random samples from a normal distribution
p<-0.99
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.99 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14, fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=1000, p=0.99",
x = "Sample Proportion", y = "Density") +
theme_minimal()
(plot0.01 + plot0.05 + plot0.25 ) / (plot0.5 + plot0.8 + plot0.99)
#| fig-width: 8
#| fig-height: 4
# Load necessary libraries
library(tidyverse)
library(patchwork)
# Set seed for reproducibility
set.seed(123)
# Generate sample size
sample_size <- 50
p<-0.05
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.05 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14,  fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=1000, p=0.25",
x = "Sample Proportion", y = "Density") +
theme_minimal()
# Generate Samples
p<-0.001
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.001 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14,  fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=1000, p=0.001",
x = "Sample Proportion", y = "Density") +
theme_minimal()
# Generate Samples
p<-0.25
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.25 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14,  fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=1000, p=0.05",
x = "Sample Proportion", y = "Density") +
theme_minimal()
# Generate random samples from a normal distribution
p<-0.5
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.5 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14,  fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=1000, p=0.5",
x = "Sample Proportion", y = "Density") +
theme_minimal()
# Generate random samples from a normal distribution
p<-0.8
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.8 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14,  fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=1000, p=0.8",
x = "Sample Proportion", y = "Density") +
theme_minimal()
# Generate random samples from a normal distribution
p<-0.99
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.99 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14, fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=1000, p=0.99",
x = "Sample Proportion", y = "Density") +
theme_minimal()
(plot0.001 + plot0.05 + plot0.25 ) / (plot0.5 + plot0.8 + plot0.99)
#| fig-width: 8
#| fig-height: 4
# Load necessary libraries
library(tidyverse)
library(patchwork)
# Set seed for reproducibility
set.seed(123)
# Generate sample size
sample_size <- 100
p<-0.05
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.05 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14,  fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=100, p=0.25",
x = "Sample Proportion", y = "Density") +
theme_minimal()
# Generate Samples
p<-0.001
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.001 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14,  fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=100, p=0.001",
x = "Sample Proportion", y = "Density") +
theme_minimal()
# Generate Samples
p<-0.25
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.25 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14,  fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=100, p=0.05",
x = "Sample Proportion", y = "Density") +
theme_minimal()
# Generate random samples from a normal distribution
p<-0.5
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.5 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14,  fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=100, p=0.5",
x = "Sample Proportion", y = "Density") +
theme_minimal()
# Generate random samples from a normal distribution
p<-0.8
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.8 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14,  fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=100, p=0.8",
x = "Sample Proportion", y = "Density") +
theme_minimal()
# Generate random samples from a normal distribution
p<-0.99
sample_proportions <- tibble(proportion = rnorm(sample_size, mean = p, sd = sqrt(p*(1-p)/sample_size)))
# Plot histogram of sample proportions
plot0.99 <- sample_proportions %>%
ggplot(aes(x = proportion)) +
geom_histogram(bins=14, fill = "skyblue", color = "black", alpha = 0.7) +
labs(subtitle = "n=100, p=0.99",
x = "Sample Proportion", y = "Density") +
theme_minimal()
(plot0.001 + plot0.05 + plot0.25 ) / (plot0.5 + plot0.8 + plot0.99)
HTML <- read_html("https://en.wikipedia.org/wiki/Middlebury_College")
library(rvest)
HTML <- read_html("https://en.wikipedia.org/wiki/Middlebury_College")
HTML %>%
html_elements("table")
Midd_Tables <- HTML %>%
html_elements("table")
View(Midd_Tables)
HTML %>%
html_elements("table:nth-child(3)") %>%
html_table()
Admissions <- HTML %>%
html_elements("table:nth-child(3)") %>%
html_table()
Admissions
View(Admissions)
Admissions <- HTML %>%
html_elements("table:nth-child(1)") %>%
html_table()
Admissions
View(Admissions)
Admissions <- HTML %>%
html_element("table:nth-child(1)") %>%
html_table()
Admissions
Admissions <- HTML %>%
html_elements("table:nth-child(1)") %>%
html_table()
Admissions
Admissions <- HTML %>%
html_elements("table:nth-child(4)") %>%
html_table()
Admissions
Admissions <- HTML %>%
html_elements("table:nth-child(5)") %>%
html_table()
Admissions
Admissions <- HTML %>%
html_elements("table:nth-child(6)") %>%
html_table()
Admissions
Admissions <- HTML %>%
html_elements("table:nth-child(7)") %>%
html_table()
Admissions
Admissions <- HTML %>%
html_elements("table:nth-child(8)") %>%
html_table()
Admissions
Admissions <- HTML %>%
html_element("table:nth-child(8)") %>%
html_table()
Admissions <- HTML %>%
html_element("table:nth-child(9)") %>%
html_table()
Admissions <- HTML %>%
html_element("table:nth-child(4)") %>%
html_table()
Admissions
View(Midd_Tables)
Admissions <- HTML %>%
html_element("table:nth-child(12)") %>%
html_table()
Admissions <- HTML %>%
html_element("table:nth-child(17)") %>%
html_table()
Admissions <- HTML %>%
html_element("table:nth-child(16)") %>%
html_table()
HTML %>%
html_element("table:nth-child(16)")
Midd_Tables[1]
Midd_Tables[[1]]
Midd_Tables[[2]]
Midd_Tables[[3]]
Midd_Tables <- HTML %>%
html_elements("table") %>%
html_table()
Midd_Tables[1]
Midd_Tables[2]
Midd_Tables[3]
Midd_Tables[4]
Midd_Tables[5]
Midd_Tables[6]
Midd_Tables[7]
Midd_Tables[8]
Admissions <- HTML %>%
html_element("table:nth-child(8)") %>%
html_table()
Midd_Tables <- HTML %>%
html_elements("table")
Admissions <- HTML %>%
html_element("table:nth-child(8)") %>%
html_table()
Admissions <- HTML %>%
html_element("table:nth-child(8)") %>%
html_table()
Midd_Tables <- HTML %>%
html_elements("table") %>%
html(table)
Midd_Tables <- HTML %>%
html_elements("table") %>%
html_table(table)
Midd_Tables <- HTML %>%
html_elements("table") %>%
html_table()
Admissions <- HTML %>%
html_element("table:nth-child(8)") %>%
html_table()
Admissions <- HTML %>%
html_element("table:nth-child(8)")
Admissions
Midd_Tables <- HTML %>%
html_elements("table") %>%
html_table()
Admissions <- HTML %>%
html_element("table:nth-child(8)")
Admissions
Midd_Tables[[8]]
Admissions <- HTML %>%
html_element("table:nth-child(8)")
Admissions
Midd_Tables[[8]]
HTML %>%
html_element("table:nth-child(8)")
#make sure the package is installed on your computer or this won't run!
library(tidyverse)
library(rvest)
library(rvest)
HTML <- read_html("https://en.wikipedia.org/wiki/Middlebury_College")
Midd_Tables <- HTML %>%
html_elements("table") %>%
html_table()
Admissions <- HTML %>%
html_element("table:nth-child(8)")
Admissions
Midd_Tables[[8]]
library(Lock5Data)
data("FootballBrain")
?FootballBrain
data("Smiles")
Smiles %>%
slice(1:10)
t.test(Leniency ~ Group, data=Smiles
conf=0.95, alternative="less", mu=0)
library(openintro)
library(tidyverse)
library(kableExtra)
library(scales)
library(janitor)
library(gridExtra)
library(ggrepel)
library(patchwork)
theme_set(theme_minimal())
my_cols <- c("#0D395F", "#962C28","#017C9F", "#8F9A17","#F4B824","#1F9F8B")
my_cols_all <- c("#0D395F", "#4C4B4C", "#75A3CD", "#97BBD5", "#017C9F", "#ACD6EB", "#1F9F8B", "#8F9A17", "#5E7E2C", "#604937", "#AAA59F", "#DCD8BC", "#962C28", "#C26533", "#B1850B", "#F4B824", "#FDD16D")
#| fig-height: 1.5
library(Lock5Data)
library(tidyverse)
library(kableExtra)
data("FootballBrain")
FootballBrain %>%
filter(Group != "FBNoConcuss") %>%
group_by(Group) %>%
summarize(mean = mean(Hipp), SD = sd(Hipp), n = n()) %>%
kbl(booktabs=TRUE)
FootballBrain %>%
filter(Group != "Control") %>%
ggplot(aes(x=Hipp, y=Group)) +
geom_boxplot(color=my_cols[2]) +
theme_minimal()
library(Lock5Data)
data("FootballBrain")
FootballBrain <- FootballBrain %>%
filter(Group == "Control" | Group == "FBConcuss")
FootballBrain%>%
slice(1:3, 26:28)
FootballBrain %>%
group_by(Group) %>%
summarize(mean = mean(Hipp), SD = sd(Hipp), n = n())
t.test(Hipp ~ Group, data=FootballBrain, conf.level=0.9)
data("Smiles")
Smiles %>%
group_by(Group) %>%
summarize(mean = mean(Leniency), SD = sd(Leniency), n = n()) %>%
kbl(booktabs=TRUE)
data("Smiles")
Smiles %>%
slice(1:10)
t.test(Leniency ~ Group, data=Smiles
conf=0.95, alternative="less", mu=0)
data("Smiles")
Smiles %>%
slice(1:10)
t.test(Leniency ~ Group, data=Smiles
conf=0.95, alternative="less", mu=0)
data("Smiles")
Smiles %>%
slice(1:10)
t.test(Leniency ~ Group, data=Smiles,
conf=0.95, alternative="less", mu=0)
#| fig-height: 1.5
library(Lock5Data)
library(tidyverse)
library(kableExtra)
data("FootballBrain")
FootballBrain %>%
filter(Group != "FBNoConcuss") %>%
group_by(Group) %>%
summarize(mean = mean(Hipp), SD = sd(Hipp), n = n()) %>%
kbl(booktabs=TRUE)
FootballBrain %>%
filter(Group != "FBNoConcuss") %>%
ggplot(aes(x=Hipp, y=Group)) +
geom_boxplot(color=my_cols[2]) +
theme_minimal()
download.file("http://www.openintro.org/stat/data/nc.RData", destfile = "nc.RData")
load("nc.RData")
download.file("http://www.openintro.org/stat/data/nc.RData", destfile = "nc.RData")
load("nc.RData")
download.file("http://www.openintro.org/stat/data/nc.RData", destfile = "nc.RData")
load("nc.RData")
View(nc)
boxplot(weight, data=nc)
boxplot(weight, data=nc)
boxplot(nc$weight, data=nc)
boxplot(nc$weight)
boxplot(nc$weight ~ nc$habit)
boxplot(nc$weight ~ nc$habit, xlab="Smoking Habit", ylab="Weight")
library(tidyverse)
nc %>%
summarize(mean(weight))
library(tidyverse)
nc %>%
group_by(habit) %>%
summarize(mean(weight))
t.test(nc$weight ~ nc$habit)
t.test(nc$weeks)
t.test(nc$weeks, conf.level=0.90)
t.test(nc$weeks, conf.level=0.99)
t.test(nc$weeks, conf.level=0.95)
#load packages
library(tidyverse)
library(kableExtra)
#load more packages here as necessary
#Import the Data
suicides_1 <- read.csv("datasets/suicides-1.csv")
suicides_1 <- read.csv("datasets/suicides-1.csv")
setwd("~/OneDrive - Middlebury College/STAT0118/H_2_midterm")
suicides_1 <- read.csv("datasets/suicides-1.csv")
suicides_1 <- read.csv("datasets/suicides.csv")
#Import the Data
suicides_1 <- read.csv("datasets/suicides.csv")
table <- suicides_1 %>%
filter(year==1994) %>%
group_by(country, year) %>%
summarize(total_suicides = sum(suicides_no)) %>%
arrange(by=desc(total_suicides)) %>%
filter(total_suicides >= 4380 )
table %>%
ggplot(aes(x=total_suicides, y=country)) +
geom_col(stat = "identity") +
labs (x="Suicide Rate", y="Country", title=" Top Ten Countries with the Highest Suicide Rate in 1994")
suicides_1 %>%
filter(country == "Russian Federation") %>%
group_by(year, age) %>%
summarize(total = sum(suicides_no)) %>%
ggplot(aes(x=year, y=total, color=age))+
geom_line()+
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust=1, size = 7))+
labs(title = "Suicide Rate Based on Age in the Russian Federation from 1989-2015")
suicides_1 %>%
filter(age == "35-54 years") %>%
filter(country %in% c("United States", "Russian Federation", "Japan")) %>%
group_by(year, country, sex) %>%
summarize(total = sum(suicides_no)) %>%
ggplot(aes(y=total, x= year, color=sex)) +
geom_line() +
facet_wrap(~country) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=4)) +
labs(title = "Suicide Rates between Men and Women in Japan, the United States,
and Russian Federation between 1989 - 2015")
