{
  "hash": "5e88f49972c9de149c92f0eafc27b989",
  "result": {
    "markdown": "---\ntitle: 'STAT 118: Notes K'\nsubtitle: 'Maps with `maps` and `sf`'\nauthor: 'Emily Malcolm-White'\ninstitute: 'Middlebury College'\nformat:\n  html: \n    toc: TRUE\n    code-overflow: wrap\n    embed-resources: true\n---\n\n\n### Before we get started, some context:\n\n- R is ***fantastic*** for spacial analysis (not covered in this class... look for classes related to spacial statistics)\n- R is *great* for interactive data visualization (via `leaflet` or `shiny`... more on this on Thursday)\n- R is *okay* at spacial data visualization (creating maps).\n  - There are many different packages in `R` for creating maps. I've found that different packages perform best for different maps. We will talk about a few different ones today. \n  -  If you have a highly map-centric project, there is nothing wrong with working in ArcGIS or QGIS if you find the mapping tools in R insufficient. There are many recent improvements with new packages (like `sp`, `rgdal` and `rgeos`) which profiles much of the functionality of GIS packages! Exciting! (not very beginner friendly - requires familiarity with GIS concepts)\n\n# Using the `maps` package\n\nPerhaps the simplest approach to drawing maps is to use `geom_polygon()` to draw boundaries for different regions.\n\nThe `maps` package contains several built in maps: world (for all countries in the world), france, italy, nz, usa, state (usa state boundaries), and county (usa counties). The maps package isn’t particularly accurate or up-to-date, but it’s built into R so it’s an easy place to start.\n\nTo reference each map you use `map_data(\"mapname\")`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#LOAD PACKAGES\nlibrary(tidyverse)\nlibrary(maps)\n\n#LOAD DATA\nworld_map <- map_data(\"world\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#World Map\nggplot(world_map, aes(long, lat, group=group)) + \n  geom_polygon() +\n  coord_quickmap()\n```\n\n::: {.cell-output-display}\n![](118_K_Maps1_Notes_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nNote:\n\n- `coord_quickmap()` adjusts the axes to ensure that longitude and latitude are rendered on the same scale. It is very important that this aspect ratio is maintained or a country may appear super stretched or super squished.\n- the `aes(group=group)` option -- This is SUPER IMPORTANT, so R knows which things to connect together\n\n## What about subsetting the data? \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Subset to get Italy\nitaly <- map_data(\"world\", region =\"Italy\")\n\n#Subset to get USA\nusa <- map_data(\"world\", region =\"USA\")\n```\n:::\n\n\n\n## What if aspect ratio is not maintained? \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ASPECT RATIO NOT MAINTAINED\nggplot(italy, aes(long, lat)) + \n  geom_polygon(aes(group=group)) + \n  theme_light() +\n  ggtitle(\"Italy - Aspect Ratio Not Maintained (not good)\")\n```\n\n::: {.cell-output-display}\n![](118_K_Maps1_Notes_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# ASPECT RATIO MAINTAINED\nggplot(italy, aes(long, lat)) + \n  geom_polygon(aes(group=group)) + \n  coord_quickmap()  +\n  theme_light() +\n  ggtitle(\"Italy - Aspect Ratio Maintained (better)\")\n```\n\n::: {.cell-output-display}\n![](118_K_Maps1_Notes_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## USA with states\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Load Data from maps\nusa_states <- map_data(\"state\")\n\n#Plot of USA with state borders\nggplot(usa_states, aes(long, lat)) +\ngeom_polygon(aes(group=group)) +\ncoord_quickmap()\n```\n\n::: {.cell-output-display}\n![](118_K_Maps1_Notes_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## How to customize colors? \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(usa_states, aes(long, lat)) +\ngeom_polygon(aes(group=group), fill =\"#75816b\", color =\"#292c26\") +\ncoord_quickmap() +\ntheme_light()\n```\n\n::: {.cell-output-display}\n![](118_K_Maps1_Notes_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n# Using the `sf` package \n\nThere are a few limitations to the approach outlined above, not least of which is the fact that the simple \"longitude-latitude\" data format is not typically used in real world mapping. Vector data for maps are typically encoded using the \"simple features\" standard produced by the Open Geospatial Consortium. The [`sf`](https://r-spatial.github.io/sf/) package developed by Edzer Pebesma provides an excellent toolset for working with such data, and the `geom_sf()` and `coord_sf()` functions in ggplot2 are designed to work together with the `sf` package.\n\n![Artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/6025ee5a-bf25-4275-a211-16f4425089d2_rw_1200.png?h=fc615002bc5369c182feebc9c93b90a3){width=50%}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#LOAD PACKAGES\n#install.packages(\"sf\") - note some students are getting a pop-up when they install the sf package for the first time. Select the \"no\" option when it pops up in your console. \nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\n#some students are needing into install the rgeos package seperately as well\n#library(rgeos)\n```\n:::\n\n\nFor our first example, we will be working with a dataset of North Carolina that is built in to the `sf` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo(nc, ask = FALSE, echo = FALSE)\n```\n:::\n\n\nYou should notice that the `nc` dataset is now saved in your R environment. This dataset contains information about Sudden Infant Death Syndrome (SIDS) for North Carolina counties, over two time periods (1974-78 and 1979-84). Let’s take a look at that dataset.\n\nEach row represents a county in North Carolina. This data frame contains the following columns:\n\n- `AREA` County polygon areas in degree units\n- `PERIMETER` County polygon perimeters in degree units\n- `CNTY_` Internal county ID\n- `NAME` County names\n- `FIPS` County ID\n- `FIPSNO` County ID\n- `CRESS_ID` Cressie papers ID\n- `BIR74` births, 1974-78\n- `SID74` SID deaths, 1974-78\n- `NWBIR74` non-white births, 1974-78\n- `BIR79` births, 1979-84\n- `SID79` SID deaths, 1979-84\n- `NWBIR79` non-white births, 1979-84\n- `geom` information needed to plot the map for each county\n\nLet's begin by simply plotting the map: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc %>%\n  ggplot() +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](118_K_Maps1_Notes_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nLet's pretty it up: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc %>%\n  ggplot() +\n  geom_sf(col=\"black\", fill=\"darkgrey\") +\n  theme_light() +\n  ggtitle(\"North Carolina Counties\")\n```\n\n::: {.cell-output-display}\n![](118_K_Maps1_Notes_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n# Cloropleth maps\n\nSuppose we want to shade each of these counties, based on the number of births in 1974. \n\nThis is called a \"cloropleth\" map (a map that uses differences in shading, coloring, or the placing of symbols within predefined areas to indicate the average values of a property or quantity in those areas). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc %>%\n  ggplot() +\n  geom_sf( aes(fill = BIR74), col =\"black\") +\n  theme_light()+\n  ggtitle(\"North Carolina, Birth Rates in 1974\")\n```\n\n::: {.cell-output-display}\n![](118_K_Maps1_Notes_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nHere are some options to customize the plot that you might be interested in: \n\n### Using RColorBrewer palette\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\n\nnc %>%\n  ggplot() +\n  geom_sf(aes(fill = BIR74)) +\n  ggtitle(\"North Carolina, Birth Rates in 1974\") +\n  scale_fill_gradientn(colors = brewer.pal(8,\"Spectral\") ) + #customize colors\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](118_K_Maps1_Notes_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n### Using part of a RColorBrewer palette\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc %>%\n  ggplot() +\n  geom_sf(aes(fill = BIR74)) +\n  ggtitle(\"North Carolina, Birth Rates in 1974\") +\n  scale_fill_gradientn(colors = brewer.pal(11,\"Spectral\")[5:11] ) + #customize colors\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](118_K_Maps1_Notes_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n### Building your own color palette using `scale_fill_gradientn`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc %>%\n  ggplot() +\n  geom_sf(aes(fill = BIR74)) +\n  ggtitle(\"North Carolina, Birth Rates in 1974\") +\n  scale_fill_gradientn(colors = c(\"yellow\",\"orange\",\"red\"))\n```\n\n::: {.cell-output-display}\n![](118_K_Maps1_Notes_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nA note about customizing colors:\n\n- you should use a color scheme that is sequential (has order to it), when you are displaying continuous data\n- you should use a color scheme that is categorical, when your data is in categories and isn’t ordered\nyou should use a color scheme that is diverging, when want to put emphasis on two extremes and mid-range. For example, you might use a diverging palette from red to blue for political party affiliation in the US.\n- pay attention to your map being color blind friendly (`RdYlGr` is the worst…)\n- as a general rule, try not to use blue to represent a land mass (let’s reserve that for bodies of water)\n\n\n## Adding labels\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(nc) + \n  geom_sf() + \n  aes(fill = BIR74) +\n  ggtitle(\"North Carolina, Birth Rates in 1974\") +\n  scale_fill_gradientn(colors = brewer.pal(8, \"Spectral\") ) +  #customize colors\n  theme_light() +\n  geom_sf_text(data = nc[nc$BIR74 >15000,], aes(label = NAME), fontface=\"bold\")\n```\n\n::: {.cell-output-display}\n![](118_K_Maps1_Notes_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n# `sf` cheatsheet\n\n[`sf` cheatsheet](https://github.com/rstudio/cheatsheets/blob/a045e18875cde4c9cf9c7f5f8bee71b4c8c2a2b7/sf.pdf)\n\n",
    "supporting": [
      "118_K_Maps1_Notes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}