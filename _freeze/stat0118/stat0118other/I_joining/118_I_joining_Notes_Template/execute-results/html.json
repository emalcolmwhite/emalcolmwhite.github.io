{
  "hash": "a4b681b87339895b862a1228715d18db",
  "result": {
    "markdown": "---\ntitle: 'STAT 118: Notes I'\nsubtitle: | \n  | Joining tables with `dplyr`\n  | ![](https://dplyr.tidyverse.org/logo.png){width=10%}\nformat:\n  html:\n    toc: true\n    code-overflow: wrap\n---\n\n\n\n\n# `nycflights23` dataset \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#LOAD PACKAGES\nlibrary(tidyverse)\n\n#LOAD DATA\nlibrary(nycflights23)\ndata(\"flights\")\n```\n:::\n\n\n\n`nycflights23` contains information about all 435352 flights departing NYC in 2023. \n\n![](https://r4ds.hadley.nz/diagrams/relational.png)\n\n\n# Join dataframes\n\n## Matching key variable names\n\nSome airline names might be easy to guess (ie. \"UA\" is United Airlines), but what airlines have the code \"VX\", \"HA\", and \"B6\"? Data on airline codes is provided in a dataset called `airlines`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"airlines\")\n```\n:::\n\n\nWe want to have all this information in one data frame instead of two separate data frames. \n\nThe variable `carrier` in `flights` match the variable `carrier` in the `airlines` dataset -- this is our *key variable*. In this case, they have the same name, but this doesn't necessarily have to be true. \n\n\n::: {.cell}\n\n:::\n\n\n\n## Different key variable names\n\nSay instead you are interested in the destinations of all domestic flights departing NYC in 2013, and you ask yourself questions like: “What cities are these airports in?”, or “Is \"ORD\" Orlando?”\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"airports\")\n```\n:::\n\n\n\nIn `airports` the airport code is in `faa`, whereas in `flights` the airport codes are in `origin` and `dest`.\n\n\n::: {.cell}\n\n:::\n\n\nLet’s construct the chain of pipe operators %>% that computes the number of flights from NYC to each destination, but also includes information about each destination airport:\n\n\n::: {.cell}\n\n:::\n\n\n## Multiple Key variables\n\nIn order to join the flights and weather data frames, we need more than one key variable: `year`, `month`, `day`, `hour`, and `origin`. This is because the combination of these 5 variables act to uniquely identify each observational unit in the weather data frame: hourly weather recordings at each of the 3 NYC airports.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"weather\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n## Why is this useful? \n\nUpdating labels: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \nggplot(aes(x = carrier, fill = origin)) +\n  geom_bar() + \n  coord_flip()\n\n#VS\n\nflights %>% \n  inner_join(airports, by = c(\"origin\" = \"faa\")) %>% \n  rename(origin_airport = name) %>% \n  inner_join(airlines, by = c(\"carrier\")) %>%  \n  rename(carrier_name= name) %>% \nggplot(mapping = aes(x = carrier_name, fill = origin_airport)) +\n  geom_bar() + \n  coord_flip()\n```\n:::\n\n\n\nExploring relationships between variables in separate tables: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_weather_joined %>% \n  filter(dep_delay >0) %>% \n  ggplot(aes(x=temp, y=dep_delay)) +\n  geom_point()\n```\n:::\n\n\n# Different Types of Joins\n\n![Credit: RStudio](http://rafalab.dfci.harvard.edu/dsbook/wrangling/img/joins.png)\n\n# Common Issues with Joining\n\n- duplicate keys\n- lowercase/uppercase\n- symbols or whitespace\n- Make sure the join fields are the same format.\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}