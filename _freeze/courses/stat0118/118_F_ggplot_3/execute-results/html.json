{
  "hash": "f9d1b71b6633c7ac58554c79ec509a50",
  "result": {
    "markdown": "---\ntitle: 'plotting numeric data using `scales`, labels, jitter, lines of best fit'\nauthor: 'Emily Malcolm-White'\nformat:\n  html: \n    toc: TRUE\n    code-overflow: wrap\n    embed-resources: true\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\n    code-annotations: hover\n  pdf: default\nexecute: \n  message: FALSE\n  warning: FALSE\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Import the can_lang dataset \ncan_lang <- read.csv(\"https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv\")\n```\n:::\n\n\n\n# scatterplot of `can_lang`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(can_lang, aes(x=most_at_home, y=mother_tongue)) +\n  geom_point() + \n  xlab(\"Language spoken most at home \\n (number of Canadian residents)\") +\n  ylab(\"Mother tongue \\n (number of Canadian residents)\") +\n  theme(text = element_text(size = 12))\n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nNotice anything weird about this plot? \n\n# Axis transformations using the `scales` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(scales)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(can_lang, aes(x = most_at_home, y = mother_tongue)) +\n  geom_point() +\n  xlab(\"Language spoken most at home \\n (number of Canadian residents)\") +\n  ylab(\"Mother tongue \\n (number of Canadian residents)\") +\n  theme(text = element_text(size = 12)) +\n  scale_x_log10(labels = label_comma()) +\n  scale_y_log10(labels = label_comma())\n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n## `mutate` to create new columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncan_lang <- can_lang %>%\n  mutate(\n    mother_tongue_percent = (mother_tongue / 35151728) * 100,\n    most_at_home_percent = (most_at_home / 35151728) * 100\n  )\n```\n:::\n\n\n## Scatterplot with Percents and Colors\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(can_lang, aes(x = most_at_home_percent, \n                     y = mother_tongue_percent, \n                     color = category, shape=category)) +\n  geom_point() +\n  xlab(\"Language spoken most at home \\n (percentage of Canadian residents)\") +\n  ylab(\"Mother tongue \\n (percentage of Canadian residents)\") +\n  theme(text = element_text(size = 12),\n        legend.position = \"top\",\n        legend.direction = \"vertical\") +\n  scale_x_log10(labels = comma) +\n  scale_y_log10(labels = comma)\n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n# Labels\n\nAdding text to a plot is one of the most common forms of annotation. Most plots will not benefit from adding text to every single observation on the plot, but labeling outliers and other important points is very useful. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(can_lang, aes(x = most_at_home_percent, \n                     y = mother_tongue_percent, \n                     color = category, shape=category)) +\n  geom_point() +\n  xlab(\"Language spoken most at home \\n (percentage of Canadian residents)\") +\n  ylab(\"Mother tongue \\n (percentage of Canadian residents)\") +\n  theme(text = element_text(size = 12),\n        legend.position = \"top\",\n        legend.direction = \"vertical\") +\n  scale_x_log10(labels = comma) +\n  scale_y_log10(labels = comma) + \n  geom_text(aes(label=language), \n              nudge_x = 0.25, \n              nudge_y=0.25)\n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nYikes! This is way too much going on in one plot. A few options to try when this happens: \n\n- Decrease the font size of the labels (using the `size=` argument inside `geom_text`).\n- Use the `ggrepel` package to spread out the labels a bit more (more on this later\n- Pick out only a subset of the points to label\n\n## Size of labels\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(can_lang, aes(x = most_at_home_percent, \n                     y = mother_tongue_percent, \n                     color = category, shape=category)) +\n  geom_point() +\n  xlab(\"Language spoken most at home \\n (percentage of Canadian residents)\") +\n  ylab(\"Mother tongue \\n (percentage of Canadian residents)\") +\n  theme(text = element_text(size = 12),\n        legend.position = \"top\",\n        legend.direction = \"vertical\") +\n  scale_x_log10(labels = comma) +\n  scale_y_log10(labels = comma) + \n  geom_text(aes(label=language), \n              nudge_x = 0.25, \n              nudge_y=0.25, size=3)\n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Subset the labels\n\nCreate a new column for the labels. Use `case_when` (or `ifelse`) to only use the official language names and not to put a label for other language categories. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncan_lang <- can_lang %>% \n  mutate(official_languages = case_when(category == \"Official languages\" ~ language, TRUE ~ NA ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(can_lang, aes(x = most_at_home_percent, \n                     y = mother_tongue_percent, \n                     color = category, shape=category)) +\n  geom_point() +\n  xlab(\"Language spoken most at home \\n (percentage of Canadian residents)\") +\n  ylab(\"Mother tongue \\n (percentage of Canadian residents)\") +\n  theme(text = element_text(size = 12),\n        legend.position = \"top\",\n        legend.direction = \"vertical\") +\n  scale_x_log10(labels = comma) +\n  scale_y_log10(labels = comma) + \n  geom_text(aes(label=official_languages), \n              nudge_x = 0.25, \n              nudge_y=0.25, size = 3)\n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## Using `ggrepel`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggrepel)\n```\n:::\n\n\n![Artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/874dedf0-55d1-4cdd-a390-45b8376d2fc2_rw_1920.png?h=39c69f525af3256f7096f510bafb0913){width=50%}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(can_lang, aes(x = most_at_home_percent, \n                     y = mother_tongue_percent, \n                     color = category, shape=category)) +\n  geom_point() +\n  xlab(\"Language spoken most at home \\n (percentage of Canadian residents)\") +\n  ylab(\"Mother tongue \\n (percentage of Canadian residents)\") +\n  theme(text = element_text(size = 12),\n        legend.position = \"top\",\n        legend.direction = \"vertical\") +\n  scale_x_log10(labels = comma) +\n  scale_y_log10(labels = comma) + \n  geom_text_repel(aes(label=official_languages), min.segment.length=0, box.padding=1)\n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n# (Optional) Jitter\n\n\nThis dataset contains a subset of the fuel economy data that the EPA makes available on https://fueleconomy.gov/. It contains only models which had a new release every year between 1999 and 2008 - this was used as a proxy for the popularity of the car.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"mpg\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, aes(x = displ, y = hwy)) + \n  geom_point(aes(color = class)) +\n  ggtitle(\"Overlapping Points\")\n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nNote how there is only a fixed number of values for the x-axis and a fixed number of values for the y-axis. It's possible that some points might be overlapping others! \n\n**Jittering** is a technique for adding random noise to data points that have identical values in a plot. It is a useful method for avoiding overplotting and making it easier to visualize the density of data points that are otherwise hidden behind each other.\n\nWe add `position=\"jitter\"` inside the `geom_point` layer: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, aes(x = displ, y = hwy)) + \n  geom_point(aes(color = class), position = \"jitter\", alpha=0.7) +\n  ggtitle(\"With jitter and alpha\")  +\n  xlab(\"Engine Displacement (in L)\") + \n  ylab(\"Fuel Efficiency (mpg)\") + \n  labs(caption = \"Source: Fuel Economy Data 1999 - 2008 www.fueleconomy.gov\")\n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"DAAG\")\n```\n:::\n\n\n\n# Jitter\n\nJittering is a technique for adding random noise to data points that have identical values in a plot. It is a useful method for avoiding overplotting and making it easier to visualize the density of data points that are otherwise hidden behind each other.\n\nOften when we \"jitter\", we might also adjust the opacity of the points to be able to better see ALL the points. \n\nA plot of possum age vs. total length with age \"jittered\":   \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(possum, aes(x=jitter(age), y=totlngth)) + \n  geom_point(aes(color=Pop), alpha=0.8) \n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n# Facet Wrap\n\n`facet_wrap()` is a function in the `ggplot2` package that allows you to create a multi-panel plot showing a similar plot over different subsets of the data, usually different values of a categorical variable. \n\nA scatter plot of age vs. total length, creating separate side-by-side plots for each different population. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(possum, aes(x=jitter(age), y=totlngth)) +\n  geom_point(aes(color=Pop), alpha=0.8) + \n  facet_wrap(~Pop)  \n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n# Labels\n\nAdding text to a plot is one of the most common forms of annotation. Most plots will not benefit from adding text to every single observation on the plot, but labeling outliers and other important points is very useful. \n\nYou can use `geom_text` to add labels in base R, but it can get quite messy when you have overlapping labels. I prefer using the `ggrepel` package: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# required packages\nlibrary(ggrepel)\n```\n:::\n\n\n\nA scatterplot of age vs. total length, with labels for each possum number: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(possum, aes(x=jitter(age), y=totlngth)) + \n  geom_point(aes(color=Pop), alpha=0.8) + \n  #geom_text(aes(label=case), nudge_x = 0.5, nudge_y = 0.5, size=2) #<1> \n  geom_text_repel(aes(label=case), size=2) #<2>\n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n1. This is the code we would have used if we were using the classic ggplot labeling\n2.  Adds a layer with labels using the ggrepel package\n\n",
    "supporting": [
      "118_F_ggplot_3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}