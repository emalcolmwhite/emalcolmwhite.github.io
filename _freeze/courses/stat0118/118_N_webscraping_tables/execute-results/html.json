{
  "hash": "7abe5cac48a63b73070618aff8e2a4bb",
  "result": {
    "markdown": "---\ntitle: 'Webscraping Tables'\nauthor: 'Emily Malcolm-White'\nformat:\n  html: \n    toc: TRUE\n    code-overflow: wrap\n    embed-resources: true\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\n    code-annotations: hover\n  pdf: default\nexecute: \n  message: FALSE\n  warning: FALSE\n---\n\n\n![](https://rvest.tidyverse.org/logo.png){width=30%}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#LOAD PACKAGES \nlibrary(tidyverse)\n```\n:::\n\n\nData doesn't just magically appear on your computer you need to get it from somewhere. \n\nSometimes we download data files (`.csv`, `.xlsx`, etc.) and save them locally. Other times, we use datasets that come bundled with R packages (like the `gapminder` dataset).\n\n# Obtaining Data From The Web\n\nSay you're interested in renting an apartment in Vermont‚Äîor studying the rental market. You might browse Craigslist's Vermont rental listings.\n\nYou could spend hours copying and pasting each listing... or you could write code that extracts the data for you.\n\nWhen you visit a website, your browser loads the HTML source code, which includes the structure and content of the page‚Äîlike headings, tables, and links. We can use R to read that code and extract specific content. This is called web scraping.\n\n# üõë Should we be scraping this data? \n\nBefore scraping, always ask:\n\n- Is it legal?\n- Can your specific use case violate the rules?\n- Even if legal, is it ethical?\n\nIn the U.S., scraping public data is typically legal if:\n\n- It's not used for harmful purposes\n- It doesn't interfere with a website's business\n- It excludes personally identifiable information (PII)\n\n# Case Law Examples\n\n- [eBay vs. Bidder's Edge (2000) ](https://en.wikipedia.org/wiki/EBay_v._Bidder's_Edge#Order): Bots restricted from overloading systems\n- [Facebook vs. Power Venures (2009)](https://en.wikipedia.org/wiki/Facebook,_Inc._v._Power_Ventures,_Inc.#Ruling): Logging in on others' behalf violated terms\n- [Linkedin vs. hiQ Labs (2019)](https://en.wikipedia.org/wiki/HiQ_Labs_v._LinkedIn): Scraping public profiles ruled permissible\n\nWebsites often describe scraping policies in two places:\n\n1. Their robots.txt file (e.g., craigslist.org/robots.txt)\n2. Their Terms of Service (TOS) document\n\nCraigslist explicitly forbids scraping. Wikipedia does not.\n\n::: {.callout-note}\nWhy might Craigslist restrict scraping, while Wikipedia allows it?\n:::\n\n\n\n# How does HTML work? \n\nHTML (HyperText Markup Language) is the language used to create web pages. HTML uses tags (like `<table>`, `<tr>`, `<td>`) to define page elements. If we understand this structure, we can write code that extracts tables and other elements from the page.\n\n:::callout-tip\nTypically, an HTML element is defined by a start tag, some content, and an end tag\n\n`<tagname> ...some content here... </tagname>`\n:::\n\nFor example: \n\n```{}\n<html>\n<head>\n<title>Page Title</title>\n</head>\n<body>\n\n<h1>My First Heading</h1>\n<p>My first paragraph.</p>\n\n</body>\n</html>\n```\n\nThere are many, many different possible tag elements. In this class, it's not important that you know the specifics of what each element is. It's useful for you to understand the basic structure.  \n\n## HTML Tables\n\nAn HTML table is used to represent data in a structured way\n\n- `<table>`\tDefines a table\n- `<th>`\tDefines a header cell in a table\n- `<tr>`\tDefines a row in a table\n- `<td>`\tDefines a cell in a table\n\nHere is the HTML code: \n\n```{}\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Birth Year</th>  \n    <th>Country</th>\n  </tr>\n  <tr>\n    <td>Harry Styles</td>\n    <td>Feb 1, 1994</td>\n    <td>Britain</td>\n  </tr>\n  <tr>\n    <td>Taylor Swift</td>\n    <td>Dec 13, 1989</td>\n    <td>USA</td>\n  </tr>\n  <tr>\n    <td>Justin Bieber</td>\n    <td>Mar 1, 1994</td>\n    <td>Canada</td>\n  </tr>\n</table>\n```\n\nHere is how the HTML displays in a web browser: \n\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Birth Year</th>  \n    <th>Country</th>\n  </tr>\n  <tr>\n    <td>Harry Styles</td>\n    <td>Feb 1, 1994</td>\n    <td>Britain</td>\n  </tr>\n  <tr>\n    <td>Taylor Swift</td>\n    <td>Dec 13, 1989</td>\n    <td>USA</td>\n  </tr>\n  <tr>\n    <td>Justin Bieber</td>\n    <td>Mar 1, 1994</td>\n    <td>Canada</td>\n  </tr>\n</table>\n\nToday's class will focus on scraping data from HTML tables! \n\n## HTML class\n\nThe `class` attribute can be added to any HTML element. Often it is used to help customize the styling of the element (among other things). \n\n```\n<h2 class=\"city\">Middlebury</h2>\n<p class=\"city\">Middlebury is a town in Vermont</p>\n```\n\nThis can be particularly useful in web scraping -- we can ask to scrape particular elements, particular classes, or both!\n\n# Web Scraping using `rvest`\n\nWe need the package [`rvest`](https://rvest.tidyverse.org/) to help us with this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\n```\n:::\n\n\n## Viewing Raw HTML from a website\n\nYou can inspect the source code of any webpage by using a web browser like Firefox or Chrome. \n\n- On Firefox, navigate to the ‚ÄúTools‚Äù menu item in the top menu and click on ‚ÄúWeb Developer/Page Source‚Äù. You can also use the shortcut `Command + U`\n- On Chrome, navigate to the top menu item ‚ÄúView‚Äù and click on ‚ÄúDeveloper/View Source.‚Äù You can also use the keyboard shortcut `Option-Command-U`. It also can be useful to use the [SelectorGadget Extension](https://chrome.google.com/webstore/detail/selectorgadget/mhjhnkcfbdhnjickkkdbjoemdmbfginb/related). \n\n## Webscraping Tables from Wikipedia\n\nCheck out the information on the (List of the Most Viewed YouTube Videos on Wikipedia)[https://en.wikipedia.org/wiki/List_of_most-viewed_YouTube_videos]. \nSuppose we want to scrape this data to use in R. \n\n- `read_html` scrapes the raw html from the webpage as text\n- `html_element` (and `html_elements`) selects particular elements from the HTML code\n- `html_table` formats a scraped html table as a tibble (R table)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoutube_videos <- read_html(\"https://en.wikipedia.org/wiki/List_of_most-viewed_YouTube_videos\") %>%\n  html_element(\".wikitable\") %>%\n  html_table() \n\nyoutube_videos\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 31 √ó 6\n   `Video name`                    Uploader `Views (billions)` Date  Notes ``   \n   <chr>                           <chr>    <chr>              <chr> <chr> <chr>\n 1 Baby Shark Dance[7]             Pinkfon‚Ä¶ 15.65              June‚Ä¶ \"[A]\" <NA> \n 2 Despacito[10]                   Luis Fo‚Ä¶ 8.66               Janu‚Ä¶ \"[B]\" <NA> \n 3 Wheels on the Bus[18]           Cocomel‚Ä¶ 7.17               May ‚Ä¶ \"\"    <NA> \n 4 Johny Johny Yes Papa[19]        LooLoo ‚Ä¶ 7.02               Octo‚Ä¶ \"\"    <NA> \n 5 Bath Song[20]                   Cocomel‚Ä¶ 7.01               May ‚Ä¶ \"\"    <NA> \n 6 See You Again[21]               Wiz Kha‚Ä¶ 6.58               Apri‚Ä¶ \"[C]\" <NA> \n 7 Shape of You[26]                Ed Shee‚Ä¶ 6.42               Janu‚Ä¶ \"[D]\" <NA> \n 8 Phonics Song with Two Words[29] ChuChu ‚Ä¶ 6.31               Marc‚Ä¶ \"\"    <NA> \n 9 Uptown Funk[30]                 Mark Ro‚Ä¶ 5.49               Nove‚Ä¶ \"\"    <NA> \n10 Gangnam Style[31]               Psy      5.48               July‚Ä¶ \"[E]\" <NA> \n# ‚Ñπ 21 more rows\n```\n:::\n:::\n\n\n\n- We could have used `html_element(\"table\")`\nIf we did this, it would have pulled the first `<table>` from the page. \n\n- We could have used `html_elements(\"table\")`\nIf we did this, it would have pulled all the `<table>` elements from the page. \n\n- If you want a specific table that isn't the first table, scrape all the tables and apply `html_table()`. Then take that new object of the tables and add `[[n]]` to get the $n^{th}$ table. For example to call the $2^{nd}$ table, \n\n```{}\ntables <- html %>% \n  html_elements(\"table\") %>%\n  html_table() \n  \ntables[[2]]\n```\n\n- In this case, we used `html_elements(\".wikitable\")`\nI choose to use this because the `<table>` was also defined with a unique `class`: `<table class=\"wikitable sortable\">`\n\n:::callout-warning\nNote that if we are using `html_element` to call a class, it is important to add a \"`.`\" before the class element name. You do not need to do this is you are calling an HTML element (like \"table\")\n:::\n\n## Cleaning up with `janitor`\n\nWeb scraping doesn't always format perfectly. Let's clean it up!  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(janitor)\n```\n:::\n\n\n![Artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/79a12c01-0cc1-4643-b1e7-8ce8cafc947b_rw_1920.png?h=a3760f3882e735d7065627fc060714ce){width=50%}\n\nClean up the names of the header: \n\n::: {.cell}\n\n```{.r .cell-code}\nyoutube_videos <- clean_names(youtube_videos)\n```\n:::\n\n\nFormat the views as a number using `as.numeric`:\n\n::: {.cell}\n\n```{.r .cell-code}\nyoutube_videos <- youtube_videos %>% \n  mutate(views_billions = as.numeric(views_billions))\n```\n:::\n\n\nWhat are the top 10 most viewed YouTube Videos? \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop10 <- youtube_videos %>%\n  arrange(desc(views_billions)) %>%\n  slice(1:10)\n\ntop10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 √ó 6\n   video_name                      uploader     views_billions date  notes x    \n   <chr>                           <chr>                 <dbl> <chr> <chr> <chr>\n 1 Baby Shark Dance[7]             Pinkfong Ba‚Ä¶          15.6  June‚Ä¶ \"[A]\" <NA> \n 2 Despacito[10]                   Luis Fonsi             8.66 Janu‚Ä¶ \"[B]\" <NA> \n 3 Wheels on the Bus[18]           Cocomelon -‚Ä¶           7.17 May ‚Ä¶ \"\"    <NA> \n 4 Johny Johny Yes Papa[19]        LooLoo Kids‚Ä¶           7.02 Octo‚Ä¶ \"\"    <NA> \n 5 Bath Song[20]                   Cocomelon -‚Ä¶           7.01 May ‚Ä¶ \"\"    <NA> \n 6 See You Again[21]               Wiz Khalifa            6.58 Apri‚Ä¶ \"[C]\" <NA> \n 7 Shape of You[26]                Ed Sheeran             6.42 Janu‚Ä¶ \"[D]\" <NA> \n 8 Phonics Song with Two Words[29] ChuChu TV N‚Ä¶           6.31 Marc‚Ä¶ \"\"    <NA> \n 9 Uptown Funk[30]                 Mark Ronson            5.49 Nove‚Ä¶ \"\"    <NA> \n10 Gangnam Style[31]               Psy                    5.48 July‚Ä¶ \"[E]\" <NA> \n```\n:::\n:::\n\n\nOnce we have this data, we can make cool plots!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop10 %>% \n  ggplot( aes(x=views_billions, y=reorder(video_name, views_billions))) +\n    geom_bar(stat=\"identity\") +\n    xlab(\"Views (in billions)\") +\n    ylab(\"Videos\") +\n    ggtitle(\"Top 10 Most Watched YouTube Videos of All Time\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](118_N_webscraping_tables_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nIn this case, the list of the names is still not displaying very neatly. For example, rather than `\"Baby Shark Dance\"[6]` I might want it to just say `Baby Shark Dance`. \n\nWe can use the `stringr` package to remove symbols and numbers from the video names. We will be talking more about `stringr` later this semester and it's not something I expect you to be able to do at this point in the semester. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n\ntop10 %>% \n  mutate(video_name=str_replace_all(video_name, \"[^[:alpha:]]\", \" \")) %>% \n  ggplot(aes(x=views_billions, y=reorder(video_name, views_billions))) +\n    geom_bar(stat=\"identity\") +\n    xlab(\"Views (in billions)\") +\n    ylab(\"Videos\") +\n    ggtitle(\"Top 10 Most Watched YouTube Videos of All Time\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](118_N_webscraping_tables_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n:::callout\n# External Resources\n\n- [R for Data Science, Webscraping](https://r4ds.hadley.nz/webscraping)\n\n:::\n",
    "supporting": [
      "118_N_webscraping_tables_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}