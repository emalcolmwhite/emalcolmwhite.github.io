{
  "hash": "7c5ac9b734b42b9ba2e285a712de9e33",
  "result": {
    "markdown": "---\ntitle: 'Working with dates using `lubridate`'\nauthor: 'Emily Malcolm-White'\nformat:\n  html: \n    toc: TRUE\n    code-overflow: wrap\n    embed-resources: true\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\n    code-annotations: hover\nexecute: \n  message: FALSE\n  warning: FALSE\n---\n\n\n![](https://lubridate.tidyverse.org/logo.png){width=30%}\n\n# Date Formats\n\nThink of how many different formats you know of to format a date: \n\n- 2023 07 06 \n- Wed, Jun 7, 2023\n- 07-06-23\n- 06-07-23 14:55 ET\n- 06/07/2023 2:55pm\n\nYikes! \n\n# Date, Time, and Datetime\n\nDate/time data are data that conveys information about, you guessed it, date and/or time! There are three relevant data types when we talk about date/time data:\n\n1. Date - only has the date (e.g. 2020-05-15) \n2. Time - only has the time (e.g. 20:45:00) \n3. Datetime - has both the date and time (e.g. 2020-05-15 20:45:00)\n\n# `Lubridate`\n\n![Artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/79a12c01-0cc1-4643-b1e7-8ce8cafc947b_rw_1920.png?h=a3760f3882e735d7065627fc060714ce){width=50%}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#LOAD PACKAGES \nlibrary(tidyverse)\nlibrary(lubridate)\n```\n:::\n\n\n# Standard Date Format\n\nThe `ymd()` function transforms data in all kinds of different formats into a standardized date format displaying year, then month, then day. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nymd(\"06 02 04\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2006-02-04\"\n```\n:::\n\n```{.r .cell-code}\nymd(\"06/02/04\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2006-02-04\"\n```\n:::\n\n```{.r .cell-code}\nymd(\"20060204\")  # works as well\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2006-02-04\"\n```\n:::\n\n```{.r .cell-code}\nymd(\"2006 2 4\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2006-02-04\"\n```\n:::\n\n```{.r .cell-code}\nymd(060204)  # works with numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2006-02-04\"\n```\n:::\n:::\n\n\n`mdy()` (month day year) and `dmy()` (day month year) formats also exist. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nymd_hms(\"2020-04-01 10:30:13\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-04-01 10:30:13 UTC\"\n```\n:::\n\n```{.r .cell-code}\nymd_hm(\"2020/04/01 10.30\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-04-01 10:30:00 UTC\"\n```\n:::\n:::\n\n\n# Solar Data\n\nShoal Marine Lab (SML) is a remote field station located on Appledore Island, Maine jointly operated by Cornell University and the University of New Hampshire. The island is powered primarily by solar power. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#read in Data\npower <- read.csv(\"data/power.csv\")\n```\n:::\n\n\nWhat format is the date in? \n\n:::callout-warning\nWhat happens if we try to make a line plot with the date in this format? \n\n\n::: {.cell}\n\n```{.r .cell-code}\npower %>% \n  ggplot(aes(x=Date, y=power_kW)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](118_R_lubridate_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\nYikes!\n:::\n\nWe need to put it in standardized date format first:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npower <- power %>% \n  mutate(Date = mdy_hm(Date))  \n```\n:::\n\n\nStandardized Format helps us to create time series plots very easily! \n\n\n::: {.cell}\n\n```{.r .cell-code}\npower %>% \n  ggplot(aes(x=Date, y=power_kW)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](118_R_lubridate_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n# Picking out information\n\n![Artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/3017cf57-d7d9-4f73-9b66-f2be0ebf2489_rw_1920.png?h=2cdd179bc087c56b43f8aa6ea849ca1a){width=50%}\n\nSometimes we need to pick out year, month, date so we can filter, sort, etc. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npower <- power %>% \n  mutate(Year = year(Date)) %>%   \n  mutate(Month = month(Date)) %>% \n  mutate(Day = day(Date))\n```\n:::\n\n\nSuppose we only want the time series plot for June 1: \n\n\n::: {.cell}\n\n```{.r .cell-code}\npower %>% \n  filter(Month == \"6\") %>%\n  filter(Day == \"1\") %>% \n  ggplot(aes(x=Date, y=power_kW)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](118_R_lubridate_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n# Portal Data\n\nThe Portal Project is a long-term ecological study being conducted near Portal, AZ. Since 1977, the site has been used to study the interactions among rodents, ants and plants and their respective responses to climate.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#LOAD DATA\nportal_rodent <- read.csv(\"https://github.com/weecology/PortalData/raw/main/Rodents/Portal_rodent.csv\")\n```\n:::\n\n\nUnfortunately, because the information about datetime is divided up into different columns, R does not recognize it as date/time data. What we need to do is combine and convert all of these columns into datetime. To do this, we can use the function `make_datetime()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nportal_rodent <- portal_rodent %>% \n  mutate(datetime = make_datetime(year, month, day))\n```\n:::\n",
    "supporting": [
      "118_R_lubridate_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}