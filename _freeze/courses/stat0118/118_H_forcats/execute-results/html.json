{
  "hash": "8351442f320733973c4085ab323d16a7",
  "result": {
    "markdown": "---\ntitle: '`forcats`: working with categorical data'\nauthor: 'Emily Malcolm-White'\nformat:\n  html: \n    toc: TRUE\n    code-overflow: wrap\n    embed-resources: true\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\n    code-annotations: hover\n  pdf: default\nexecute: \n  message: FALSE\n  warning: FALSE\n---\n\n\n\n\nThe R package `forcats` is designed to make working with categorical variables easier and more efficient. It provides a set of functions that allow you to manipulate and analyze categorical data with ease. In this lesson, we'll cover the basics of the `forcats` package and some of its most useful functions.\n\n![](https://forcats.tidyverse.org/logo.png){width=30%}\n\n## Categorical Variables\n\nLet's review what categorical data is. Categorical data is a type of data that consists of categories or labels.\n\nExamples of categorical data include:\n\n- Colors (red, blue, green, etc.)\n- Types of vehicles (sedan, SUV, truck)\n- Educational degrees (high school, college, graduate school)\n\nCategorical data can be further divided into two types: *nominal* and *ordinal*. Nominal data consists of categories that have no inherent order, while ordinal data consists of categories that have a natural order. For example, educational degrees are ordinal data because they can be ordered from least to most advanced.\n\n## `mpg` Data\n\nWe will play with different functions in the `forcats` packages using the `mpg` dataset from earlier in the semester. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(forcats)\nlibrary(tidyverse)\ndata(\"mpg\")\n```\n:::\n\n\nRecall our side-by-side boxplot: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>% \n  ggplot(aes(x=class, y=hwy)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](118_H_forcats_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## Reordering Factor Levels\n\nOne of the most useful functions is fct_relevel(), which allows you to reorder the levels of a factor. This can be useful when you want to change the default ordering of the levels or when you want to group certain levels together.\n\nIs `class` a factor?  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg$class %>% is.factor()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nLet's make it a factor! \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg <- mpg %>% \n  mutate(class = class %>%  as.factor())\n```\n:::\n\n\nLet's check the levels and their current ordering! \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg$class %>%  \n  levels()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2seater\"    \"compact\"    \"midsize\"    \"minivan\"    \"pickup\"    \n[6] \"subcompact\" \"suv\"       \n```\n:::\n:::\n\n\nTo reorder the levels with `fct_relevel()` \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg <- mpg %>% \n  mutate(class = class %>%  fct_relevel( \"compact\",\"subcompact\",\"midsize\",\"2seater\",\"minivan\",\"suv\",\"pickup\"))\n\nmpg$class %>% \n  levels()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"compact\"    \"subcompact\" \"midsize\"    \"2seater\"    \"minivan\"   \n[6] \"suv\"        \"pickup\"    \n```\n:::\n:::\n\n\nLet's recreate our side-by-side boxplot now: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>% \n  ggplot(aes(x=class, y=hwy)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](118_H_forcats_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nRather than reordering them manually by typing the order, you could also re-level by some numeric criteria using `fct_reorder()`. For example: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg <- mpg %>% \n  mutate(class = class %>% fct_reorder(hwy, median))\n\nmpg$class %>% \n  levels()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"pickup\"     \"suv\"        \"minivan\"    \"2seater\"    \"subcompact\"\n[6] \"compact\"    \"midsize\"   \n```\n:::\n:::\n\n\n\n## Renaming Factor levels with `fct_recode`\n\nSometimes you might not like the way the levels are named. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg <- mpg %>% \n  mutate(class = class %>%  fct_recode(\"two-seater\" = \"2seater\"))\n\n## NEW NAME = OLD NAME\n\nmpg$class %>% \n  levels()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"pickup\"     \"suv\"        \"minivan\"    \"two-seater\" \"subcompact\"\n[6] \"compact\"    \"midsize\"   \n```\n:::\n:::\n\n\n## Factor Collapsing with `fct_collapse()`\n\nLet's say we wanted to create only two categories -- cars and larger vehicles. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg <- mpg %>% \n  mutate(class_two = class %>%  fct_collapse( cars = c(\"compact\", \"subcompact\", \"midsize\", \"two-seater\"), big = c(\"pickup\", \"suv\", \"minivan\")))\n\nmpg$class_two %>% \n  levels()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"big\"  \"cars\"\n```\n:::\n:::\n\n\n\n## Lumping into an other category\n\n- `fct_lump_min()`: lumps levels that appear fewer than min times.\n\n- `fct_lump_prop()`: lumps levels that appear in fewer than (or equal to) prop * n times.\n\n- `fct_lump_n()` lumps all levels except for the n most frequent (or least frequent if n < 0)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>% \n  count(manufacturer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 Ã— 2\n   manufacturer     n\n   <chr>        <int>\n 1 audi            18\n 2 chevrolet       19\n 3 dodge           37\n 4 ford            25\n 5 honda            9\n 6 hyundai         14\n 7 jeep             8\n 8 land rover       4\n 9 lincoln          3\n10 mercury          4\n11 nissan          13\n12 pontiac          5\n13 subaru          14\n14 toyota          34\n15 volkswagen      27\n```\n:::\n:::\n\n\nLet's say we wanted only the manufacturers with at least 15 cars produced. Everything else we want to just be other: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg <- mpg %>% \n  mutate(class_lumped = class %>% fct_lump_min(15))\n\nmpg$manufacturer %>% \n  levels()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\nCreate a table using kableExtra: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(kableExtra)\n\nmpg %>% \n  count(manufacturer) %>% \n  kbl() %>% \n  kable_styling()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> manufacturer </th>\n   <th style=\"text-align:right;\"> n </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> audi </td>\n   <td style=\"text-align:right;\"> 18 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> chevrolet </td>\n   <td style=\"text-align:right;\"> 19 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> dodge </td>\n   <td style=\"text-align:right;\"> 37 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ford </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> honda </td>\n   <td style=\"text-align:right;\"> 9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> hyundai </td>\n   <td style=\"text-align:right;\"> 14 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> jeep </td>\n   <td style=\"text-align:right;\"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> land rover </td>\n   <td style=\"text-align:right;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> lincoln </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> mercury </td>\n   <td style=\"text-align:right;\"> 4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> nissan </td>\n   <td style=\"text-align:right;\"> 13 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> pontiac </td>\n   <td style=\"text-align:right;\"> 5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> subaru </td>\n   <td style=\"text-align:right;\"> 14 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> toyota </td>\n   <td style=\"text-align:right;\"> 34 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> volkswagen </td>\n   <td style=\"text-align:right;\"> 27 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n",
    "supporting": [
      "118_H_forcats_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}