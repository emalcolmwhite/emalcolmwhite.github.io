{
  "hash": "386c7329305c3ced0992b8c27dc70ee5",
  "result": {
    "markdown": "---\ntitle: 'filter, select, arrange, slice, mutate'\nauthor: 'Emily Malcolm-White'\nformat:\n  html: \n    toc: TRUE\n    code-overflow: wrap\n    embed-resources: true\nexecute: \n  message: FALSE\n  warning: FALSE\n---\n\n\n# Installing and Using Packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) \n```\n:::\n\n\n\nToday we are specifically going to be talking about the package `dplyr` which is useful to manipulating data sets.\n\n\n# `can_lang` dataset \n\nIn this class, we are going to be working with a dataset relating to the languages spoken at home by Canadian residents. Many Indigenous peoples exist in Canada with their own languages and cultures. Sadly, colonization has led to the loss of many of these languages. This data is a subset of data collected during the 2016 census. \n\n# Importing Data\n\nWhat is a .csv file?\n\nHow do we import it into R?\n\nUse `read.csv()`! Note that your data file (`.csv`) needs to be saved in the same folder as your notes template document (`.qmd`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#can_lang <- read.csv(\"can_lang.csv\") \n```\n:::\n\n\nAlternatively, you can download it directly from the internet. Github user `ttimbers` hosts this file to share with the public at the link: <https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#can_lang <- read.csv(\"https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv\") \n```\n:::\n\n\n\nLet's take a look at this data for a minute to see what information has been recorded. In the environment in the top left, if you click on the word `can_lang` (not the blue play button, the word itself) it will open the object so you can see what is saved inside.\n# `filter`\n\nWe can use the `filter` function to extract ***rows*** from the data that have a particular characteristic.\n\nFor example, we may be interested in only looking at only the languages in this dataset that are Aboriginal languages.\n\n\n::: {.cell}\n\n:::\n\n\n\nOftentimes, we want to take our subset and give it a new name. This takes our subset and assigns it to a new dataset called `aboriginal_lang`.\n\n\n::: {.cell}\n\n:::\n\n\n\nSuppose we want a list of all the languages in Canada that are spoken by less than 100 people as their mother tongue.\n\n\n::: {.cell}\n\n:::\n\n\n\nThe logical operators are given below:\n\n| Operator | Description               |\n|----------|---------------------------|\n| `<`      | Less than                 |\n| `>`      | Greater than              |\n| `<=`     | Less than or equal to     |\n| `>=`     | Greater than or equal to  |\n| `==`     | Equal to                  |\n| `!=`     | Not equal to              |\n| `!x`     | Not x                     |\n| `x | y`  | x OR y                    |\n| `x & y`  | x AND y                   |\n\n\n# `select`\n\n`select` is used to extract only certain ***columns***. For example, perhaps we only want to print out a list names of the aboriginal languages (language column).\n\n\n::: {.cell}\n\n:::\n\n\nWe can combine criteria together as well in one command with multiple pipes:\n\n\n::: {.cell}\n\n:::\n\n\n# `arrange`\n\nThe `arrange` function allows us to order the rows of the data frame by the values of a particular column.\n\nFor example, arrange all the aboriginal languages in canada by from most to least spoken as mother tongue.\n\n\n::: {.cell}\n\n:::\n\n\nNote:\n\n-   use arrange(variable) to go from least to most\n-   use arrange(desc(variable)) to go from most to least, arrange(-variable) also works\n\n# `slice`\n\nThe slice function will allow us to pick only a subset of the rows based on their numeric order (1st through last).\n\nFor example, if I want a list of the 10 most commonly spoken aboriginal languages.\n\n\n::: {.cell}\n\n:::\n\n\n\n# `mutate`\n\n`mutate()` creates new columns that are functions of existing variables.\n\nFor example, if I want to create a new column called `mother_tongue_K` which represents the number of people who speak the language their mother tongue in thousands. You may want to save this new dataset over top of the original dataset so you could use this new column in the future. \n\n\n::: {.cell}\n\n:::\n\n\nThis can be useful for unit conversions. It also be useful for making new calculations based on existing data (for example, price and number of square feet could be used to calculate price per square foot).\n\n",
    "supporting": [
      "118_B_wrangling_notes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}