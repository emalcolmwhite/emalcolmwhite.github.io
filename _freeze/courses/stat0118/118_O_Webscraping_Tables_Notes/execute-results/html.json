{
  "hash": "a5f842afa1f1f480e6320053885d933a",
  "result": {
    "markdown": "---\ntitle: 'Webscraping Tables with `rvest`'\nauthor: 'Emily Malcolm-White'\nformat:\n  html: \n    toc: TRUE\n    code-overflow: wrap\n    embed-resources: true\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\n    code-annotations: hover\nexecute: \n  message: FALSE\n  warning: FALSE\n---\n\n\n![](https://rvest.tidyverse.org/logo.png){width=30%}\n\n\n::: {.cell hash='118_O_Webscraping_Tables_Notes_cache/html/unnamed-chunk-1_a46641a2bda85907aec272bea78eb14b'}\n\n```{.r .cell-code}\n#LOAD PACKAGES \nlibrary(tidyverse)\n```\n:::\n\n\nData doesn't just magically appear on your computer you need to get it from somewhere. \n\nOften times, we download data (.csv files or other) and save it locally on our computer. \n\nOther times, we download it from R packages (like we did with the gapminder dataset). \n\n# Obtaining Data From The Web\n\nFor example, maybe we are interested in renting an apartment or house in Vermont (or studying the rental market in Vermont). You might navigate to Craigslist to get some information: [https://vermont.craigslist.org/search/apa](https://vermont.craigslist.org/search/apa)\n\nWe could spend many hours writing down and creating a spreadsheet with the information about each available apartment... or... \n\nWhen you enter a URL into your browser, your browser connects to the web server at that URL and asks for the *source code* for that website. We can view the source code in a web brower by clicking on *view source*. \n\nWeb scraping is a process by which we can use R (or other software) to systematically go through the source code to extract content and data. \n\n# STOP: Should we be scraping this data? \n\n*Before* scraping data from the web, you should always check whether or not you *should* scrape it.\n\n*Is it legal?*\n*Can your specific use case violate the rules?*\n*Even if legal, is it ethical?*\n\nIn the US, publicly available information on the web is legal as long as the scraped data is not:  \n\n- used for any harmful purpose\n- used to directly harm the scraped website's business of operations\n- including personally identifiable information (PII)\n\nThere are some very interesting cases which help to define the above precedent that you might want to read about: [eBay vs. Bidder's Edge (2000)](https://en.wikipedia.org/wiki/EBay_v._Bidder's_Edge#Order), [Facebook vs. Power Venures (2009)](https://en.wikipedia.org/wiki/Facebook,_Inc._v._Power_Ventures,_Inc.#Ruling) and [Linkedin vs. hiQ Labs (2019)](https://en.wikipedia.org/wiki/HiQ_Labs_v._LinkedIn)\n\nWebsites sometimes outline the use of webscraping in their Terms of Use. There are two places you can look: the `robots.txt` file and the Terms of Service Document. For example, in the the Craigslist terms of service document, we find the following text *\"You agree not to copy/collect CL content via robots, spiders, scripts, scrapers, crawlers, or any automated or manual equivalent (e.g. by hand).* Wikipedia on the other hand, doesn't explicit state that web scraping is disallowed so I will encourage us to use that website for many of our examples this week. \n\n# First, a bit about html code and html tables\n\n## Basics of HTML\n\n- HTML stands for Hyper Text Markup Language and is the standard markup language for creating webpages\n- HTML code consists of a series of elements \n\n:::callout-tip\nTypically, an HTML element is defined by a start tag, some content, and an end tag\n\n`<tagname> ...some content here... </tagname>`\n:::\n\nFor example: \n\n```{}\n<html>\n<head>\n<title>Page Title</title>\n</head>\n<body>\n\n<h1>My First Heading</h1>\n<p>My first paragraph.</p>\n\n</body>\n</html>\n```\n\nThere are many, many different possible tag elements. In this class, it's not important that you know the specifics of what each element is. It's useful for you to understand the basic structure.  \n\n## HTML Tables\n\nAn HTML table is used to represent data in a structured way\n\n- `<table>`\tDefines a table\n- `<th>`\tDefines a header cell in a table\n- `<tr>`\tDefines a row in a table\n- `<td>`\tDefines a cell in a table\n\nHere is the HTML code: \n\n```{}\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Birth Year</th>  \n    <th>Country</th>\n  </tr>\n  <tr>\n    <td>Harry Styles</td>\n    <td>Feb 1, 1994</td>\n    <td>Britain</td>\n  </tr>\n  <tr>\n    <td>Taylor Swift</td>\n    <td>Dec 13, 1989</td>\n    <td>USA</td>\n  </tr>\n  <tr>\n    <td>Justin Bieber</td>\n    <td>Mar 1, 1994</td>\n    <td>Canada</td>\n  </tr>\n</table>\n```\n\nHere is how the HTML displays in a web browser: \n\n<table>\n  <tr>\n    <th>Name</th>\n    <th>Birth Year</th>  \n    <th>Country</th>\n  </tr>\n  <tr>\n    <td>Harry Styles</td>\n    <td>Feb 1, 1994</td>\n    <td>Britain</td>\n  </tr>\n  <tr>\n    <td>Taylor Swift</td>\n    <td>Dec 13, 1989</td>\n    <td>USA</td>\n  </tr>\n  <tr>\n    <td>Justin Bieber</td>\n    <td>Mar 1, 1994</td>\n    <td>Canada</td>\n  </tr>\n</table>\n\nToday's class will focus on scraping data from HTML tables! \n\n## HTML class\n\nThe `class` attribute can be added to any HTML element. Often it is used to help customize the styling of the element (among other things). \n\n```\n<h2 class=\"city\">Middlebury</h2>\n<p class=\"city\">Middlebury is a town in Vermont</p>\n```\n\nThis can be particularly useful in web scraping -- we can ask to scrape particular elements, particular classes, or both!\n\n# Web Scraping using `rvest`\n\nWe need the package [`rvest`](https://rvest.tidyverse.org/) to help us with this.\n\n\n::: {.cell hash='118_O_Webscraping_Tables_Notes_cache/html/unnamed-chunk-2_900ff32f0fa5aa2ac60c4981186dc5c2'}\n\n```{.r .cell-code}\nlibrary(rvest)\n```\n:::\n\n\n## Viewing Raw HTML from a website\n\nYou can inspect the source code of any webpage by using a web browser like Firefox or Chrome. \n\n- On Firefox, navigate to the “Tools” menu item in the top menu and click on “Web Developer/Page Source”. You can also use the shortcut `Command + U`\n- On Chrome, navigate to the top menu item “View” and click on “Developer/View Source.” You can also use the keyboard shortcut `Option-Command-U`. It also can be useful to use the [SelectorGadget Extension](https://chrome.google.com/webstore/detail/selectorgadget/mhjhnkcfbdhnjickkkdbjoemdmbfginb/related). \n\n## Webscraping Tables from Wikipedia\n\nCheck out the information on the (List of the Most Viewed YouTube Videos on Wikipedia)[https://en.wikipedia.org/wiki/List_of_most-viewed_YouTube_videos]. \nSuppose we want to scrape this data to use in R. \n\n- `read_html` scrapes the raw html from the webpage as text\n- `html_element` (and `html_elements`) selects particular elements from the HTML code\n- `html_table` formats a scraped html table as a tibble (R table)\n\n\n::: {.cell hash='118_O_Webscraping_Tables_Notes_cache/html/unnamed-chunk-3_8e7a605fbdaa915ecd789e4c600715cb'}\n\n```{.r .cell-code}\nyoutube_videos <- read_html(\"https://en.wikipedia.org/wiki/List_of_most-viewed_YouTube_videos\") %>%\n  html_element(\".wikitable\") %>%\n  html_table() \n\nyoutube_videos\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 31 × 6\n   `Video name`                    Uploader `Views (billions)` Date  Notes ``   \n   <chr>                           <chr>    <chr>              <chr> <chr> <chr>\n 1 Baby Shark Dance[7]             Pinkfon… 15.59              June… \"[A]\" <NA> \n 2 Despacito[10]                   Luis Fo… 8.65               Janu… \"[B]\" <NA> \n 3 Wheels on the Bus[18]           Cocomel… 7.10               May … \"\"    <NA> \n 4 Johny Johny Yes Papa[19]        LooLoo … 7.01               Octo… \"\"    <NA> \n 5 Bath Song[20]                   Cocomel… 7.00               May … \"\"    <NA> \n 6 See You Again[21]               Wiz Kha… 6.56               Apri… \"[C]\" <NA> \n 7 Shape of You[26]                Ed Shee… 6.41               Janu… \"[D]\" <NA> \n 8 Phonics Song with Two Words[29] ChuChu … 6.28               Marc… \"\"    <NA> \n 9 Uptown Funk[30]                 Mark Ro… 5.48               Nove… \"\"    <NA> \n10 Gangnam Style[31]               Psy      5.46               July… \"[E]\" <NA> \n# ℹ 21 more rows\n```\n:::\n:::\n\n\n\n- We could have used `html_element(\"table\")`\nIf we did this, it would have pulled the first `<table>` from the page. \n\n- We could have used `html_elements(\"table\")`\nIf we did this, it would have pulled all the `<table>` elements from the page. \n\n- If you want a specific table that isn't the first table, scrape all the tables and apply `html_table()`. Then take that new object of the tables and add `[[n]]` to get the $n^{th}$ table. For example to call the $2^{nd}$ table, \n\n```{}\ntables <- html %>% \n  html_elements(\"table\") %>%\n  html_table() \n  \ntables[[2]]\n```\n\n- In this case, we used `html_elements(\".wikitable\")`\nI choose to use this because the `<table>` was also defined with a unique `class`: `<table class=\"wikitable sortable\">`\n\n:::callout-warning\nNote that if we are using `html_element` to call a class, it is important to add a \"`.`\" before the class element name. You do not need to do this is you are calling an HTML element (like \"table\")\n:::\n\n## Cleaning up with `janitor`\n\nWeb scraping doesn't always format perfectly. Let's clean it up!  \n\n\n::: {.cell hash='118_O_Webscraping_Tables_Notes_cache/html/unnamed-chunk-4_f9cb0d05852b55f0d3faca6502f05b00'}\n\n```{.r .cell-code}\nlibrary(janitor)\n```\n:::\n\n\n![Artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/79a12c01-0cc1-4643-b1e7-8ce8cafc947b_rw_1920.png?h=a3760f3882e735d7065627fc060714ce){width=50%}\n\nClean up the names of the header: \n\n::: {.cell hash='118_O_Webscraping_Tables_Notes_cache/html/unnamed-chunk-5_b25c05fbec671e8496502869265ec937'}\n\n```{.r .cell-code}\nyoutube_videos <- clean_names(youtube_videos)\n```\n:::\n\n\nRemove the last row:\n\n::: {.cell hash='118_O_Webscraping_Tables_Notes_cache/html/unnamed-chunk-6_78bea66c8d7b500546dc7fa2143fa1c6'}\n\n```{.r .cell-code}\n# youtube_videos <- youtube_videos %>% \n#   filter(no != \"As of August 8, 2023\")\n```\n:::\n\n\nFormat the views as a number using `as.numeric`:\n\n::: {.cell hash='118_O_Webscraping_Tables_Notes_cache/html/unnamed-chunk-7_fd8f28c1416a1250c885027a13de89a4'}\n\n```{.r .cell-code}\nyoutube_videos <- youtube_videos %>% \n  mutate(views_billions = as.numeric(views_billions))\n```\n:::\n\n\n\n\nWhat are the top 10 most viewed YouTube Videos? \n\n\n::: {.cell hash='118_O_Webscraping_Tables_Notes_cache/html/unnamed-chunk-8_92f64c44eb0cf3d28f2ab32ece5880be'}\n\n```{.r .cell-code}\ntop10 <- youtube_videos %>%\n  arrange(desc(views_billions)) %>%\n  slice(1:10)\n\ntop10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 6\n   video_name                      uploader     views_billions date  notes x    \n   <chr>                           <chr>                 <dbl> <chr> <chr> <chr>\n 1 Baby Shark Dance[7]             Pinkfong Ba…          15.6  June… \"[A]\" <NA> \n 2 Despacito[10]                   Luis Fonsi             8.65 Janu… \"[B]\" <NA> \n 3 Wheels on the Bus[18]           Cocomelon -…           7.1  May … \"\"    <NA> \n 4 Johny Johny Yes Papa[19]        LooLoo Kids…           7.01 Octo… \"\"    <NA> \n 5 Bath Song[20]                   Cocomelon -…           7    May … \"\"    <NA> \n 6 See You Again[21]               Wiz Khalifa            6.56 Apri… \"[C]\" <NA> \n 7 Shape of You[26]                Ed Sheeran             6.41 Janu… \"[D]\" <NA> \n 8 Phonics Song with Two Words[29] ChuChu TV N…           6.28 Marc… \"\"    <NA> \n 9 Uptown Funk[30]                 Mark Ronson            5.48 Nove… \"\"    <NA> \n10 Gangnam Style[31]               Psy                    5.46 July… \"[E]\" <NA> \n```\n:::\n:::\n\n\nOnce we have this data, we can make cool plots!\n\n\n::: {.cell hash='118_O_Webscraping_Tables_Notes_cache/html/unnamed-chunk-9_d5ef8b659dd79c4e3c26b9b13150ed05'}\n\n```{.r .cell-code}\ntop10 %>% \n  ggplot( aes(x=views_billions, y=reorder(video_name, views_billions))) +\n    geom_bar(stat=\"identity\") +\n    xlab(\"Views (in billions)\") +\n    ylab(\"Videos\") +\n    ggtitle(\"Top 10 Most Watched YouTube Videos of All Time\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](118_O_Webscraping_Tables_Notes_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n:::callout-tip\nIn this case, the list of the names is still not displaying very neatly. For example, rather than `\"Baby Shark Dance\"[6]` I might want it to just say `Baby Shark Dance`. \n\nWe can use the `stringr` package to remove symbols and numbers from the video names. We will be talking more about `stringr` later this semester and it's not something I expect you to be able to do at this point in the semester. \n\n\n::: {.cell hash='118_O_Webscraping_Tables_Notes_cache/html/unnamed-chunk-10_0efded12c70cb062b6bf04397f61befa'}\n\n```{.r .cell-code}\nlibrary(stringr)\n\ntop10 %>% \n  mutate(video_name=str_replace_all(video_name, \"[^[:alpha:]]\", \" \")) %>% \n  ggplot(aes(x=views_billions, y=reorder(video_name, views_billions))) +\n    geom_bar(stat=\"identity\") +\n    xlab(\"Views (in billions)\") +\n    ylab(\"Videos\") +\n    ggtitle(\"Top 10 Most Watched YouTube Videos of All Time\") +\n    theme_minimal()\n```\n\n::: {.cell-output-display}\n![](118_O_Webscraping_Tables_Notes_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n:::callout\n# External Resources\n\n- [R for Data Science, Webscraping](https://r4ds.hadley.nz/webscraping)\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}