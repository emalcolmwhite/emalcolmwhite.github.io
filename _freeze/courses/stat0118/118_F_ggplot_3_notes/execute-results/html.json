{
  "hash": "966aa1e7f54c06939bb1f81a0d3bb0db",
  "result": {
    "markdown": "---\ntitle: 'Customizing Plots'\nsubtitle: '`scales`, labels, `facet_wrap()`'\nauthor: 'Emily Malcolm-White'\nformat:\n  html: \n    toc: TRUE\n    code-overflow: wrap\n    embed-resources: true\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\n    code-annotations: hover\n  pdf: default\nexecute: \n  message: FALSE\n  warning: FALSE\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Import the can_lang dataset \ncan_lang <- read.csv(\"https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv\")\n```\n:::\n\n\n\n# A starting graph: scatterplot of `can_lang`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncan_lang_plot <- ggplot(can_lang, aes(x=most_at_home, y=mother_tongue)) +\n  geom_point() + \n  xlab(\"Language spoken most at home \\n (number of Canadian residents)\") +\n  ylab(\"Mother tongue \\n (number of Canadian residents)\") \n```\n:::\n\n\nNotice anything weird about this plot? \n\n\n# Axis display format: `scales` package\n\n\n::: {.cell}\n\n```{.r .cell-code}\n # Install the package if needed\nlibrary(scales)\n```\n:::\n\n\nWe want to customize how the continuous x and y axes look, so we need to use the argument `labels=label_comma()` inside a `scale_*_continuous()` layer: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncan_lang_plot \n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_notes_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n:::{.callout-note}\n# What other formats are available in the `scales` package?\n\nWhen passing a formatting function inside `scale_*_continuous(labels = ...)` you have options! \n\n| Function           | Use Case                              | Example Input  | Example Output  |\n|-------------------|---------------------------------|---------------|----------------|\n| `label_comma()`  | Formats numbers with commas    | `1234567`     | `\"1,234,567\"`  |\n| `label_dollar()` | Formats numbers as dollar currency   | `99.99`       | `\"$99.99\"`     |\n| `label_dollar(prefix = \"â‚¬\")` | Formats numbers as euro currency   | `99.99`       | `\"99.99â‚¬\"`     \n| `label_percent()` | Converts decimals to percent | `0.25`        | `\"25%\"`        |\n| `label_pvalue()` | Formats p-values              | `0.00005`     | `\"<0.0001\"`    |\n\n:::\n\n\nAnything else? \n\n## Logarithmic Axes Transformations\n\n:::{.callout-note}\n#  Applying a Log Transformation\n\nWhen you apply a log transformation to an axis (or both axes) in a plot, you convert values using a logarithmic scale instead of a linear scale. This means:\n\n- Instead of evenly spaced values (1, 2, 3, 4, ...), a logarithmic scale spaces values exponentially (1, 10, 100, 1000, ...).\n- The distance between ticks represents a multiplicative factor instead of an additive one.\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](118_F_ggplot_3_notes_files/figure-html/unnamed-chunk-6-1.png){width=1152}\n:::\n:::\n\n\nSee how much more clearly we can see all the points! \n\n:::\n\nFor you to do this yourself, you need to use `scale_*_log10()` instead of `scale_*_continuous()`: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncan_lang_plot \n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_notes_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n1. converts x-axis to a log-scale\n2. converts y-axis to a log-scale\n\n:::{.callout-tip}\n# Use âœ… `scale_*_log10()` instead of ðŸš«`log(variable)`\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](118_F_ggplot_3_notes_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n:::\n\n\n## Using percents on a log scale\n\n### `mutate` to create new columns with percentage of Canadians who speak the language as their mother tongue: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncan_lang <- can_lang %>%\n  mutate(\n    mother_tongue_percent = (mother_tongue / 35151728) * 100,\n    most_at_home_percent = (most_at_home / 35151728) * 100\n  )\n```\n:::\n\n\n### Scatterplot with Percents and Colors\n\nCreate a scatterplot with `most_at_home_percent` and `mother_tongue_percent`. Vary the color and shape of the points depending on the category of language. You may need to adjust the position of the legend: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncan_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home,  \n                     y = mother_tongue )) +  \n  geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>\n  xlab(\"Language spoken most at home \\n (percentage of Canadian residents)\") +\n  ylab(\"Mother tongue \\n (percentage of Canadian residents)\") +\n  theme(legend.position = \"top\", legend.direction = \"vertical\") + #<4>\n  scale_x_log10(labels = comma) +\n  scale_y_log10(labels = comma)\n\ncan_lang_percent_plot \n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_notes_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\n# Labels\n\nAdding text to a plot is one of the most common forms of annotation. Most plots will not benefit from adding text to every single observation on the plot, but labeling outliers and other important points is very useful. \n\nA add label for each language in this dataset using `geom_text(aes(label = language))`: \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncan_lang_percent_plot  \n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_notes_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nYikes! This is way too much going on in one plot. A few options to try when this happens: \n\n- Decrease the font size of the labels (using the `size=` argument inside `geom_text`).\n- Use the `ggrepel` package to spread out the labels a bit more \n- Pick out only a subset of the points to label\n\n## Using `ggrepel`\n\n![Artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/874dedf0-55d1-4cdd-a390-45b8376d2fc2_rw_1920.png?h=39c69f525af3256f7096f510bafb0913){width=50%}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggrepel)\n\ncan_lang_percent_plot \n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_notes_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## Subset the labels\n\nCreate a new column for the labels. Use `case_when` (or `ifelse`) to only use the official language names and not to put a label for other language categories. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncan_lang <- can_lang %>% \n  mutate(official_languages = case_when(category == \"Official languages\" ~ language, TRUE ~ NA ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# We need to redo the base plot with the new can_lang dataset with the new official_languages column in it \ncan_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,  y = mother_tongue_percent)) + #<2> \n  geom_point(aes(color = category, shape=category)) +\n  xlab(\"Language spoken most at home \\n (percentage of Canadian residents)\") +\n  ylab(\"Mother tongue \\n (percentage of Canadian residents)\") +\n  theme(legend.position = \"top\", legend.direction = \"vertical\") + \n  scale_x_log10(labels = comma) +\n  scale_y_log10(labels = comma)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncan_lang_percent_plot \n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_notes_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n# Facet Wrap\n\n`facet_wrap()` is a function in the `ggplot2` package that allows you to create a multi-panel plot showing a similar plot over different subsets of the data, usually different values of a categorical variable. \n\nCreate separate side-by-side plots for each different category of language. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncan_lang_percent_plot  \n```\n\n::: {.cell-output-display}\n![](118_F_ggplot_3_notes_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "118_F_ggplot_3_notes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}