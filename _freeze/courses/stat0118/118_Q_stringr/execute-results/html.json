{
  "hash": "5cf4f96ffdd9311ade5b597874ca1147",
  "result": {
    "markdown": "---\ntitle: 'Working with text using `stringr`'\nauthor: 'Violet Ross and Emily Malcolm-White'\nformat:\n  html: \n    toc: TRUE\n    code-overflow: wrap\n    embed-resources: true\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\n    code-annotations: hover\n  pdf: default\nexecute: \n  message: FALSE\n  warning: FALSE\n---\n\n\n\n![](https://stringr.tidyverse.org/logo.png){width=30%}\n\n![artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/6bbcc35c-1863-49df-8204-d981303d8cd3_rw_1200.png?h=96d11e5bed7cfe2474d27a99980d0881){width=50%}\n\n\n# A few basics\n\n**What is a string?**\n\n- datatype we use to represent text\n- use \" \" \n\n**Examples of strings:**\n\n- \"Hello world\" \n- \"5678\"\n- \"blah blah blah\"\n\n** NOT a string:**\n\n- 5678\n\n# Using `stringr`\n\n[`stringr`](https://stringr.tidyverse.org/) is a package containing a bunch of functions that help us work with strings. We'll discuss how to detect, remove, extract, and count words/characters/phrases from a string. We'll also talk about how to slice a string to get only the parts (aka the substrings) of it that you want.\n  \n[**`stringr` cheat sheet**](https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf)\n\n`stringr` is contained within the `tidyverse` package. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n**I'm registering for classes this Spring and am trying to decide what to take.**\nLet's look at the course catalog!\n\nRead in the courses data.\n\n::: {.cell}\n\n```{.r .cell-code}\ncourses <- read_csv(\"data/Fall23courses.csv\")\n```\n:::\n\n    \n## `str_detect` \n\n![artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/813129dc-25e9-4ea3-9d03-262401faefba_rw_1200.png?h=e33a9402181e738d792b78e04cf4a6bc)\n  \n**inputs**: - string\n            - pattern\n            \n**output**: - TRUE/FALSE\n\nlittle example:\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(\"Welcome to data science, look at this cool data\", \"data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_detect(\"Welcome to data science, look at this cool data\", \"pineapple\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\nI only want to take classes in Warner! \n\n::: {.cell}\n\n```{.r .cell-code}\ncourses %>% \n  filter(str_detect(location, \"WNS\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 45 × 9\n   titles      distros department time  location professor description courseNum\n   <chr>       <chr>   <chr>      <chr> <chr>    <chr>     <chr>       <chr>    \n 1 Gothic and… AMR HI… Program i… 2:15… \"Warner… Michael … \"\\nThis co… AMST0225…\n 2 Education … AMR SOC Program i… 2:15… \"Warner… Melissa … \"\\nWhat ar… BLST0115…\n 3 Economic S… DED     Economics  2:15… \"Warner… Amanda G… \"\\nAn intr… ECON0111…\n 4 Introducto… SOC     Economics  9:45… \"Warner… Raphaell… \"\\nAn intr… ECON0150…\n 5 Introducto… SOC     Economics  11:1… \"Warner… Raphaell… \"\\nAn intr… ECON0150…\n 6 Introducto… SOC     Economics  8:15… \"Warner… Will Pyle \"\\nAn intr… ECON0155…\n 7 Introducto… SOC     Economics  9:45… \"Warner… Will Pyle \"\\nAn intr… ECON0155…\n 8 Microecono… <NA>    Economics  12:4… \"Warner… <NA>      \"\\nMicroec… ECON0255…\n 9 Microecono… <NA>    Economics  2:15… \"Warner… <NA>      \"\\nMicroec… ECON0255…\n10 Federal Re… AMR DED Economics  1:30… \"Warner… Erin Wol… \"\\nIn this… ECON0360…\n# ℹ 35 more rows\n# ℹ 1 more variable: meet <chr>\n```\n:::\n:::\n\n  \n  \nSuppose I don't want any classes on Friday. Let's use `str_detect` to find our options.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnotFriday <- courses %>% \n  filter(!str_detect(meet, \"Friday\"))\n```\n:::\n\n\n\nPerhaps I'm interested in immigration.  \n  \nThe `regex` function is used to write regular expressions in R. Regular expressions are helpful if you want to search for a pattern rather than a specific word or phrase.  \n\nFor now, we will only use regex to ignore capitalization.\n\nIf you're interested in using regular expressions at some point, this [regex cheat sheet](https://cheatography.com/davechild/cheat-sheets/regular-expressions/) will be super helpful.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimmigrationclasses <- courses %>% \n  filter(str_detect(description, regex(\"immigration\", ignore_case=TRUE)))\n\nimmigrationclasses\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 9\n   titles      distros department time  location professor description courseNum\n   <chr>       <chr>   <chr>      <chr> <chr>    <chr>     <chr>       <chr>    \n 1 Immigrant … AMR HIS Program i… 11:1… \"Axinn … Rachael … \"\\nIn this… AMST0175…\n 2 Introducti… EUR LN… French     2:15… \"Le Cha… William … \"\\nIn this… FREN0230…\n 3 Introducti… CW EUR… French     2:15… \"Le Cha… William … \"\\nIn this… FREN0230…\n 4 The United… AMR HIS History    9:45… \"Axinn … Joyce Mao \"\\nThis co… HIST0206…\n 5 Introducti… CMP     Internati… 12:4… \"Twilig… Amit Pra… \"\\nThis is… IGST0101…\n 6 An Introdu… EUR LN… Italian    9:45… \"Wright… Thomas V… \"\\nIntende… ITAL0251…\n 7 An Introdu… EUR LN… Italian    11:1… \"75 Sha… Sandra C… \"\\nIntende… ITAL0251…\n 8 Globalizat… SOC     Political… 2:15… \"Librar… Orion Le… \"\\nHow doe… PSCI0314…\n 9 City Polit… <NA>    Political… 11:1… \"LaForc… Bert Joh… \"\\nCities … PSCI0465…\n10 Christiani… AMR HI… Religion   7:30… \"Librar… James Ca… \"\\nReligio… RELI0398…\n# ℹ 1 more variable: meet <chr>\n```\n:::\n:::\n\n  \n## `str_extract` and `str_remove`\n  \n**str_extract inputs**: - string\n                        - pattern\n**str_extract output**: - the extracted pattern, if it appears in the the string\n\n**str_remove inputs**:  - string\n                        - pattern\n**str_extract output**:  - the string without the pattern, if it appears in the string\n\nlittle example:\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_extract(\"Welcome to data science, look at this cool data\", \"data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data\"\n```\n:::\n\n```{.r .cell-code}\nstr_extract_all(\"Welcome to data science, look at this cool data\", \"data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"data\" \"data\"\n```\n:::\n\n```{.r .cell-code}\nstr_remove(\"Welcome to data science, look at this cool data\", \"data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Welcome to  science, look at this cool data\"\n```\n:::\n\n```{.r .cell-code}\nstr_remove_all(\"Welcome to data science, look at this cool data\", \"data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Welcome to  science, look at this cool \"\n```\n:::\n:::\n\n  \n  \n  \nCW is part of the distribution requirement column. I want CW to be its own column.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncourses %>% \n  mutate(CW = str_extract(distros, \"CW\")) %>% \n  mutate(distros = str_remove(distros, \"CW\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 586 × 10\n   titles      distros department time  location professor description courseNum\n   <chr>       <chr>   <chr>      <chr> <chr>    <chr>     <chr>       <chr>    \n 1 Introducti… AMR CMP Program i… 12:4… \"Axinn … Roberto … \"\\nIn this… AMST0101…\n 2 Immigrant … AMR HIS Program i… 11:1… \"Axinn … Rachael … \"\\nIn this… AMST0175…\n 3 American L… AMR LIT Program i… 11:1… \"Axinn … Ellery F… \"\\nA study… AMST0209…\n 4 Introducti… AMR HI… Program i… 1:30… \"Twilig… Roberto … \"\\nIn this… AMST0213…\n 5 Gothic and… AMR HI… Program i… 2:15… \"Warner… Michael … \"\\nThis co… AMST0225…\n 6 American C… AMR HIS Program i… 9:45… \"Axinn … Holly Al… \"\\nFor man… AMST0234…\n 7 Constructi… AMR ART Program i… 1:30… \"Ross C… Deb Evans \"\\n“Democr… AMST0251…\n 8 African Am… AMR LIT Program i… 9:45… \"Axinn … William … \"\\nThis co… AMST0252…\n 9 American D… AMR HI… Program i… 11:1… \"Axinn … Susan Bu… \"\\nIn this… AMST0260…\n10 Chicagoland AMR HIS Program i… 11:1… \"Giffor… Jim Ralp… \"\\nIn this… AMST0264…\n# ℹ 576 more rows\n# ℹ 2 more variables: meet <chr>, CW <chr>\n```\n:::\n:::\n\n  \n  \n  \n## `str_sub`\n  \n  \n**str_sub inputs**: - string   \n                    - starting character \n                    - ending character\n**str_sub output**: - string with only the characters between the start and the end   \n  \nlittle example:\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_sub(\"Welcome to data science, look at this cool data\", start=12, end=23) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data science\"\n```\n:::\n:::\n\n  \n:::notes-tip\nBounds are inclusive!\n:::\n\nMaybe I only want 200 level math classes.  \n\n- First we filter for just math classes. \n- Then we can create a new column called `level` that contains only the sixth character from the `courses` column.  \n\nWe call this a **substring**, hence the function `str_sub`.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMathClasses <- courses %>% \n  filter(department == \"Mathematics\") %>% \n  mutate(level=str_sub(courseNum, start=6, end=6)) \n\nMath2Classes <- MathClasses %>% \n  filter(level== \"2\")\n```\n:::\n\n  \n  \n## `str_count`\n\n**str_count inputs**: - string  \n                      - pattern\n**str_count output**: - a count of the number of times the pattern appears in the string\n  \n  \nlittle example:\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_count(\"Welcome to data science, look at this cool data\", \"data\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n \n\nMaybe I only want my classes to meet twice a week.\n\n::: {.cell}\n\n```{.r .cell-code}\ncourses <- courses %>% \n  mutate(dayCount = str_count(meet, \"day\"))\n\n#what's the maximum number of days a week a class meets?\nmax(courses$dayCount)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n#what's the mean number of days?\nmean(courses$dayCount)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.187713\n```\n:::\n:::\n\n\nLet's visualize this data.\n\n::: {.cell}\n\n```{.r .cell-code}\ncourses %>% \n  ggplot() + \n  geom_bar(aes(x=dayCount), fill=\"blue\") + \n  xlab(\"Number of Days Class Meets\") + \n  ylab(\"Number of Classes\") + \n  labs(title=\"How many Days a Week do Classes at Middlebury Meet?\")+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](118_Q_stringr_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n# Another useful function `str_squish`\n\n`str_squish` is used to remove leading, trailing, and repeated interior whitespaces from strings\n\n![artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/0e4df3af-8bca-4f5e-9945-a3859d56c534_rw_1200.png?h=cbb57087ad1e3e69fdb572d10f26f8e2)\n",
    "supporting": [
      "118_Q_stringr_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}