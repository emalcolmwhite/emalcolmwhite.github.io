{
  "hash": "9b0ddf9b027f0d9af537372e6fd6d2d9",
  "result": {
    "markdown": "---\ntitle: 'Webscraping Text with `rvest`'\nauthor: 'Emily Malcolm-White'\ninstitute: 'Middlebury College'\nformat:\n  html: \n    toc: TRUE\n    code-overflow: wrap\n    embed-resources: true\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\n    code-annotations: hover\nexecute: \n  message: FALSE\n  warning: FALSE\n---\n\n\n![](https://rvest.tidyverse.org/logo.png){width=30%}\n\n\n::: {.cell hash='118_P_Webscraping_Text_Notes_cache/html/unnamed-chunk-1_bf476969432aaa5f708dab5b339a77ff'}\n\n```{.r .cell-code}\n#LOAD PACKAGES \nlibrary(tidyverse)\nlibrary(rvest)\n```\n:::\n\n\n# Webscraping Text\n\nLet's look at the [top 50 feature films in the first 7 months of 2023 listed on IMBD](https://www.imdb.com/search/title/?title_type=feature&year=2023-01-01,2023-07-31)\n\n\n::: {.cell hash='118_P_Webscraping_Text_Notes_cache/html/unnamed-chunk-2_43e6e952464a93f27ed8462c8c943334'}\n\n```{.r .cell-code}\nURL <- read_html(\"https://www.imdb.com/search/title/?title_type=feature&year=2023-01-01,2023-07-31\")\n```\n:::\n\n\n\nNotice that the data for all these films isn't housed inside a `<table>` element! \n\n## Titles\n\nFor example, check out the first few lines of html code for Oppenheimer: \n\n```{}\n<h3 class=\"lister-item-header\">\n        <span class=\"lister-item-index unbold text-primary\">1.</span>\n    <a href=\"/title/tt15398776/?ref_=adv_li_tt\"\n>Oppenheimer</a>\n    <span class=\"lister-item-year text-muted unbold\">(2023)</span>\n</h3>\n```\n\n\nIn this case, we want to look for the class `lister-item-header` AND then pull the text inside the `<a>` (link) tag.\n\n`html_elements(\".lister-item-header a\")`\n\n:::callout-tip\nIn this case, we want ALL titles so we used `html_elements()`. If we had only wanted the first title we would have used `html_element()`\n:::\n\nScrape IMBD for the titles of the 50 most popular feature films in the first 7 months of 2023. \n\n\n::: {.cell hash='118_P_Webscraping_Text_Notes_cache/html/unnamed-chunk-3_c1ede498c22982057ca577c300bad9ca'}\n\n```{.r .cell-code}\n# title_data <- URL %>%\n#   html_elements(\".lister-item-header a\") %>%\n#   html_text()\n# \n# title_data\n```\n:::\n\n\n## Runtime\n\nScrape IMBD for the runtime of the 50 most popular feature films so far in 2023.\n\nCheck out the relevant HTML code for Oppenheimer: \n```{}\n    <p class=\"text-muted \">\n            <span class=\"certificate\">R</span>\n                 <span class=\"ghost\">|</span> \n                 <span class=\"runtime\">180 min</span>\n                 <span class=\"ghost\">|</span> \n            <span class=\"genre\">\nBiography, Drama, History            </span>\n    </p>\n```\n\nIn this case, we need to reference the class `text-muted` AND the class `runtime`. \n\n\n::: {.cell hash='118_P_Webscraping_Text_Notes_cache/html/unnamed-chunk-4_c3638f9fa99fd75366b27c3fd7188d57'}\n\n```{.r .cell-code}\n# URL %>%\n#   html_nodes(\".text-muted .runtime\") %>%\n#   html_text() \n```\n:::\n\nAlternatively, we could have called class `text-muted` AND the 3rd span, but it's easier and likely more accurate to ask for the class `runtime` in case `runtime` is missing for some reason. \n\nMaybe we want to keep the `min` on the end, but it forces it into being a stringr rather than a number which makes it difficult to sort or filter. \n\n\n::: {.cell hash='118_P_Webscraping_Text_Notes_cache/html/unnamed-chunk-5_7f083d5e3fff0da77a2a7088d992161a'}\n\n```{.r .cell-code}\nlibrary(readr)\n# need this package for parse_number()\n```\n:::\n\n\n![Artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/4fd04f07-7404-4371-832c-c04ff9a6e069_rw_1920.png?h=2bd0f0330dc94ccbbb49766ed7f80b8b){width=50%}\n\n\n::: {.cell hash='118_P_Webscraping_Text_Notes_cache/html/unnamed-chunk-6_1dbb43e0e459c314c703c6c8409ade69'}\n\n```{.r .cell-code}\n# runtime_data <- URL %>%\n#   html_nodes(\".text-muted .runtime\") %>%\n#   html_text() %>%\n#   parse_number() %>% #this picks out only the numbers (and drops characters, in this case, \"mins\")\n#   as.numeric()\n# \n# runtime_data\n```\n:::\n\n\n## Ratings\n\nScrape IMBD for the ratings of the 50 most popular feature films in the first 7 months of 2023. \n\nCheck out the relevant HTML code for Oppenheimer: \n\n```{}\n    <div class=\"inline-block ratings-imdb-rating\" name=\"ir\" data-value=\"8.6\">\n        <span class=\"global-sprite rating-star imdb-rating\"></span>\n        <strong>8.6</strong>\n    </div>\n```\n\nLet's scrape it! \n\n::: {.cell hash='118_P_Webscraping_Text_Notes_cache/html/unnamed-chunk-7_22f31322674b5ba0a4b832a0ab193078'}\n\n```{.r .cell-code}\n# rating_data <- URL %>%\n#   html_elements(\".ratings-imdb-rating strong\") %>%\n#   html_text() %>%\n#   as.numeric()\n# \n# rating_data\n```\n:::\n\n\n:::callout-warning\nNotice that there are only 49 ratings listed, not 50! \nThere is no way to figure out which one is missing besides doing it by hand...\n\nWhich one is it? \n\nOnce we figure out which one is it is, we should should add a blank element for the rating for that movie using the `append` function.\n\n`rating_data <- append(rating_data, values=FALSE, after=11)`\n:::\n\nIt's Killers of the Flower Moon (#32)! \n\n\n::: {.cell hash='118_P_Webscraping_Text_Notes_cache/html/unnamed-chunk-8_352cd2f66f375393f2131b0f16c7ebec'}\n\n```{.r .cell-code}\n#rating_data <- append(rating_data, values=NA, after=31)\n```\n:::\n\n\nNotice how it is the correct length (50) now! \n\n## Number of Votes\n\nScrape IMBD for the number of votes of the 50 most popular feature films in the first 7 months of 2023. \n\nRelevant code for Oppenheimer: \n```{}\n        <p class=\"sort-num_votes-visible\">\n                <span class=\"text-muted\">Votes:</span>\n                <span name=\"nv\" data-value=\"391689\">391,689</span>\n        </p>\n```\n\nLet's scrape it! \n\n::: {.cell hash='118_P_Webscraping_Text_Notes_cache/html/unnamed-chunk-9_20f4d16c70b38bed894a46806be4a5ed'}\n\n```{.r .cell-code}\n# votes_data <- URL %>%\n#   html_elements(\".sort-num_votes-visible span:nth-child(2)\") %>%\n#   html_text() %>%\n#   parse_number() %>%\n#   as.numeric()\n# \n# votes_data\n```\n:::\n\n:::callout-warning\nSame issue as before! We were supposed to have 50 but only got 49. \nIt's Killers of the Flower Moon (#32), again! \n\n\n::: {.cell hash='118_P_Webscraping_Text_Notes_cache/html/unnamed-chunk-10_ccee46c7f860430ddb53055013626bce'}\n\n```{.r .cell-code}\n#votes_data <- append(votes_data, values=NA, after=31)\n```\n:::\n\n:::\n\n## Metascore\n\nScrape IMBD for the number of votes of the 50 most popular feature films in the first 7 months of 2023. \n\nRelevant code for Oppenheimer: \n```{}\n            <div class=\"inline-block ratings-metascore\">\n<span class=\"metascore  favorable\">88        </span>\n        Metascore\n            </div>\n```\n\nLet's scrape it! \n\n::: {.cell hash='118_P_Webscraping_Text_Notes_cache/html/unnamed-chunk-11_ee50a7de5bc49382fe1ced98470cba57'}\n\n```{.r .cell-code}\n# metascore_data <- URL %>%\n#   html_elements(\".metascore\") %>%\n#   html_text() %>%\n#   parse_number() %>%\n#   as.numeric()\n# \n# metascore_data\n```\n:::\n\n\n:::callout-warning\nYikes! Now we only have 41 when we should have 50. \n\nWe *could* manually go through and figure out which 9 are missing or we could reassess how important the metascore data is to us... \n:::\n\n# Combining it all together into a data frame! \n\nWe can combine all this data into one data frame: \n\n\n::: {.cell hash='118_P_Webscraping_Text_Notes_cache/html/unnamed-chunk-12_628daa1cbcf5a1ab7db1ef50baf4d43e'}\n\n```{.r .cell-code}\n# movies <- data.frame(Title = title_data,\n# Runtime = runtime_data,\n# Rating = rating_data,\n# Votes = votes_data\n# )\n# \n# movies\n```\n:::\n\n\nMake a list OR Make a plot! \n\n\n::: {.cell hash='118_P_Webscraping_Text_Notes_cache/html/unnamed-chunk-13_560d60215a5288d0d9f1db3bd8068aaa'}\n\n```{.r .cell-code}\n# ggplot(movies, aes(x=runtime_data, y=rating_data)) +\n#   geom_point() +\n#   theme_minimal() + \n#   xlab(\"Runtime (in minutes)\") +\n#   ylab(\"IMDB Rating\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}