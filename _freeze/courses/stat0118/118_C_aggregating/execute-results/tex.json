{
  "hash": "411669e28254285799b17f207c908ea9",
  "result": {
    "markdown": "---\ntitle: 'Aggregating'\nauthor: 'Emily Malcolm-White'\nformat:\n  html: \n    toc: TRUE\n    code-overflow: wrap\n    embed-resources: true\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\n    code-annotations: hover\n  pdf: default\nexecute: \n  message: FALSE\n  warning: FALSE\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#LOAD PACKAGES \nlibrary(tidyverse)\n```\n:::\n\n\n\n# `palmerpenguins` dataset ![](https://allisonhorst.github.io/palmerpenguins/logo.png){width=10%}\n\nSize measurements, clutch observations, and blood isotope ratios for adult foraging Ad√©lie, Chinstrap, and Gentoo penguins observed on islands in the Palmer Archipelago near Palmer Station, Antarctica. Data were collected and made available by Dr. Kristen Gorman and the Palmer Station Long Term Ecological Research (LTER) Program.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#LOAD DATA \nlibrary(palmerpenguins) #<1>\ndata(penguins)          #<2>\n```\n:::\n\n\n\n1. Load the `palmerpenguins` package\n2. Display the penguins dataset in the environment\n\n# Remove rows with missing data with drop_na()\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins <- penguins %>%    #<2>\n  drop_na()                 #<1>\n```\n:::\n\n\n\n1. Drops all the rows in the penguins dataset which has missing data (NA values)\n2. overwrite the penguins dataset with the penguins dataset without the missing rows\n\n::: callout-warning\nIs it appropriate to remove rows with missing data? How many rows have missing data? Do the missing rows have something in common?\n\nRemoving rows can affect the validity and generalizability of your analysis!\n:::\n\n\n# `count()`\n\n`count()` lets you quickly count the unique values of one or more variables. Suppose you want the number of penguins on each island.  \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n    count(island)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  island        n\n  <fct>     <int>\n1 Biscoe      163\n2 Dream       123\n3 Torgersen    47\n```\n:::\n:::\n\n\n\n\n# `summarize()` or `summarise()` (either works)\n\nSuppose we are interested in the average bill length of all Adelie penguins:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%                                            \n  filter(species == \"Adelie\") %>%                       #<1>\n  summarize(average_bill_length = mean(bill_length_mm))  #<2>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 1\n  average_bill_length\n                <dbl>\n1                38.8\n```\n:::\n:::\n\n\n1. only include the rows where the species is Adelie\n2. calculate the average bill length; save this as `average_bill_length`\n\nSuppose we are interested in the average bill length AND average bill depth of all Adelie penguins:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  filter(species == \"Adelie\") %>%\n  summarize(average_bill_lenth = mean(bill_length_mm),  #<1>\n            average_bill_depth = mean(bill_depth_mm))   #<2>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n  average_bill_lenth average_bill_depth\n               <dbl>              <dbl>\n1               38.8               18.3\n```\n:::\n:::\n\n\n1. calculate the average bill length; save this as `average_bill_length`\n2. calculate the average bill depth; save this as `average_bill_depth`\n\nTypically, we seperate each calculation with a new line to keep things pretty. These new values will print out on the same table. \n\nThere are lots of other functions available:\n\n-   `min`: minimum value\n-   `max`: maximum value\n-   `mean`: average or mean value\n-   `median`: median value\n-   `var`: variance\n-   `sd`: standard deviation\n-   `n`: count or number of values\n-   `n_distinct`: counts number of distinct values\n\nSuppose we are interested in the average bill length AND the median bill length of all Adelie penguins:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  filter(species == \"Adelie\") %>%\n  summarise(average_bill_lenth = mean(bill_length_mm), \n            median_bill_length = median(bill_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n  average_bill_lenth median_bill_length\n               <dbl>              <dbl>\n1               38.8               38.8\n```\n:::\n:::\n\n\n\n# `group_by()`\n\nLet's say we were interested in the average bill length and bill depth of all penguin species in this dataset. We could repeat this for the other species (Gentoo and Chinstrap). This would be a fair amount of work AND the results would not end up in the same table.\n\nOR we could use the `group_by` command!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  group_by(species) %>% #<1>\n  summarise(average_bill_lenth = mean(bill_length_mm), \n            average_bill_depth = mean(bill_depth_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 3\n  species   average_bill_lenth average_bill_depth\n  <fct>                  <dbl>              <dbl>\n1 Adelie                  38.8               18.3\n2 Chinstrap               48.8               18.4\n3 Gentoo                  47.6               15.0\n```\n:::\n:::\n\n\n\n1. Repeats the calculate below for each different species. \n\n## Multiple Groups\n\nSuppose we wish to have the average bill length and average bill depth broken down by sex AND species:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  group_by(species, sex) %>%\n  summarise(average_bill_length = mean(bill_length_mm), \n            average_bill_depth = mean(bill_depth_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 4\n# Groups:   species [3]\n  species   sex    average_bill_length average_bill_depth\n  <fct>     <fct>                <dbl>              <dbl>\n1 Adelie    female                37.3               17.6\n2 Adelie    male                  40.4               19.1\n3 Chinstrap female                46.6               17.6\n4 Chinstrap male                  51.1               19.3\n5 Gentoo    female                45.6               14.2\n6 Gentoo    male                  49.5               15.7\n```\n:::\n:::\n\n\n\n#  `across()` (Optional)\n\nIf you wish to apply the same calculation to many columns, you may wish to check out the `across` function.\n\n![Artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/2471e3f8-348e-470c-a162-3eea0606ff96_rw_1920.png?h=1caf8d5f3d25792fbaf296a1e62b670a){width=60%}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  group_by(species, sex) %>%\n  summarise(across(where(is.numeric), mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 7\n# Groups:   species [3]\n  species sex   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n  <fct>   <fct>          <dbl>         <dbl>             <dbl>       <dbl> <dbl>\n1 Adelie  fema~           37.3          17.6              188.       3369. 2008.\n2 Adelie  male            40.4          19.1              192.       4043. 2008.\n3 Chinst~ fema~           46.6          17.6              192.       3527. 2008.\n4 Chinst~ male            51.1          19.3              200.       3939. 2008.\n5 Gentoo  fema~           45.6          14.2              213.       4680. 2008.\n6 Gentoo  male            49.5          15.7              222.       5485. 2008.\n```\n:::\n:::\n\n\n\n#  Recall: `mutate()` \n\nThe mutate function allows you create a new column which is a function of other columns. This can be useful to converting units.\n\nFor example, let's calculate create a new column which displays the body length weight in pounds (lbs) instead of grams. Recall: to convert from grams to pounds we need to multiply by 0.00220462\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins <- penguins %>% \n  mutate(body_mass_lbs = body_mass_g*0.00220462) #<1>\n```\n:::\n\n\n\n1. Creates a new column in the penguins dataset called `body_mass_lbs` calculated by taking the value of the body mass (in g) and multiplying by 0.00220562. \n\n# `case_when()`\n\nCase when can be used in combination with `mutate` to create a new column with a categorical variable conditional on the values in another column.\n\n![Artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/6ffcd6d6-c783-4087-ae76-99aa851663ed_rw_1920.png?h=5f67935d69c92e1fda9074d00dfea972){width=60%}\n\nFor example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins <- penguins %>% \n  mutate(penguin_length_cat = case_when(bill_length_mm > 50 ~ 'whoa! huge bill!', TRUE ~ '--' ))\n```\n:::\n\n\n\n::: callout-tip\nFor those of you who have taken a computer science class before, you may notice that `case_when` is similar to using an `ifelse` statement. You can also use `ifelse` in R if you'd prefer!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins <- penguins %>% \n  mutate(penguin_length_cat = ifelse(bill_length_mm > 50, 'whoa! huge bill!', '--' ))\n```\n:::\n\n\n:::\n\n\n# Brain Break: Jingjing! \n[https://youtu.be/oks2R4LqWtE](https://youtu.be/oks2R4LqWtE)\n\n",
    "supporting": [
      "118_C_aggregating_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}