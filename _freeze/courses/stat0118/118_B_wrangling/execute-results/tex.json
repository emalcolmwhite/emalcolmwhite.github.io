{
  "hash": "878e7be123c3541c544324e24a87edb4",
  "result": {
    "markdown": "---\ntitle: '`filter()`, `select()`, `arrange()`, `slice()`, `mutate()`'\nauthor: 'Emily Malcolm-White'\nformat:\n  html: \n    toc: TRUE\n    toc-float: TRUE\n    code-overflow: wrap\n    embed-resources: true\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\n    code-annotations: hover\n  pdf: default\nexecute: \n  message: FALSE\n  warning: FALSE\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# Installing and Using Packages\n\nSometimes everything we need (data, functions, etc) are not available in base R. In R, expert users will package up useful things like data and functions into packages that be download and used.\n\nFirst, you need to download the package from the right hand menu --\\> You only need to do this once.\n\nIn each new .qmd document, you need to call any packages you want to use but adding the code `library(packagename)` inside an R chunk.\n\nFor example, in this class we will use the `tidyverse` package a lot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) #<1>\n```\n:::\n\n\n\n1. Loads the `tidyverse` package\n\nThere are actually many commonly used packages wrapped up inside one `tidyverse` package.\n\n![Credit: https://uopsych-r-bootcamp-2020.netlify.app/](images/tidyverse_packages.png)\n\n\nToday we are specifically going to be talking about the package `dplyr` which is useful to manipulating data sets.\n\n\n# `can_lang` dataset ![](https://github.com/ttimbers/canlang/blob/master/man/figures/hex-canlang.png?raw=true){width=10%}\n\nIn this class, we are going to be working with a dataset relating to the languages spoken at home by Canadian residents. Many Indigenous peoples exist in Canada with their own languages and cultures. Sadly, colonization has led to the loss of many of these languages. This data is a subset of data collected during the 2016 census. \n\n# Importing Data\n\n**What is a .csv file?** \n\n- It's plain text file that stores data \n- Each value is seperated by a comma (,) - hence the name \"*c*omma *s*eperated *v*alues\"\n- It's readable with tools like Excel, Good Sheets, R, and more. \n\n**How do we import it into R?**\nUse `read.csv()`! Note that your data file (`.csv`) needs to be saved in the same folder as your notes template document (`.qmd`).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncan_lang <- read.csv(\"data/can_lang.csv\") #<1>\n```\n:::\n\n\n\n1. Takes the `can_lang.csv` file (located in the same folder as your .qmd file), reads it into R, and saves it as the dataset `can_lang`\n\nAlternatively, you can download it directly from the internet. Github user `ttimbers` hosts this file to share with the public at the link: <https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncan_lang <- read.csv(\"https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv\") #<1>\n```\n:::\n\n\n\n1. Takes the dataset located at the given url, reads it into R, and saves it as the dataset `can_lang`\n\nLet's take a look at this data for a minute to see what information has been recorded. In the environment in the top left, if you click on the word `can_lang` (not the blue play button, the word itself) it will open the object so you can see what is saved inside. Alternatively you can use the `head()` function to display just the first few rows of the dataset. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(can_lang)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              category                     language mother_tongue most_at_home\n1 Aboriginal languages Aboriginal languages, n.o.s.           590          235\n  most_at_work lang_known\n1           30        665\n [ reached 'max' / getOption(\"max.print\") -- omitted 5 rows ]\n```\n:::\n:::\n\n\n\n# `filter()`\n\nWe can use the `filter` function to extract ***rows*** from the data that have a particular characteristic.\n\n![Artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/cb8d9c50-f48e-4c6d-a5b3-1d30ce0be2ad_rw_1920.png?h=1a879eda58a5efbf709ad0a59d784f98){width=80%}\n\nFor example, we may be interested in only looking at only the languages in this dataset that are Aboriginal languages.\n\nStart with the `can_lang` dataset, the pipe `%>%` means apply the action on the following line to the previous line.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncan_lang  %>%                                  #<1>\n  filter(category == \"Aboriginal languages\")   #<2>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              category                     language mother_tongue most_at_home\n1 Aboriginal languages Aboriginal languages, n.o.s.           590          235\n  most_at_work lang_known\n1           30        665\n [ reached 'max' / getOption(\"max.print\") -- omitted 66 rows ]\n```\n:::\n:::\n\n\n\n1. begin with the `can_lang` dataset\n2. only include the rows were the category variable is \"Aboriginal languages\"\n\nSome notes:\n\n-   the aboriginal languages is text/categorical and so quotation marks are needed.\n-   R doesn't care about whether they are double quotation marks (\") or single ('). They work the same.\n-   If we don't assign it to an object, then it just prints out for us to see!\n\nOftentimes, we want to take our subset and give it a new name. This takes our subset and assigns it to a new dataset called `aboriginal_lang`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naboriginal_lang <- can_lang  %>%             #<1> \n  filter(category == \"Aboriginal languages\")  \n```\n:::\n\n\n\n1. The code `aboriginal_lang <-` takes the given data (the Aboriginal languages in the `can_lang` dataset) and saves it as a new object called `aboriginal_lang`. \n\nNotes:\n\n-   Notice if you assign it to an object that it doesn't print out the contents.\n-   You'll see the new object in your environment on the top right ---\\>\n\n\nIt can also be used with numeric criteria.\n\nSuppose we want a list of all the languages in Canada that are spoken by less than 100 people as their mother tongue.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrare_lang <- can_lang  %>%        #<1>     \n  filter(mother_tongue < 100)     #<2>\n                                  #<3>\n```\n:::\n\n\n\n1. begin with the `can_lang` dataset\n2. only include the rows were the number of people who speak the language as their mother tongue is more than 100 people\n3. data saved to the object `rare_lang`\n\nThe logical operators are given below:\n\n| Operator | Description               |\n|----------|---------------------------|\n| `<`      | Less than                 |\n| `>`      | Greater than              |\n| `<=`     | Less than or equal to     |\n| `>=`     | Greater than or equal to  |\n| `==`     | Equal to                  |\n| `!=`     | Not equal to              |\n| `!x`     | Not x                     |\n| `x | y`  | x OR y                    |\n| `x & y`  | x AND y                   |\n\n\n# `select()`\n\n`select` is used to extract only certain ***columns***. For example, perhaps we only want to print out a list names of the aboriginal languages (language column).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naboriginal_lang %>%  #<1>\n  select(language)  #<2>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       language\n1  Aboriginal languages, n.o.s.\n2  Algonquian languages, n.i.e.\n3                     Algonquin\n4  Athabaskan languages, n.i.e.\n5                     Atikamekw\n6          Babine (Wetsuwet'en)\n7                        Beaver\n8                     Blackfoot\n9                       Carrier\n10                       Cayuga\n [ reached 'max' / getOption(\"max.print\") -- omitted 57 rows ]\n```\n:::\n:::\n\n\n\n1. Begin with the `aboriginal_lang` dataset\n2. only include the language column\n\nWe can combine criteria together as well in one command with multiple pipes:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncan_lang %>% \n  filter(category == \"Aboriginal languages\") %>% \n  select(language)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       language\n1  Aboriginal languages, n.o.s.\n2  Algonquian languages, n.i.e.\n3                     Algonquin\n4  Athabaskan languages, n.i.e.\n5                     Atikamekw\n6          Babine (Wetsuwet'en)\n7                        Beaver\n8                     Blackfoot\n9                       Carrier\n10                       Cayuga\n [ reached 'max' / getOption(\"max.print\") -- omitted 57 rows ]\n```\n:::\n:::\n\n\n\n# `arrange()`\n\nThe `arrange` function allows us to order the rows of the data frame by the values of a particular column.\n\nFor example, arrange all the aboriginal languages in canada by from most to least spoken as mother tongue.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naboriginal_lang %>% \n  arrange(desc(mother_tongue))  #<1>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              category     language mother_tongue most_at_home most_at_work\n1 Aboriginal languages Cree, n.o.s.         64050        37950         7800\n  lang_known\n1      86115\n [ reached 'max' / getOption(\"max.print\") -- omitted 66 rows ]\n```\n:::\n:::\n\n\n\n1. arranges the languages from the language with the most to the least people who speak the language as their mother tongue\n\nNote:\n\n-   use arrange(variable) to go from least to most\n-   use arrange(desc(variable)) to go from most to least, arrange(-variable) also works\n\n# `slice()`\n\nThe slice function will allow us to pick only a subset of the rows based on their numeric order (1st through last).\n\nFor example, if I want a list of the 10 most commonly spoken aboriginal languages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naboriginal_lang %>% \n  arrange(desc(mother_tongue)) %>% \n  slice(1:10)   #<1>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              category     language mother_tongue most_at_home most_at_work\n1 Aboriginal languages Cree, n.o.s.         64050        37950         7800\n  lang_known\n1      86115\n [ reached 'max' / getOption(\"max.print\") -- omitted 9 rows ]\n```\n:::\n:::\n\n\n\n1. Only include the first 10 rows of the dataset\n\n# `mutate()`\n\n`mutate()` creates new columns that are functions of existing variables.\n\n![Artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/bd4ae264-ae51-4d18-bd60-7a058ab42fba_rw_1920.png?h=a3757d1f46f418c59e7e7946d026344e)\n\nFor example, if I want to create a new column called `mother_tongue_K` which represents the number of people who speak the language their mother tongue in thousands. You may want to save this new dataset over top of the original dataset so you could use this new column in the future. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naboriginal_lang <- aboriginal_lang %>% \n  mutate(mother_tongue_K = mother_tongue/1000) #<1>\n```\n:::\n\n\n\n1. Creates a new column called `mother_tongue_K` calculated by taking the `mother_tongue` column and dividing it by 1000. \n\nThis can be useful for unit conversions. It also be useful for making new calculations based on existing data (for example, price and number of square feet could be used to calculate price per square foot).\n\n",
    "supporting": [
      "118_B_wrangling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}