{
  "hash": "2ee322efcd68fac68981f0fc9f7e827f",
  "result": {
    "markdown": "---\ntitle: '`forcats`: working with categorical data'\nauthor: 'Emily Malcolm-White'\nformat:\n  html: \n    toc: TRUE\n    code-overflow: wrap\n    embed-resources: true\n    code-tools:\n      source: true\n      toggle: false\n      caption: none\nexecute: \n  message: FALSE\n  warning: FALSE\n---\n\n\n\nThe R package `forcats` is designed to make working with categorical variables easier and more efficient. It provides a set of functions that allow you to manipulate and analyze categorical data with ease. In this lesson, we'll cover the basics of the `forcats` package and some of its most useful functions.\n\n\n## Categorical Variables\n\nLet's review what categorical data is. Categorical data is a type of data that consists of categories or labels.\n\nExamples of categorical data include:\n\n- Colors (red, blue, green, etc.)\n- Types of vehicles (sedan, SUV, truck)\n- Educational degrees (high school, college, graduate school)\n\nCategorical data can be further divided into two types: *nominal* and *ordinal*. Nominal data consists of categories that have no inherent order, while ordinal data consists of categories that have a natural order. For example, educational degrees are ordinal data because they can be ordered from least to most advanced.\n\n## `mpg` Data\n\nWe will play with different functions in the `forcats` packages using the `mpg` dataset from earlier in the semester. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(forcats)\nlibrary(tidyverse)\ndata(\"mpg\")\n```\n:::\n\n\nRecall our side-by-side boxplot: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>% \n  ggplot(aes(x=class, y=hwy)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](118_H_forcats_notes_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## Reordering Factor Levels\n\nOne of the most useful functions is fct_relevel(), which allows you to reorder the levels of a factor. This can be useful when you want to change the default ordering of the levels or when you want to group certain levels together.\n\nIs `class` a factor?  \n\n\n::: {.cell}\n\n:::\n\n\nLet's make it a factor! \n\n\n::: {.cell}\n\n:::\n\n\nLet's check the levels and their current ordering! \n\n\n::: {.cell}\n\n:::\n\n\nTo reorder the levels with `fct_relevel()`\n\n\n::: {.cell}\n\n:::\n\n\nLet's recreate our side-by-side boxplot now: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg %>% \n  ggplot(aes(x=class, y=hwy)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](118_H_forcats_notes_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nRather than reordering them manually by typing the order, you could also re-level by some numeric criteria using `fct_reorder()`. For example: \n\n\n::: {.cell}\n\n:::\n\n\n\n## Renaming Factor levels with `fct_recode`\n\nSometimes you might not like the way the levels are named. \n\n\n::: {.cell}\n\n:::\n\n\n## Factor Collapsing with `fct_collapse()`\n\nLet's say we wanted to create only two categories -- cars and larger vehicles. \n\n\n::: {.cell}\n\n:::\n\n\n\n## Lumping into an other category\n\n- `fct_lump_min()`: lumps levels that appear fewer than min times.\n\n- `fct_lump_prop()`: lumps levels that appear in fewer than (or equal to) prop * n times.\n\n- `fct_lump_n()` lumps all levels except for the n most frequent (or least frequent if n < 0)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(mpg$manufacturer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n      audi  chevrolet      dodge       ford      honda    hyundai       jeep \n        18         19         37         25          9         14          8 \nland rover    lincoln    mercury     nissan    pontiac     subaru     toyota \n         4          3          4         13          5         14         34 \nvolkswagen \n        27 \n```\n:::\n:::\n\n\nLet's say we wanted only the manufacturers with at least 15 cars produced. Everything else we want to just be other: \n\n\n::: {.cell}\n\n:::\n\n\nCreate a table using kableExtra: \n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "118_H_forcats_notes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}