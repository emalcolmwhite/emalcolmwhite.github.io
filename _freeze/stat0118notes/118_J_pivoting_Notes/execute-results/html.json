{
  "hash": "0f848cf3bf7e5547fc2fb5e8d6bc57d6",
  "result": {
    "markdown": "---\ntitle: '`tidyr`: reshaping data with `pivot_longer()` and `pivot_wider()`'\nsubtitle: 'STAT 118: Notes J'\nauthor: 'Emily Malcolm-White'\ninstitute: 'Middlebury College'\nformat:\n  html: \n    toc: TRUE\n    code-overflow: wrap\n    embed-resources: true\n---\n\n\n\n\n![](https://media.tenor.com/jy6WGzwRKlsAAAAC/ross-pivot-friends.gif)\n\n# Reshaping with Pivoting -- Why? \n\nData frames are often described as wide or long. \n\n*Wide* when a row has more than one observation, and the units of observation are on one row each\n\n*Long* when a row has only one observation, but the units of observation are repeated down the column\n\n![Credit: datasciencebook.ca](https://github.com/UBC-DSCI/introduction-to-datascience/blob/main/img/wrangling/pivot_functions.001.jpeg?raw=true)\n\n# `canlang` dataset \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#LOAD PACKAGES\nlibrary(tidyverse)\n\n#LOAD DATA\nlang_wide <- read.csv(\"https://raw.githubusercontent.com/UBC-DSCI/introduction-to-datascience/master/data/region_lang_top5_cities_wide.csv\")\n```\n:::\n\n\n# Pivot Longer\n\n![Credit: datasciencebook.ca](https://github.com/UBC-DSCI/introduction-to-datascience/blob/main/img/wrangling/pivot_functions.003.jpeg?raw=true)\n![Credit: datasciencebook.ca](https://github.com/UBC-DSCI/introduction-to-datascience/blob/main/img/wrangling/pivot_longer.jpeg?raw=true)\n\n::: {.cell}\n\n```{.r .cell-code}\nlang_mother_tidy <- pivot_longer(lang_wide,\n  cols = Toronto:Edmonton,\n  names_to = \"region\",\n  values_to = \"mother_tongue\"\n)\n\nlang_mother_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,070 × 4\n   category                                language         region mother_tongue\n   <chr>                                   <chr>            <chr>          <int>\n 1 Aboriginal languages                    Aboriginal lang… Toron…            80\n 2 Aboriginal languages                    Aboriginal lang… Montr…            30\n 3 Aboriginal languages                    Aboriginal lang… Vanco…            70\n 4 Aboriginal languages                    Aboriginal lang… Calga…            20\n 5 Aboriginal languages                    Aboriginal lang… Edmon…            25\n 6 Non-Official & Non-Aboriginal languages Afrikaans        Toron…           985\n 7 Non-Official & Non-Aboriginal languages Afrikaans        Montr…            90\n 8 Non-Official & Non-Aboriginal languages Afrikaans        Vanco…          1435\n 9 Non-Official & Non-Aboriginal languages Afrikaans        Calga…           960\n10 Non-Official & Non-Aboriginal languages Afrikaans        Edmon…           575\n# ℹ 1,060 more rows\n```\n:::\n:::\n\n\n\nThe data above is now tidy because all three criteria for tidy data have now been met:\n\n- All the variables (category, language, region and mother_tongue) are now their own columns in the data frame.\n- Each observation, (i.e., each language in a region) is in a single row.\n- Each value is a single cell, i.e., its row, column position in the data frame is not shared with another value.\n\n# Pivot Wider\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlang_long <- read.csv(\"https://raw.githubusercontent.com/UBC-DSCI/introduction-to-datascience/master/data/region_lang_top5_cities_long.csv\")\n```\n:::\n\n\n\n![Credit: datasciencebook.ca](https://github.com/UBC-DSCI/introduction-to-datascience/blob/main/img/wrangling/pivot_functions.004.jpeg?raw=true)\n![Credit: datasciencebook.ca](https://github.com/UBC-DSCI/introduction-to-datascience/blob/main/img/wrangling/pivot_wider.jpeg?raw=true)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlang_home_tidy <- pivot_wider(lang_long,\n  names_from = type,\n  values_from = count\n)\nlang_home_tidy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,070 × 5\n   region    category                         language most_at_home most_at_work\n   <chr>     <chr>                            <chr>           <int>        <int>\n 1 Montréal  Aboriginal languages             Aborigi…           15            0\n 2 Toronto   Aboriginal languages             Aborigi…           50            0\n 3 Calgary   Aboriginal languages             Aborigi…            5            0\n 4 Edmonton  Aboriginal languages             Aborigi…           10            0\n 5 Vancouver Aboriginal languages             Aborigi…           15            0\n 6 Montréal  Non-Official & Non-Aboriginal l… Afrikaa…           10            0\n 7 Toronto   Non-Official & Non-Aboriginal l… Afrikaa…          265            0\n 8 Calgary   Non-Official & Non-Aboriginal l… Afrikaa…          505           15\n 9 Edmonton  Non-Official & Non-Aboriginal l… Afrikaa…          300            0\n10 Vancouver Non-Official & Non-Aboriginal l… Afrikaa…          520           10\n# ℹ 1,060 more rows\n```\n:::\n:::\n\n\n# Gapminder\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gapminder)\ndata(\"gapminder\")\n```\n:::\n\n\nLet’s say we’d like to look at `LifeExp` over time for all the countries in Asia in our dataset. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a dataset called asia with the data we need\nasia <- gapminder %>% \n  filter(continent == \"Asia\") %>% \n  select(country, year, lifeExp)\n```\n:::\n\n\nWe can create a wide version of our table, where each row is a country and each column a year, with values of `lifeExp` in each cell of the table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlifeExp_wide <- asia %>% \n  # use pivot_wider to go from long to wide format\n  pivot_wider(names_from = \"year\", \n              names_prefix = \"yr\", #it’s a good idea to avoid column names that start with a number\n              values_from = \"lifeExp\")\nlifeExp_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 33 × 13\n   country yr1952 yr1957 yr1962 yr1967 yr1972 yr1977 yr1982 yr1987 yr1992 yr1997\n   <fct>    <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n 1 Afghan…   28.8   30.3   32.0   34.0   36.1   38.4   39.9   40.8   41.7   41.8\n 2 Bahrain   50.9   53.8   56.9   59.9   63.3   65.6   69.1   70.8   72.6   73.9\n 3 Bangla…   37.5   39.3   41.2   43.5   45.3   46.9   50.0   52.8   56.0   59.4\n 4 Cambod…   39.4   41.4   43.4   45.4   40.3   31.2   51.0   53.9   55.8   56.5\n 5 China     44     50.5   44.5   58.4   63.1   64.0   65.5   67.3   68.7   70.4\n 6 Hong K…   61.0   64.8   67.6   70     72     73.6   75.4   76.2   77.6   80  \n 7 India     37.4   40.2   43.6   47.2   50.7   54.2   56.6   58.6   60.2   61.8\n 8 Indone…   37.5   39.9   42.5   46.0   49.2   52.7   56.2   60.1   62.7   66.0\n 9 Iran      44.9   47.2   49.3   52.5   55.2   57.7   59.6   63.0   65.7   68.0\n10 Iraq      45.3   48.4   51.5   54.5   57.0   60.4   62.0   65.0   59.5   58.8\n# ℹ 23 more rows\n# ℹ 2 more variables: yr2002 <dbl>, yr2007 <dbl>\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}