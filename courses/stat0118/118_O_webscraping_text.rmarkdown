---
title: 'Webscraping Text'
author: 'Emily Malcolm-White'
institute: 'Middlebury College'
format:
  html: 
    toc: TRUE
    code-overflow: wrap
    embed-resources: true
    code-tools:
      source: true
      toggle: false
      caption: none
    code-annotations: hover
  pdf: default
execute: 
  message: FALSE
  warning: FALSE
---


![](https://rvest.tidyverse.org/logo.png){width=30%}


```{r message=FALSE, warning=FALSE}
#LOAD PACKAGES 
library(tidyverse)
library(rvest)
```


# Webscraping Text

Let's look at the [Science Books on Good Reads](https://www.goodreads.com/shelf/show/science)


```{r}
URL <- read_html("https://www.goodreads.com/shelf/show/science")
```



Notice that the data for all these books isn't housed inside a `<table>` element! 

## Titles

For example, check out the lines of html code for the book "Sapians": 

```{}
<div class="elementList" style="padding-top: 10px;">
<div class="left" style="width: 75%;">
<a title="Sapiens: A Brief History of Humankind" class="leftAlignedImage" href="/book/show/23692271-sapiens"><img alt="Sapiens: A Brief History of Humankind" src="https://i.gr-assets.com/images/S/compressed.photo.goodreads.com/books/1703329310l/23692271._SY75_.jpg" /></a>
<a class="bookTitle" href="/book/show/23692271-sapiens">Sapiens: A Brief History of Humankind (Paperback)</a>
<br />
<span class='by'>by</span>
<span itemprop='author' itemscope='' itemtype='http://schema.org/Person'>
<div class='authorName__container'>
<a class="authorName" itemprop="url" href="https://www.goodreads.com/author/show/395812.Yuval_Noah_Harari"><span itemprop="name">Yuval Noah Harari</span></a>
</div>
</span>
(shelved 6592 times as <em>science</em>)
<br />
<span class="greyText smallText">
avg rating 4.35 ‚Äî
1,168,542 ratings  ‚Äî
published 2011
</span>
</div>
```

## Titles

In this case, we want to look for the class `bookTitle` using `html_elements(".bookTitle")`

:::callout-tip
In this case, we want ALL titles so we used `html_elements()`. If we had only wanted the first title we would have used `html_element()`
:::


```{r}
titles <- URL %>%
  html_elements(".bookTitle") %>%
  html_text()

titles
```


## Authors

In this case, we want to look for the class `authorName` using `html_elements(".authorName")`

:::callout-tip
In this case, we want ALL titles so we used `html_elements()`. If we had only wanted the first title we would have used `html_element()`
:::


```{r}
authors <- URL %>%
  html_elements(".authorName") %>%
  html_text()

authors
```


## Other Info


```{}
<span class="greyText smallText">
avg rating 4.35 ‚Äî
1,168,542 ratings  ‚Äî
published 2011
</span>
```

In this case, we need to reference the class `greyText` 


```{r}
info <- URL %>%
  html_elements(".greyText") %>%
  html_text()

info
```


## Putting it all together


```{r}
length(titles)
length(authors)
length(info)
```


Oops! They aren't all the same length, so we can't put them in the same dataset. There should be 50 books! We need to look at this by hand... 

The 13th element of `authors` just says "(Contributers)". Let's remove that. 


```{r}
authors <- authors[-13]
```



Our `info` vector has some excessive info (ie. `info[58] = (GoodReads Author)`)

Sometimes webscraping requires some manual massaging. We could try using the full `class = "greyText smallText` but using multiple classes `html_elements(".greyText.smallText")`


```{r}
info <- URL %>%
  html_elements(".greyText.smallText") %>%
  html_text()

info

info <- info[-12]
info
```


# All Together Now

Now they are all the same length: 


```{r}
length(titles)
length(authors)
length(info)
```

```{r}
books <- data.frame(Title = titles,
  Author = authors,
  Info = info
  )
books
```


## Seperating Data in Columns

We will need some help of `regex` (short for regular expression) -- a powerful way to search, match, and extract patterns in text. 


```{r}
books <- books %>%
  mutate(
    # Remove newlines and trim spaces
    Info = str_squish(Info),
    
    # Extract each piece using regex
    avg_rating = str_extract(Info, "(?<=avg rating )\\d+\\.\\d+"),   
    num_ratings = str_extract(Info, "\\d{1,3}(,\\d{3})*(?= ratings)"),  
    yr_published = str_extract(Info, "(?<=published )\\d{4}")
  ) %>% 
  select(-Info)
```


üå∂Ô∏è `regex` expressions can be very challenging depending on the complexity of the text you are trying to format. You are encouraged to use Google and/or generative AI to help you come up with the appropriate expressions. Below is a quick guide to some of the basics: 

```markdown
| Pattern | Meaning                                     | Example                          |
|---------|---------------------------------------------|----------------------------------|
| `.`     | Any character except newline                | `a.b` matches `acb`, `a2b`       |
| `\d`    | Any digit (0‚Äì9)                             | `\d+` matches `2023`, `55`       |
| `\w`    | Any word character (letter, number, _)      | `\w+` matches `hello`, `abc123`  |
| `\s`    | Whitespace (space, tab, newline)            | `\s+` matches spaces/tabs        |
| `+`     | One or more of the preceding                | `a+` matches `a`, `aa`, `aaa`    |
| `*`     | Zero or more of the preceding               | `a*` matches ``, `a`, `aa`       |
| `?`     | Optional (zero or one)                      | `colou?r` matches `color`, `colour` |
| `^`     | Start of line/string                        | `^The` matches lines starting with `The` |
| `$`     | End of line/string                          | `end$` matches lines ending with `end` |
| `[]`    | Match one character inside brackets         | `[aeiou]` matches any vowel      |
| `[^]`   | Match anything **except** what's in brackets | `[^0-9]` matches non-digits      |
| `()`    | Grouping for extracting or repeating        | `(\d{4})` extracts 4-digit numbers |
| `|`     | OR                                           | `cat|dog` matches `cat` or `dog` |
| `{n}`   | Exactly n repetitions                       | `\d{4}` matches exactly four digits |
```


# Formatting Columns


```{r}
books <- books %>% 
  mutate(
    num_ratings = str_remove_all(num_ratings, ",") %>%  as.numeric(),
    avg_rating = avg_rating %>%  as.numeric(),
    num_ratings = num_ratings %>%  as.numeric(),
    yr_published = yr_published %>%  as.numeric()
  )
```

