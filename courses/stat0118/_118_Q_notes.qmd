---
title: 'Math 118: Notes Q'
subtitle: |
  | Introducing `stringr`
  | ![](https://stringr.tidyverse.org/logo.png){width=10%}
author: 'Violet Ross'
institute: 'Middlebury College'
format:
  html: 
    toc: TRUE
    code-overflow: wrap
    embed-resources: true
---

```{r message=FALSE, warning=FALSE}
#LOAD PACKAGES 
library(tidyverse)
library(stringr)
```

## A few basics

**What is a string?**
  
A string is a data type used to represent text. In R, we indicate that something is a string by referring to it with quotes.

Examples of strings:

- 
- 
- 

NOT a string:

- 

**What is ** `stringr` **?**
  
stringr is a package containing a bunch of functions that help us work with strings.
  
[**stringr cheat sheet**](https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf)

# Using `stringr`

**I'm registering for classes for this Fall and am trying to decide which courses to take.**
  
Let's look at the course catalog!

Read in the courses data.

```{r, message=FALSE, warning=FALSE}

```

## `str_detect` 
  
**inputs**: 
  
-  a string (or a column of strings) to search *from*  
-  a string to search *for*  
  
**output**: boolean value (TRUE or FALSE)  

little example:
```{r}


```

I only want to take classes in Warner! Let's filter for rows where we **detect** the word "Warner" in the `location` column.
```{r}


```
  
  
  
Suppose I don't want any classes on Friday. Let's use `str_detect` to find our options.
```{r}


```


Perhaps I'm interested in artificial intelligence. 
We can use `str_detect` to find course descriptions that mention artificial intelligence.  
  
The `regex` function is used to write regular expressions in R. Regular expressions are helpful if you want to search for a pattern rather than a specific word or phrase.  
For now, we will only use regex to ignore capitalization. 
If you're interested in using regular expressions at some point, this [regex cheat sheet](https://cheatography.com/davechild/cheat-sheets/regular-expressions/) will be super helpful.

```{r}


```
  
  
  
## `str_extract` and `str_remove`
  
  
**str_extract inputs**: 
  
-  a string (or a column of strings) to extract *from*  
-  a string to extract  
  
**str_extract output**: the string you wanted to extract OR nothing  

**str_remove inputs**: 
  
-  a string (or a column of strings) to remove stuff *from*  
-  a string to remove  
  
**str_remove output**: the first input string with the second input removed  

little example:
```{r}



```
  
  
  
CW is part of the distribution requirement column. I want CW to be its own column.  
First we can create a new column called `isCW` by **extracting** instances of "CW" from the `distros` column in each row.  
Then we can **remove** all instances of "CW" from the `distros` column.
```{r}



```
  
  
  
## `str_sub`
  
  
**str_sub inputs**:
  
-  a string (or a column of strings) take substrings of  
-  where the substring should start
-  where the substring should end
  
**str_sub output**: the substring    
  
little example:
```{r}


```
  

Maybe I only want 200 level math and stats classes.  
First we filter for just math/stats classes. 
Then we can create a new column called `level` that contains only the sixth character from the `courses` column.  


We can then filter our `level` column for specific course levels.
```{r}



```
  
  
  
## `str_count`
  
  
little example:
```{r}


```
 
  
**str_count inputs**: 
  
-  a string (or a column of strings) to count *from*  
-  a string you want to count the number of instances of  
  
**str_count output**: the number of times the second string occurs in your first string


Maybe I only want my classes to meet twice a week. Let's **count** how many times "day" appears in the `meet` column and put this value in a new column called `dayCount`. `dayCount` represents how many days a week a class meets.
```{r}




```

Let's visualize this data.
```{r}


  
```
  