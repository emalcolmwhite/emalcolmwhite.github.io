---
title: 'Aggregating with `count()`, `summarize()`, `group_by()`, `case_when()`'
author: 'Emily Malcolm-White'
format:
  html: 
    toc: TRUE
    code-overflow: wrap
    embed-resources: true
    code-tools:
      source: true
      toggle: false
      caption: none
    code-annotations: hover
  pdf: default
execute: 
  message: FALSE
  warning: FALSE
---

```{r message=FALSE, warning=FALSE}
#LOAD PACKAGES 
library(tidyverse)
```

# `palmerpenguins` dataset

Size measurements, clutch observations, and blood isotope ratios for adult foraging Adélie, Chinstrap, and Gentoo penguins observed on islands in the Palmer Archipelago near Palmer Station, Antarctica. Data were collected and made available by Dr. Kristen Gorman and the Palmer Station Long Term Ecological Research (LTER) Program.

![](https://allisonhorst.github.io/palmerpenguins/logo.png){width=30%}

```{r}
#LOAD DATA 
library(palmerpenguins) #<1>
data(penguins)          #<2>
```

1. Load the `palmerpenguins` package
2. Display the penguins dataset in the environment

# Remove rows with missing data with drop_na()

```{r}
penguins <- penguins %>%    #<2>
  drop_na()                 #<1>
```

1. Drops all the rows in the penguins dataset which has missing data (NA values)
2. overwrite the penguins dataset with the penguins dataset without the missing rows

::: callout-warning
Is it appropriate to remove rows with missing data? How many rows have missing data? Do the missing rows have something in common?

Removing rows can affect the validity and generalizability of your analysis!
:::


# `count()`

`count()` lets you quickly count the unique values of one or more variables. Suppose you want the number of penguins on each island.  

```{r}
penguins %>% 
    count(island)
```


# `summarize()` or `summarise()` (either works)

Suppose we are interested in the average bill length of all Adelie penguins:

```{r}
penguins %>%                                            
  filter(species == "Adelie") %>%                       #<1>
  summarize(average_bill_length = mean(bill_length_mm))  #<2>
```
1. only include the rows where the species is Adelie
2. calculate the average bill length; save this as `average_bill_length`

Suppose we are interested in the average bill length AND average bill depth of all Adelie penguins:

```{r}
penguins %>%
  filter(species == "Adelie") %>%
  summarize(average_bill_lenth = mean(bill_length_mm),  #<1>
            average_bill_depth = mean(bill_depth_mm))   #<2>
```
1. calculate the average bill length; save this as `average_bill_length`
2. calculate the average bill depth; save this as `average_bill_depth`

Typically, we seperate each calculation with a new line to keep things pretty. These new values will print out on the same table. 

There are lots of other functions available:

-   `min`: minimum value
-   `max`: maximum value
-   `mean`: average or mean value
-   `median`: median value
-   `var`: variance
-   `sd`: standard deviation
-   `n`: count or number of values
-   `n_distinct`: counts number of distinct values

Suppose we are interested in the average bill length AND the median bill length of all Adelie penguins:

```{r}
penguins %>%
  filter(species == "Adelie") %>%
  summarise(average_bill_lenth = mean(bill_length_mm), 
            median_bill_length = median(bill_length_mm))
```

# `group_by()`

Let's say we were interested in the average bill length and bill depth of all penguin species in this dataset. We could repeat this for the other species (Gentoo and Chinstrap). This would be a fair amount of work AND the results would not end up in the same table.

OR we could use the `group_by` command!

```{r}
penguins %>%
  group_by(species) %>% #<1>
  summarise(average_bill_lenth = mean(bill_length_mm), 
            average_bill_depth = mean(bill_depth_mm))
```

1. Repeats the calculate below for each different species. 

## Multiple Groups

Suppose we wish to have the average bill length and average bill depth broken down by sex AND species:

```{r}
penguins %>%
  group_by(species, sex) %>%
  summarise(average_bill_length = mean(bill_length_mm), 
            average_bill_depth = mean(bill_depth_mm))
```

# (Optional) `across()`

If you wish to apply the same calculation to many columns, you may wish to check out the `across` function.
![Artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/2471e3f8-348e-470c-a162-3eea0606ff96_rw_1920.png?h=1caf8d5f3d25792fbaf296a1e62b670a)

```{r}
penguins %>%
  group_by(species, sex) %>%
  summarise(across(where(is.numeric), mean))
```

# Recall: `mutate()`

The mutate function allows you create a new column which is a function of other columns. This can be useful to converting units.

For example, let's calculate create a new column which displays the body length weight in pounds (lbs) instead of grams. Recall: to convert from grams to pounds we need to multiply by 0.00220462

```{r}
penguins <- penguins %>% 
  mutate(body_mass_lbs = body_mass_g*0.00220462) #<1>
```

1. Creates a new column in the penguins dataset called `body_mass_lbs` calculated by taking the value of the body mass (in g) and multiplying by 0.00220562. 

# `case_when()`

Case when can be used in combination with `mutate` to create a new column with a categorical variable conditional on the values in another column.

![Artwork by @allisonhorst](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/6ffcd6d6-c783-4087-ae76-99aa851663ed_rw_1920.png?h=5f67935d69c92e1fda9074d00dfea972){width=50%}

For example:

```{r}
penguins <- penguins %>% 
  mutate(penguin_length_cat = case_when(bill_length_mm > 50 ~ 'whoa! huge bill!', TRUE ~ '--' ))
```

::: callout-tip
For those of you who have taken a computer science class before, you may notice that `case_when` is similar to using an `ifelse` statement. You can also use `ifelse` in R if you'd prefer!

```{r}
penguins <- penguins %>% 
  mutate(penguin_length_cat = ifelse(bill_length_mm > 50, 'whoa! huge bill!', '--' ))
```
:::


# Brain Break

This is a story about Jinjing the South American Magellanic Penguin, that swims 5,000 miles each year to be reunited with the man who saved his life. The rescued Penguin was saved by João Pereira de Souza, a 73 year old part-time fisherman, who lives in an island village just outside Rio de Janeiro, Brazil. <https://youtu.be/oks2R4LqWtE>

<iframe width="560" height="315" src="https://www.youtube.com/embed/oks2R4LqWtE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen>

</iframe>
