gridExtra::grid.arrange(p1, p2, ncol = 2)
can_lang <- can_lang %>%
mutate(
mother_tongue_percent = (mother_tongue / 35151728) * 100,
most_at_home_percent = (most_at_home / 35151728) * 100
)
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent, #<1>
y = mother_tongue_percent )) +  #<2>
geom_point(aes(color = category, shape=category)) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") + #<4>
scale_x_log10(labels = comma) +
scale_y_log10(labels = comma)
can_lang_percent_plot
can_lang_percent_plot  +
geom_text(aes(label=language),
nudge_x = 0.25,
nudge_y=0.25)
library(ggrepel)
can_lang_percent_plot +
geom_text_repel(aes(label=language), max.overlaps = Inf)
can_lang <- can_lang %>%
mutate(official_languages = case_when(category == "Official languages" ~ language, TRUE ~ NA ))
# We need to redo the base plot with the new can_lang dataset with the new official_languages column in it
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,
y = mother_tongue_percent, #<2>
color = category, shape=category)) +
geom_point() +
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") +
scale_x_log10(labels = comma) +
scale_y_log10(labels = comma)
can_lang_percent_plot +
geom_text_repel(aes(label=official_languages))
# We need to redo the base plot with the new can_lang dataset with the new official_languages column in it
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,
y = mother_tongue_percent, #<2>
color = category, shape=category)) +
geom_point() +
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") +
scale_x_log10(labels = comma) +
scale_y_log10(labels = comma)
can_lang_percent_plot +
geom_text_repel(aes(label=official_languages, min.segment.length=0, box.padding=1))
# We need to redo the base plot with the new can_lang dataset with the new official_languages column in it
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,  y = mother_tongue_percent)) + #<2>
geom_point(aes(color = category, shape=category)) +
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") +
scale_x_log10(labels = comma) +
scale_y_log10(labels = comma)
can_lang_percent_plot +
geom_text_repel(aes(label=official_languages, min.segment.length=0, box.padding=1))
#| warning: FALSE
#| message: FALSE
library(tidyverse)
#Import the can_lang dataset
can_lang <- read.csv("https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv")
can_lang_plot <- ggplot(can_lang, aes(x=most_at_home, y=mother_tongue)) +
geom_point() +
xlab("Language spoken most at home \n (number of Canadian residents)") +
ylab("Mother tongue \n (number of Canadian residents)")
View(can_lang_plot)
can_lang_plot <- ggplot(can_lang, aes(x=most_at_home, y=mother_tongue)) +
geom_point() +
xlab("Language spoken most at home \n (number of Canadian residents)") +
ylab("Mother tongue \n (number of Canadian residents)")
can_lang_plot
# Install the package if needed
library(scales)
can_lang_plot
can_lang_plot +
scale_x_continuous(labels = label_comma())
can_lang_plot +
scale_x_continuous(labels = label_comma()) +
scale_y_continuous(labels = label_comma())
can_lang_plot
can_lang_plot +
scale_x_log10()
can_lang_plot +
scale_x_log10() +
scale_y_log10()
can_lang_plot +
scale_x_log10(label = label_comma()) +
scale_y_log10(label = label_comma())
can_lang <- can_lang %>%
mutate(
mother_tongue_percent = (mother_tongue / 35151728) * 100,
most_at_home_percent = (most_at_home / 35151728) * 100
)
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,
y = mother_tongue_percent )) +
geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") + #<4>
scale_x_log10(labels = comma) +
scale_y_log10(labels = comma)
can_lang_percent_plot
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,
y = mother_tongue_percent )) +
geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") + #<4>
scale_x_log10(labels = percent) +
scale_y_log10(labels = percent)
can_lang_percent_plot
can_lang <- can_lang %>%
mutate(
mother_tongue_percent = (mother_tongue / 35151728) ,
most_at_home_percent = (most_at_home / 35151728)
)
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,
y = mother_tongue_percent )) +
geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") + #<4>
scale_x_log10(labels = percent) +
scale_y_log10(labels = percent)
can_lang_percent_plot
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,
y = mother_tongue_percent )) +
geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
#theme(legend.position = "top", legend.direction = "vertical") + #<4>
scale_x_log10(labels = percent) +
scale_y_log10(labels = percent)
can_lang_percent_plot
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,
y = mother_tongue_percent )) +
geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") + #<4>
scale_x_log10(labels = percent) +
scale_y_log10(labels = percent)
can_lang_percent_plot
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,
y = mother_tongue_percent )) +
geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top") + #<4>
scale_x_log10(labels = percent) +
scale_y_log10(labels = percent)
can_lang_percent_plot
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,
y = mother_tongue_percent )) +
geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") + #<4>
scale_x_log10(labels = percent) +
scale_y_log10(labels = percent)
can_lang_percent_plot
can_lang <- can_lang %>%
mutate(
mother_tongue_percent = (mother_tongue / 35151728) ,
most_at_home_percent = (most_at_home / 35151728)
)
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,
y = mother_tongue_percent )) +
geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") + #<4>
scale_x_log10(labels = percent) +
scale_y_log10(labels = percent)
can_lang_percent_plot
can_lang_percent_plot +
geom_text(aes(label = language))
library(ggrepel)
can_lang_percent_plot +
geom_text_repel(aes(label = languages))
library(ggrepel)
can_lang_percent_plot +
geom_text_repel(aes(label = language))
?geom_text_repel
library(ggrepel)
can_lang_percent_plot +
geom_text_repel(aes(label = language), max.overlaps = 100)
can_lang <- can_lang %>%
mutate(official_languages = case_when(category == "Official languages" ~ language, TRUE ~ NA ))
View(can_lang)
# We need to redo the base plot with the new can_lang dataset with the new official_languages column in it
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,  y = mother_tongue_percent)) + #<2>
geom_point(aes(color = category, shape=category)) +
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") +
scale_x_log10(labels = comma) +
scale_y_log10(labels = comma)
can_lang_percent_plot +
geom_text_repel(aes(labels = official_languages))
#| warning: FALSE
#| message: FALSE
library(tidyverse)
#Import the can_lang dataset
can_lang <- read.csv("https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv")
can_lang_plot <- ggplot(can_lang, aes(x=most_at_home, y=mother_tongue)) +
geom_point() +
xlab("Language spoken most at home \n (number of Canadian residents)") +
ylab("Mother tongue \n (number of Canadian residents)")
can_lang_plot
# Install the package if needed
library(scales)
can_lang_plot +
scale_x_continuous(labels = label_comma()) +
scale_y_continuous(labels = label_comma())
#| echo: FALSE
#| fig-width: 12
#| fig-height: 6
### ALL OF THIS IS SUPER SPICY 🌶️🌶️️ and beyond what I would expect of you in this course...
library(scales)
# Function to generate breaks for log10 scale
minor_log_breaks <- function() {
as.numeric(outer(1:10, 10^(0:6)))  # Generates minor breaks at 1.1, 1.2, ..., 9, 10, 20, 30...
}
# Define major log breaks for both plots (powers of 10)
major_log_breaks <- 10^(0:6)  # 1, 10, 100, 1000, ..., 1,000,000
# Define linear breaks for both plots (powers of 10)
major_linear_breaks <- seq(0, 30000000, 5000000)
minor_linear_breaks <- seq(0, 30000000, 1000000)
# Scatterplot with Linear Scale
p1 <- ggplot(can_lang, aes(x = most_at_home, y = mother_tongue)) +
geom_point() +
scale_x_continuous(breaks = major_linear_breaks,
labels = label_comma(),
minor_breaks = minor_linear_breaks) +
scale_y_continuous(breaks = major_linear_breaks,
labels = label_comma(),
minor_breaks = minor_linear_breaks) +
labs(
x = "Language spoken most at home \n (number of Canadian residents)",
y = "Mother tongue \n (number of Canadian residents)",
title = "Linear Scale on x- and y-axis",
subtitle = "the next break on a linear scale can be found my ADDING"
) +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "lightblue", linetype = "solid"), # Light blue for major grid lines
panel.grid.minor = element_line(color = "#D6EBF2", linetype = "solid")
)
# Extract breaks from the linear scale plot
p1_build <- ggplot_build(p1)
extracted_linear_breaks <- p1_build$layout$panel_params[[1]]$x$breaks
# Remove zeros (log10(0) is undefined)
extracted_linear_breaks <- extracted_linear_breaks[extracted_linear_breaks > 0]
# Transform breaks for log scale
log_breaks <- 10^floor(log10(extracted_linear_breaks))  # Round to nearest power of 10
# Custom function to format numbers as scientific notation (10^x)
format_scientific <- function(x) {
parse(text = paste0("10^", log10(x)))  # Converts numbers into properly formatted exponents
}
# Scatterplot with Log Scale
p2 <- ggplot(can_lang, aes(x = most_at_home, y = mother_tongue)) +
geom_point() +
scale_x_log10(
minor_breaks = minor_log_breaks(),
breaks = major_log_breaks,  # Use manually defined major breaks
labels = label_comma(),
sec.axis = sec_axis(~ .,
breaks = major_log_breaks,
labels = format_scientific,  # Scientific notation labels
name = NULL)
) +
scale_y_log10(
minor_breaks = minor_log_breaks(),
breaks = major_log_breaks,
labels = label_comma(),
sec.axis = sec_axis(~ .,
breaks = major_log_breaks,
labels = format_scientific,  # Scientific notation labels
name = NULL)
) +
labs(
x = "Language spoken most at home \n (number of Canadian residents, log scale)",
y = "Mother tongue \n (number of Canadian residents, log scale)",
title = "Log Scale on x- and y-axis (log-log scale)",
subtitle = "The next break on a log scale can be found by MULTIPLYING"
) +
theme_minimal() +
theme(
panel.grid.minor = element_line(color = "lightblue", linetype = "solid"),  # Light blue for minor grid lines
panel.grid.major = element_line(color = "darkred", linetype = "dotted"),  # Dark red dotted for major grid lines
axis.title.x.bottom = element_text(margin = margin(t = 10)),
axis.text.x.top = element_text(margin = margin(b = 5)),
axis.title.y.left = element_text(margin = margin(r = 10)),  # Add space for primary y-axis
axis.text.y.right = element_text(margin = margin(l = 5))  # Add space for secondary y-axis
)
# Display both plots side by side
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
can_lang_plot +
scale_x_log10(label = label_comma()) +
scale_y_log10(label = label_comma())
#| echo: FALSE
# Scatterplot with Log Scale (Recommended)
p1 <- ggplot(can_lang, aes(x = most_at_home, y = mother_tongue)) +
geom_point() +
scale_x_log10(labels = label_comma()) +
scale_y_log10(labels = label_comma()) +
labs(
title = "Recommended Approach",
subtitle = "Use `scale_*_log10()`",
x =  "Language spoken most at home \n (number of Canadian residents)",
y = "Mother tongue \n (number of Canadian residents)"
) +
theme_minimal() +
theme(
axis.text.x = element_text(color = "darkgreen", size = 12, face = "bold"),
text = element_text(family = "sans")  # Ensures emoji support in most environments
)
# Scatterplot with Manual Log Transform (Not Recommended)
p2 <- ggplot(can_lang, aes(x = log(most_at_home), y = log(mother_tongue))) +
geom_point() +
scale_x_continuous(labels = label_comma()) +
scale_y_continuous(labels = label_comma()) +
labs(
title = "Not recommended",
subtitle="Manually Transforming the Data (log(variable))",
x =  "Language spoken most at home \n (number of Canadian residents)",
y = "Mother tongue \n (number of Canadian residents)"
) +
theme_minimal() +
theme(
axis.text.x = element_text(color = "red", size = 12, face = "bold"),
text = element_text(family = "sans")
)
# Display both plots side by side
gridExtra::grid.arrange(p1, p2, ncol = 2)
can_lang <- can_lang %>%
mutate(
mother_tongue_percent = (mother_tongue / 35151728) ,
most_at_home_percent = (most_at_home / 35151728)
)
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,
y = mother_tongue_percent )) +
geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") + #<4>
scale_x_log10(labels = percent) +
scale_y_log10(labels = percent)
can_lang_percent_plot
can_lang_percent_plot +
geom_text(aes(label = language))
library(ggrepel)
can_lang_percent_plot +
geom_text_repel(aes(label = language), max.overlaps = 100)
can_lang <- can_lang %>%
mutate(official_languages = case_when(category == "Official languages" ~ language, TRUE ~ NA ))
# We need to redo the base plot with the new can_lang dataset with the new official_languages column in it
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,  y = mother_tongue_percent)) + #<2>
geom_point(aes(color = category, shape=category)) +
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") +
scale_x_log10(labels = comma) +
scale_y_log10(labels = comma)
can_lang_percent_plot +
geom_text_repel(aes(labels = official_languages))
can_lang_percent_plot +
geom_text_repel(aes(label = official_languages))
can_lang_percent_plot
can_lang_percent_plot  +
facet_wrap(~Category)
can_lang_percent_plot  +
facet_wrap(~category)
#| warning: FALSE
#| message: FALSE
library(tidyverse)
#Import the can_lang dataset
can_lang <- read.csv("https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv")
#| warning: FALSE
#| message: FALSE
library(tidyverse)
#Import the can_lang dataset
can_lang <- read.csv("https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv")
can_lang_plot <- ggplot(can_lang, aes(x=most_at_home, y=mother_tongue)) +
geom_point() +
xlab("Language spoken most at home \n (number of Canadian residents)") +
ylab("Mother tongue \n (number of Canadian residents)")
can_lang_plot <- ggplot(can_lang, aes(x=most_at_home, y=mother_tongue)) +
geom_point() +
xlab("Language spoken most at home \n (number of Canadian residents)") +
ylab("Mother tongue \n (number of Canadian residents)")
View(can_lang_plot)
can_lang_plot <- ggplot(can_lang, aes(x=most_at_home, y=mother_tongue)) +
geom_point() +
xlab("Language spoken most at home \n (number of Canadian residents)") +
ylab("Mother tongue \n (number of Canadian residents)")
can_lang_plot
# Install the package if needed
library(scales)
can_lang_plot +
scale_x_continuous(label = label_comma())
can_lang_plot +
scale_x_continuous(label = label_comma()) +
scale_y_continuous(label= label_comma())
can_lang_plot
can_lang_plot  +
scale_x_log10()
can_lang_plot  +
scale_x_log10(aes(label=label_comma()))
can_lang_plot  +
scale_x_log10(label=label_comma())
can_lang_plot  +
scale_x_log10(label=label_comma()) +
scale_y_log10(label = label_comma())
can_lang <- can_lang %>%
mutate(
mother_tongue_percent = (mother_tongue / 35151728),
most_at_home_percent = (most_at_home / 35151728)
)
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,  y = mother_tongue_percent )) +
geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") + #<4>
scale_x_log10(labels = comma) +
scale_y_log10(labels = comma)
can_lang_percent_plot
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,  y = mother_tongue_percent )) +
geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") + #<4>
scale_x_log10(labels = percent) +
scale_y_log10(labels = percent)
can_lang_percent_plot
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,  y = mother_tongue_percent )) +
geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") + #<4>
scale_x_log10(labels = percent) +
scale_y_log10(labels = percent)
can_lang_percent_plot
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,  y = mother_tongue_percent )) +
geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") + #<4>
scale_x_log10(labels = percent) +
scale_y_log10(labels = percent)
can_lang_percent_plot
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,  y = mother_tongue_percent )) +
geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
#theme(legend.position = "top", legend.direction = "vertical") + #<4>
scale_x_log10(labels = percent) +
scale_y_log10(labels = percent)
can_lang_percent_plot
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,  y = mother_tongue_percent )) +
geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top") + #<4>
scale_x_log10(labels = percent) +
scale_y_log10(labels = percent)
can_lang_percent_plot
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,  y = mother_tongue_percent )) +
geom_point(aes(color = category, shape=category), alpha=0.5) + #<3>
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") + #<4>
scale_x_log10(labels = percent) +
scale_y_log10(labels = percent)
can_lang_percent_plot
can_lang <- can_lang %>%
mutate(
mother_tongue_percent = (mother_tongue / 35151728),
most_at_home_percent = (most_at_home / 35151728)
)
can_lang_percent_plot  +
geom_text(aes(label= language))
library(ggrepel)
can_lang_percent_plot +
geom_text_repel(aes(label=language))
?geom_text_repel
library(ggrepel)
can_lang_percent_plot +
geom_text_repel(aes(label=language), max.overlaps=100)
can_lang <- can_lang %>%
mutate(official_languages = case_when(category == "Official languages" ~ language,
TRUE ~ NA ))
View(can_lang)
# We need to redo the base plot with the new can_lang dataset with the new official_languages column in it
can_lang_percent_plot <- ggplot(can_lang, aes(x = most_at_home_percent,  y = mother_tongue_percent)) + #<2>
geom_point(aes(color = category, shape=category)) +
xlab("Language spoken most at home \n (percentage of Canadian residents)") +
ylab("Mother tongue \n (percentage of Canadian residents)") +
theme(legend.position = "top", legend.direction = "vertical") +
scale_x_log10(labels = comma) +
scale_y_log10(labels = comma)
can_lang_percent_plot
can_lang_percent_plot +
geom_text_repel(aes(label=official_languages))
can_lang_percent_plot  +
facet_wrap(~category)
# Download and read the dataset
yrbss_data <- read_surveydata("https://www.cdc.gov/healthyyouth/data/yrbs/files/YRBS2021.csv")
