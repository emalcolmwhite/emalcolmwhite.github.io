select(-rowname, -gender) |>
relocate(column)
resume_names_1 <- resume_names_full |>
filter(column == 1) |>
select(-column)
resume_names_2 <- resume_names_full |>
filter(column == 2) |>
select(-column)
resume_names_3 <- resume_names_full |>
filter(column == 3) |>
select(-column)
resume_names_1 |>
bind_cols(resume_names_2) |>
bind_cols(resume_names_3) |>
kbl(linesep = "", booktabs = TRUE, align = "lllllllll",
col.names = c("first_name", "race", "sex",
"first_name", "race", "sex",
"first_name", "race", "sex")) |>
kable_styling(bootstrap_options = c("striped", "condensed"),
latex_options = c("striped", "hold_position"), full_width = FALSE) |>
column_spec(4, border_left = T) |>
column_spec(7, border_left = T)
#| label: resume-data-prep
resume <- resume |>
rename(sex = gender) |>
mutate(
sex = if_else(sex == "m", "man", "woman"),
sex = fct_relevel(sex, "woman", "man"),
received_callback = as.factor(received_callback),
college_degree = as.factor(college_degree),
honors = as.factor(honors),
military = as.factor(military),
has_email_address = as.factor(has_email_address),
race = if_else(race == "black", "Black", "White")
) |>
select(received_callback, job_city, college_degree, years_experience,
honors, military, has_email_address, race, sex)
resume_variables <- tribble(
~variable,           ~description,
"received_callback", "Specifies whether the employer called the applicant following submission of the application for the job.",
"job_city",          "City where the job was located: Boston or Chicago.",
"college_degree",    "An indicator for whether the resume listed a college degree.",
"years_experience",  "Number of years of experience listed on the resume.",
"honors",            "Indicator for the resume listing some sort of honors, e.g. employee of the month.",
"military",          "Indicator for if the resume listed any military experience.",
"has_email_address", "Indicator for if the resume listed an email address for the applicant.",
"race",              "Race of the applicant, implied by their first name listed on the resume.",
"sex",               "Sex of the applicant (limited to only and in this study), implied by the first name listed on the resume."
)
resume_variables |>
kbl(linesep = "", booktabs = TRUE) |>
kable_styling(bootstrap_options = c("striped", "condensed"),
latex_options = c("striped", "hold_position"), full_width = TRUE) |>
column_spec(1, monospace = TRUE) |>
column_spec(2, width = "25em")
#| fig.height=2.5
logit_df_line <- tibble(
p  = seq(0.0001, 0.9999, 0.0002),
lp = log(p / (1 - p))
)
logit_df_point <- tibble(
lp = -5:6,
p = round(exp(lp) / (exp(lp) + 1), 3)
) |>
mutate(
label = glue::glue("({lp}, {p})"),
label_pos = case_when(
lp %in% c(-5, -3, 4, 6) ~ "above",
lp %in% c(-4, 3, 5)     ~ "below",
lp == -2                ~ "right",
lp %in% c(-1, 0, 1, 2)  ~ "left",
)
)
ggplot(logit_df_line, aes(x = lp, y = p)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "#569BBD") +
geom_hline(yintercept = 1, linetype = "dashed", color = "#569BBD") +
geom_smooth(se = FALSE, size = 0.5, color="#114B5F") +
coord_cartesian(
xlim = c(-5.5, 6.15),
ylim = c(-0.05, 1.1)
) +
geom_point(data = logit_df_point,
size = 2, color = "#F05133") +
geom_text(data = logit_df_point |> filter(label_pos == "above"),
aes(label = label), vjust = -2, size=2) +
geom_text(data = logit_df_point |> filter(label_pos == "below"),
aes(label = label), vjust = 2.5, size=2) +
geom_text(data = logit_df_point |> filter(label_pos == "right"),
aes(label = label), hjust = -0.25, size=2) +
geom_text(data = logit_df_point |> filter(label_pos == "left"),
aes(label = label), hjust = 1.25, size=2) +
labs(
x = expression(logit(p[i])),
y = expression(p[i])
)
#| label: resume-full-fit
#| tbl-cap: |
#|   Summary table for the full logistic regression model for the
#|   resume callback example.
library(infer)
resume_full_fit <- glm(received_callback ~ job_city + college_degree + years_experience + honors + military + has_email_address + race + sex, data = resume, family = "binomial")
resume_full_fit %>%
tidy() %>%
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) %>%
kbl(linesep = "", booktabs = TRUE,
digits = 2, align = "lrrrrr") %>%
kable_styling(bootstrap_options = c("striped", "condensed"),
latex_options = c("striped", "hold_position")) |>
column_spec(1, width = "15em", monospace = TRUE) %>%
column_spec(2:5, width = "5em")
#| label: tbl-resume-fit
#| tbl-cap: |
#|   Summary table for the logistic regression model for the resume
#|   callback example, where variable selection has been performed
#|   using AIC.
resume_fit <- glm(received_callback ~ job_city + years_experience + honors + military + has_email_address + race + sex, data = resume, family = "binomial")
resume_fit |>
tidy() |>
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) |>
kbl(linesep = "", booktabs = TRUE,
digits = 2, align = "lrrrrr") |>
kable_styling(bootstrap_options = c("striped", "condensed"),
latex_options = c("striped", "hold_position")) |>
column_spec(1, width = "17em", monospace = TRUE) |>
column_spec(2:5, width = "5em")
resume_fit |>
tidy() |>
mutate(p.value = ifelse(p.value < 0.0001, "<0.0001", round(p.value, 4))) |>
kbl(linesep = "", booktabs = TRUE,
digits = 2, align = "lrrrrr") |>
kable_styling(bootstrap_options = c("striped", "condensed"),
latex_options = c("striped", "hold_position")) |>
column_spec(1, width = "17em", monospace = TRUE) |>
column_spec(2:5, width = "5em")
#| fig.cap: The predicted probability that each of the 4870 emails that recieve a callback. Points
#|   have been jittered so that those with nearly identical values arenâ€™t plotted exactly
#|   on top of one another.
#| fig-height: 2
#| fig-asp: 0.4
resume_pred <- predict.glm(resume_fit, new_data = resume, type = "response") %>%
bind_cols(resume %>% select(received_callback))
ggplot(resume_pred, aes(x = ...1, y = received_callback)) +
geom_jitter(alpha = 0.2, col="#569BBD") +
coord_cartesian(xlim = c(0, 1)) +
labs(y = NULL,
x = "Predicted probability that resume recieved a callback") +
scale_y_discrete(labels = c("No callback (0)", "Callback (1)"))
#| out.width: 90%
#| fig-asp: 0.7
par_og <- par(no.readonly = TRUE) # save original par
par(mar = c(5.1, 7, 0, 0))
m <- glm(received_callback ~ job_city + years_experience + honors + military + has_email_address + race + sex, data = resume, family = "binomial")
p <- predict(m, type = "response")
set.seed(1)
noise <- rnorm(nrow(resume), sd = 0.08)
ns1 <- 4
plot(p, as.numeric(resume$received_callback) - 1 + noise / 5,
type = "n",
xlim = 0:1,
ylim = c(-0.07, 1.07),
axes = FALSE,
xlab = "Predicted Probability",
ylab = "")
par(las = 0)
mtext("Truth", 2, 5.5)
par(las = 1)
rect(0, 0, 1, 1,
border = IMSCOL["gray", "full"],
col = "#00000000",
lwd = 1.5)
lines(0:1, 0:1,
lty = 2,
col = IMSCOL["gray", "full"],
lwd = 1.5)
points(p, as.numeric(resume$received_callback) - 1 + noise / 5,
col = IMSCOL["blue", "f5"],
pch = 20)
axis(1)
at <- seq(0, 1, length.out = 6)
labels <- c("0 (No CB)",
"0.2  ",
"0.4  ",
"0.6  ",
"0.8  ",
"1 (CB)")
axis(2, at, labels)
eps <- 1e-4
bucket_breaks <- quantile(p, seq(0, 1, 0.01))
bucket_breaks[1] <- bucket_breaks[1] - eps
n_buckets <- length(bucket_breaks) - 1
bucket_breaks[n_buckets] <- bucket_breaks[n_buckets] + 1e3 * eps
bucket_breaks. <- bucket_breaks
k <- 1
for (i in 1:n_buckets) {
if (abs(bucket_breaks.[i] - bucket_breaks[k]) >= 0.01) {
k <- k + 1
bucket_breaks[k] <- bucket_breaks.[i]
}
}
bucket_breaks <- bucket_breaks[1:k]
n_buckets <- length(bucket_breaks)
xp <- rep(NA, n_buckets)
yp <- rep(NA, n_buckets)
yp_lower <- rep(NA, n_buckets)
yp_upper <- rep(NA, n_buckets)
zs <- qnorm(0.975)
for (i in 1:n_buckets) {
these <- bucket_breaks[i] < p & p <= bucket_breaks[i + 1]
xp[i] <- mean(p[these])
#cat(paste("xp", "i", "=", xp[i]))
y <- (as.numeric(resume$received_callback) - 1)[these]
yp[i] <- mean(y)
#cat(paste("yp", "i", "=", yp[i]))
yp_lower[i] <- yp[i] - zs * sqrt(yp[i] * (1 - yp[i]) / length(y))
#cat(paste("yp_lower", "i", "=", yp_lower[i]))
yp_upper[i] <- yp[i] + zs * sqrt(yp[i] * (1 - yp[i]) / length(y))
#cat(paste("yp_upper", "i", "=", yp_upper[i]))
}
points(xp, yp, pch = 19)
segments(xp, yp_lower, xp, yp_upper)
arrows(0.3, 0.17,
0.24, 0.22,
length = 0.07)
text(0.3, 0.15,
paste("Observations are bucketed, then we compute",
"the observed probability in each bucket (y)",
"against the average predicted probability (x)",
"for each of the buckets with 95% confidence intervals.",
sep = "\n"),
cex = 0.85, pos = 4)
par(par_og) # restore original par
library(knitr)
library(tidyverse)
library(gt)
2+3
2+3
x <- 23
23*2
x*2
x*2
x*2
2 + 8
x <- 31
31/2 + 7
x <- 32
31/2 + 7
31/2 + 7
x/2 + 7
x <- 47
x/2 + 7
age <- 47
age/2 + 7
age <- 70
age/2 + 7
setwd("~/OneDrive - Middlebury College/emalcolmwhite.github.io")
#LOAD PACKAGES
library(tidyverse)
#LOAD DATA
library(nycflights23)
data("flights")
#LOAD PACKAGES
library(tidyverse)
#LOAD DATA
library(nycflights23)
data("flights")
force(flights)
View(flights)
#LOAD PACKAGES
library(tidyverse)
#LOAD DATA
library(nycflights23)
data("flights")
data("airlines")
force(airlines)
View(airlines)
flights_joined <- flights %>%
left_join(airlines, by = carrier)
flights_joined <- flights %>%
left_join(airlines, by = "carrier")
View(flights_joined)
data("airports")
flights_joined %>%
left_join(airports, by=c("origin" = "faa"))
flights_joined <- flights_joined %>%
left_join(airports, by=c("origin" = "faa"))
View(airports)
flights_joined %>%
left_join(airports, by=c("dest" = "faa"))
flights_joined %>%
left_join(airports, by=c("dest" = "faa")) %>%
count(name.y)
flights_joined %>%
left_join(airports, by=c("dest" = "faa"))
flights_joined %>%
left_join(airports, by=c("dest" = "faa")) %>%
count(name)
flights_joined %>%
left_join(airports, by=c("dest" = "faa")) %>%
count(dest)
flights_joined %>%
left_join(airports, by=c("dest" = "faa")) %>%
count(dest, name)
flights_joined %>%
left_join(airports, by=c("dest" = "faa")) %>%
group_by(dest, name) %>%
summarize(count=n())
?rename
flights_joined %>%
left_join(airports, by=c("dest" = "faa")) %>%
group_by(dest, name) %>%
summarize(count=n()) %>%
rename(destination_airport_name=name, faa=dest )
flights_joined %>%
left_join(airports, by=c("dest" = "faa")) %>%
group_by(dest, name) %>%
summarize(count=n()) %>%
rename(destination_airport_name=name, faa=dest )  %>% #optional pretty renaming of column names new_name = old_name
arrange(count)
flights_joined %>%
left_join(airports, by=c("dest" = "faa")) %>%
group_by(dest, name) %>%
summarize(count=n()) %>%
rename(destination_airport_name=name, faa=dest )  %>% #optional pretty renaming of column names new_name = old_name
arrange(-count)
data("weather")
force(weather)
View(weather)
flights_joined %>%
left_join(weather, by=c("origin", "time_hour"))
#| eval: FALSE
flights %>%
ggplot(aes(x = carrier, fill = origin)) +
geom_bar() +
coord_flip()
#VS
flights %>%
inner_join(airports, by = c("origin" = "faa")) %>%
rename(origin_airport = name) %>%
inner_join(airlines, by = c("carrier")) %>%
rename(carrier_name= name) %>%
ggplot(mapping = aes(x = carrier_name, fill = origin_airport)) +
geom_bar() +
coord_flip()
#| eval: FALSE
flights_weather_joined %>%
filter(dep_delay >0) %>%
ggplot(aes(x=temp, y=dep_delay)) +
geom_point()
flights_weather_joined <- flights_joined %>%
left_join(weather, by=c("origin", "time_hour"))
#| eval: FALSE
flights_weather_joined %>%
filter(dep_delay >0) %>%
ggplot(aes(x=temp, y=dep_delay)) +
geom_point()
#LOAD PACKAGES
library(tidyverse)
#LOAD DATA
library(nycflights23)
data("flights")
force(flights)
View(flights)
data("airlines")
force(airlines)
View(airlines)
flights_joined <- flights %>%
left_join(airlines, by="carrier")
View(flights_joined)
data("airports")
force(airports)
View(airports)
flights_joined <- flights_joined %>%
left_join(airlines, by=c("origin" = "faa"))
#LOAD PACKAGES
library(tidyverse)
#LOAD DATA
library(nycflights23)
data("flights")
data("airlines")
flights_joined <- flights %>%
left_join(airlines, by="carrier")
data("airports")
flights_joined_more <- flights_joined %>%
left_join(airlines, by=c("origin" = "faa"))
flights_joined_more <- flights_joined %>%
left_join(airports, by=c("faa" = "origin"))
flights_joined_more <- flights_joined %>%
left_join(airports, by=c("origin" = "faa"))
View(flights_joined_more)
flights_joined %>%
left_join(airports, by=c("dest" = "faa"))
flights_joined %>%
left_join(airports, by=c("dest" = "faa")) %>%
group_by(dest) %>%
summarize(count=n())
flights_joined %>%
left_join(airports, by=c("dest" = "faa"))
flights_joined %>%
left_join(airports, by=c("dest" = "faa")) %>%
group_by(dest, name.y) %>%
summarize(count=n())
flights_joined %>%
left_join(airports, by=c("dest" = "faa")) %>%
group_by(dest, name.y) %>%
summarize(count=n())
flights_joined %>%
left_join(airports, by=c("dest" = "faa")) %>%
group_by(dest, name.y) %>%
summarize(count=n()) %>%
rename(airport_name = name.y)
flights_joined %>%
left_join(airports, by=c("dest" = "faa"))  %>%
rename(airport_name = name.y) %>%
group_by(dest, airport_name) %>%
summarize(count=n())
flights_joined %>%
left_join(airports, by=c("dest" = "faa"))  %>%
rename(airport_name = name.y) %>%
count(dest, airport_name)
flights_joined %>%
left_join(airports, by=c("dest" = "faa"))  %>%
rename(airport_name = name.y) %>%
count(dest, airport_name) %>%
arrange(-count)
flights_joined %>%
left_join(airports, by=c("dest" = "faa"))  %>%
rename(airport_name = name.y) %>%
count(dest, airport_name) %>%
arrange(-n)
table <- flights_joined %>%
left_join(airports, by=c("dest" = "faa"))  %>%
rename(airport_name = name.y) %>%
count(dest, airport_name) %>%
arrange(-n)
View(table)
data("weather")
force(weather)
View(weather)
flights_joined_more %>%
flights_joined_more %>%
left_join(weather, by=c("origin", "time_hour"))
flights_joined_more %>%
left_join(weather, by=c("origin"))
flights_joined_more %>%
left_join(weather, by=c("origin", "time_hour"))
flights_joined_more %>%
left_join(weather, by=c("origin", "year", "month", "day", "hour"))
flights_joined_more %>%
left_join(weather, by=c("origin", "year", "month", "day", "hour"))
flights_joined_more %>%
left_join(weather, by=c("origin", "time_hour"))
#| eval: FALSE
flights %>%
ggplot(aes(x = carrier, fill = origin)) +
geom_bar() +
coord_flip()
#VS
flights %>%
inner_join(airports, by = c("origin" = "faa")) %>%
rename(origin_airport = name) %>%
inner_join(airlines, by = c("carrier")) %>%
rename(carrier_name= name) %>%
ggplot(mapping = aes(x = carrier_name, fill = origin_airport)) +
geom_bar() +
coord_flip()
#| eval: FALSE
flights_weather_joined %>%
filter(dep_delay >0) %>%
ggplot(aes(x=temp, y=dep_delay)) +
geom_point()
flights_weather_joined <- flights_joined_more %>%
left_join(weather, by=c("origin", "time_hour"))
#| eval: FALSE
flights_weather_joined %>%
filter(dep_delay >0) %>%
ggplot(aes(x=temp, y=dep_delay)) +
geom_point()
setwd("~/OneDrive - Middlebury College/Q-Center - CTLR/Tutors/Budget and Wages")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
portal_wgt_summary <- portal_rodent %>%
filter(!is.na(wgt)) %>%
group_by(plot, species) %>%
summarize(mean_wgt = mean(wgt))
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
#LOAD PACKAGES
library(tidyverse)
#LOAD DATA
portal_rodent <- read.csv("https://github.com/weecology/PortalData/raw/main/Rodents/Portal_rodent.csv")
portal_wgt_summary <- portal_rodent %>%
filter(!is.na(wgt)) %>%
group_by(plot, species) %>%
summarize(mean_wgt = mean(wgt))
portal_wgt_summary
portal_wgt_summary %>%
pivot_wider(names_from = species, values_from = mean_wgt)
wide <- portal_wgt_summary %>%
pivot_wider(names_from = species, values_from = mean_wgt)
wide
wide %>%
pivot_longer(names_to = "species", values_to = "mean_wgt", cols=-2:4)
wide
wide %>%
pivot_longer(names_to = "species", values_to = "mean_wgt", cols=2:28)
portal_rodent %>%
count(year, plot)
portal_rodent %>%
group_by(year, plot) %>%
summarize(unique_species = n_distinct(species))
portal_rodent %>%
group_by(year, plot) %>%
summarize(unique_species = n_distinct(species)) %>%
pivot_wider(names_from = year, values_from = unique_species)
