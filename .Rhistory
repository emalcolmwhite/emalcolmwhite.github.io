"Events related to exploring STEM" = "Events related to exploring STEM majors, STEM research, or STEM careers",
"Events for building community" = "Events for building community amongst students, staff, and faculty in STEM/Quantitative courses"
)) %>%
mutate(Usefulness = fct_relevel(Usefulness, "VeryUseful", "SomewhatUseful", "NotUseful", "Unsure")) %>%
mutate(Usefulness = fct_recode(Usefulness, "Very Useful" = "VeryUseful",
"Somewhat Useful" = "SomewhatUseful",
"Not Useful"= "NotUseful")) %>%
mutate(group = "Faculty (n=71)")
Student_q7_VeryUseful <- read.csv("Student_q7_VeryUseful.csv") %>%
clean_names() %>%
rename("Option" = "q7_0_group_very_useful_i_would_use_often_max_3") %>%
rename("VeryUseful" = "count")
Student_q7_SomewhatUseful <- read.csv("Student_q7_SomewhatUseful.csv") %>%
clean_names() %>%
rename("Option" = "q7_1_group_somewhat_useful_i_would_use_sometimes") %>%
rename("SomewhatUseful" = "count")
Student_q7_NotUseful <- read.csv("Student_q7_NotUseful.csv")%>%
clean_names() %>%
rename("Option" = "q7_2_group_not_useful_i_wouldn_t_use") %>%
rename("NotUseful" = "count")
Student_q7_Unsure <- read.csv("Student_q7_Unsure.csv") %>%
clean_names() %>%
rename("Option" = "q7_3_group_i_m_not_sure") %>%
rename("Unsure" = "count")
Student_q7 <- Student_q7_VeryUseful %>%
inner_join(Student_q7_SomewhatUseful, by="Option") %>%
inner_join(Student_q7_NotUseful, by="Option") %>%
inner_join(Student_q7_Unsure, by="Option") %>%
select(Option, VeryUseful, SomewhatUseful, NotUseful, Unsure) %>%
mutate(Option= str_extract(Option, pattern = "[^(]+")) %>%
#mutate(Option = fct_reorder(Option, VeryUseful)) %>%
pivot_longer(VeryUseful:Unsure, names_to="Usefulness") %>%
mutate(Option = fct_recode(Option, "One-on-one course tutoring" = "One-on-one course-specific tutoring",
"Course-specific workshops by staff/faculty"= "Course-specific workshops taught by professional staff/faculty",
"Course-specific workshops by peer tutors" = "Course-specific workshops taught by peer tutors",
"Study Group Sign-up sheets"="Sign-up sheets to help form study groups with your peers",
"STEM/Q Study skills workshops" = "Study skills workshops tailored for STEM/Quantitative courses",
"Peer Mentoring Program" = "Peer mentoring programs for STEM/Quant ",
"Online forums" = "Online forums to discuss course-content with your peers",
"Events related to exploring STEM" = "Events related to exploring STEM majors, STEM research, or STEM careers",
"Events for building community" = "Events for building community amongst students, staff, and faculty in STEM/Quantitative courses"
)) %>%
mutate(Usefulness = fct_relevel(Usefulness, "VeryUseful", "SomewhatUseful", "NotUseful", "Unsure")) %>%
mutate(Usefulness = fct_recode(Usefulness, "Very Useful" = "VeryUseful",
"Somewhat Useful" = "SomewhatUseful",
"Not Useful"= "NotUseful")) %>%
mutate(group = "Students (n=171)")
#| fig-width: 11
#| fig-height: 8
rbind(Faculty_q7, Student_q7) %>%
mutate(Option = fct_relevel(Option, "Online forums", "Study Group Sign-up sheets", "Events for building community", "Peer Mentoring Program", "Events related to exploring STEM", "Course-specific workshops by peer tutors","STEM/Q Study skills workshops", "Course-specific workshops by staff/faculty", "One-on-one course tutoring", "Course-specific drop-in peer tutoring", "Credit-bearing foundational courses ")) %>%
ggplot(aes(y=Option, x=value, fill=group, alpha=fct_rev(Usefulness))) +
facet_wrap(~group) +
geom_col(position="fill") +
scale_x_continuous(labels = scales::percent) +
ylab("") +
xlab("") +
scale_fill_manual(values = my_cols[1:2], guide="none") +
scale_alpha_manual("", values=c(0.4, 0.6, 0.8, 1), guide = guide_legend(reverse = TRUE)) +
#scale_fill_brewer(" ",palette = "ByGn") +
#ggtitle("") +
labs(caption ="*Faculty were not asked about access to food/beverage or printers") +
theme_minimal(base_size = 16) +
theme(legend.position = "bottom") +
#, legend.text=element_text(size=12)
labs(caption ="*Students were not asked about credit-bearing foundational courses")
#| fig-height: 2.5
#| fig-width: 12
FacultySurveyResults %>%
select(office_hours) %>%
mutate(office_hours = factor(office_hours, levels=c("", "Very Unlikely", "Unlikely", "Neither likely nor unlikely", "Likely", "Very Likely"))) %>%
group_by(office_hours) %>%
count() %>%
mutate(col = " ") %>%
ggplot(aes(x=col,y=n/sum(n),alpha=office_hours)) +
geom_col(position="stack", fill=my_cols[1]) +
scale_alpha_manual("", values=c(0.1,0.40,0.55, 0.7, 0.85, 1), guide = guide_legend(reverse = TRUE)) +
scale_y_continuous(labels = scales::percent) +
xlab("") +
ylab("Percent of Faculty Surveyed") +
coord_flip() +
theme_minimal(base_size=16) +
theme(legend.position = "top", legend.text=element_text(size=12))
#| fig-height: 2.5
#| fig-width: 12
FacultySurveyResults %>%
select(office_hours) %>%
filter(office_hours != " ") %>%
mutate(office_hours = factor(office_hours, levels=c("", "Very Unlikely", "Unlikely", "Neither likely nor unlikely", "Likely", "Very Likely"))) %>%
group_by(office_hours) %>%
count() %>%
mutate(col = " ") %>%
ggplot(aes(x=col,y=n/sum(n),alpha=office_hours)) +
geom_col(position="stack", fill=my_cols[1]) +
scale_alpha_manual("", values=c(0.1,0.40,0.55, 0.7, 0.85, 1), guide = guide_legend(reverse = TRUE)) +
scale_y_continuous(labels = scales::percent) +
xlab("") +
ylab("Percent of Faculty Surveyed") +
coord_flip() +
theme_minimal(base_size=16) +
theme(legend.position = "top", legend.text=element_text(size=12))
#| fig-height: 2.5
#| fig-width: 12
FacultySurveyResults %>%
select(office_hours) %>%
filter(office_hours != "") %>%
mutate(office_hours = factor(office_hours, levels=c("", "Very Unlikely", "Unlikely", "Neither likely nor unlikely", "Likely", "Very Likely"))) %>%
group_by(office_hours) %>%
count() %>%
mutate(col = " ") %>%
ggplot(aes(x=col,y=n/sum(n),alpha=office_hours)) +
geom_col(position="stack", fill=my_cols[1]) +
scale_alpha_manual("", values=c(0.1,0.40,0.55, 0.7, 0.85, 1), guide = guide_legend(reverse = TRUE)) +
scale_y_continuous(labels = scales::percent) +
xlab("") +
ylab("Percent of Faculty Surveyed") +
coord_flip() +
theme_minimal(base_size=16) +
theme(legend.position = "top", legend.text=element_text(size=12))
1-pt(1.85, 9)
2*(1-pt(1.85, 9))
pt(1-1.85, 9)
50*.75
50*0.7
setwd("~/Google Drive/My Drive/EastonEmily/R by the Sea/rbythesea_website")
git remote add origin http://github.com/QuantMarineEcoLab/r_by_the_sea.git
owd
pwd
d |>
gt() |>
sub_missing(
columns = 1:4,
missing_text = ""
) |>
text_transform(cells_body(columns = c(Template)),
fn = function(x) {
ifelse(is.na(x), fontawesome::fa("file", fill_opacity = 0.1),
glue::glue("<a href = {x}>{fontawesome::fa('file')}</a>")
)
}
)
#| echo: FALSE
#| message: FALSE
#| warning: FALSE
library(googlesheets4)
library(gt)
library(tidyverse)
gs4_deauth()
d <- read_sheet("https://docs.google.com/spreadsheets/d/14u_VJSsrctmACH9mqCtYfqRrHW2v7I1COl6Atf9YPM4/edit?usp=sharing", sheet = "Sheet1")
d |>
gt() |>
sub_missing(
columns = 1:4,
missing_text = ""
) |>
text_transform(cells_body(columns = c(Template)),
fn = function(x) {
ifelse(is.na(x), fontawesome::fa("file", fill_opacity = 0.1),
glue::glue("<a href = {x}>{fontawesome::fa('file')}</a>")
)
}
)
d |>
gt() |>
sub_missing(
columns = 1:4,
missing_text = ""
) |>
text_transform(cells_body(columns = c(Template)),
fn = function(x) {
ifelse(is.na(x), fontawesome::fa("file", fill_opacity = 0.1),
glue::glue("<a href = {x}>{fontawesome::fa('file')}</a>")
)
}
) |>
text_transform(cells_body(columns = c(Notes)),
fn = function(x) {
ifelse(is.na(x), fontawesome::fa("file", fill_opacity = 0.1),
glue::glue("<a href = {x}>{fontawesome::fa('file')}</a>")
)
}
)
d |>
gt() |>
sub_missing(
columns = 1:4,
missing_text = ""
) |>
text_transform(cells_body(columns = c(Template)),
fn = function(x) {
ifelse(is.na(x), fontawesome::fa("file", fill_opacity = 0.1),
glue::glue("<a href = {x}>{fontawesome::fa('file')}</a>")
)
}
) |>
text_transform(cells_body(columns = c(Notes)),
fn = function(x) {
ifelse(is.na(x), fontawesome::fa("file", fill_opacity = 0.1),
glue::glue("<a href = {x}>{fontawesome::fa('file')}</a>")
)
}
) |>
text_transform(cells_body(columns = c(Homework)),
fn = function(x) {
ifelse(is.na(x), fontawesome::fa("desktop", fill_opacity = 0.1),
glue::glue("<a href = {x}>{fontawesome::fa('desktop')}</a>")
)
}
) |>
text_transform(cells_body(columns = c(Links)),
fn = function(x) {
ifelse(is.na(x), fontawesome::fa("link", fill_opacity = 0.1),
glue::glue("<a href = {x}>{fontawesome::fa('link')}</a>")
)
}
) |>
cols_align(
align = "center",
columns = c(Template, Notes, Homework, Links)
) |>
cols_align(
align = "left",
columns = c(Date, Time, Letter, Topic)
) |>
tab_style(
style = cell_borders(
sides = "right",
color = "#D3D3D3",
style = "solid"
),
locations = cells_body(
columns = c(Topic)
)
d |>
d |>
gt() |>
sub_missing(
columns = 1:4,
missing_text = ""
) |>
text_transform(cells_body(columns = c(Template)),
fn = function(x) {
ifelse(is.na(x), fontawesome::fa("file", fill_opacity = 0.1),
glue::glue("<a href = {x}>{fontawesome::fa('file')}</a>")
)
}
) |>
text_transform(cells_body(columns = c(Notes)),
fn = function(x) {
ifelse(is.na(x), fontawesome::fa("file", fill_opacity = 0.1),
glue::glue("<a href = {x}>{fontawesome::fa('file')}</a>")
)
}
) |>
text_transform(cells_body(columns = c(Homework)),
fn = function(x) {
ifelse(is.na(x), fontawesome::fa("desktop", fill_opacity = 0.1),
glue::glue("<a href = {x}>{fontawesome::fa('desktop')}</a>")
)
}
) |>
text_transform(cells_body(columns = c(Links)),
fn = function(x) {
ifelse(is.na(x), fontawesome::fa("link", fill_opacity = 0.1),
glue::glue("<a href = {x}>{fontawesome::fa('link')}</a>")
)
}
)
?cells_row_where
??cells_row_where
?gt::cells_row_where
?cols_width
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha512-WF28O8f0aUuuvN2cF4QAm3g8/2oh6Ft3R1xlAzDH8vH5ZVYTbVPjK7gFUoNMUs4ISwJgPVnP9M7xjO2aYX4YzA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
install.packages("fontawesome")
quarto render
0.7259
1/0.7259
qt(0.975, 19)
can_lang <- read.csv("https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv")
can_lang <- read.csv("https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv")
head(can_lang)
#| warning: FALSE
#| message: FALSE
library(tidyverse)
can_lang  %>%
filter(category == "Aboriginal languages")
aboriginal_lang <- can_lang  %>%
filter(category == "Aboriginal languages")
rare_lang <- can_lang  %>%
filter(mother_tongue < 100)
can_lang <- read.csv("https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv")
head(can_lang)
#| warning: FALSE
#| message: FALSE
library(tidyverse)
can_lang  %>%
filter(category == "Aboriginal languages")
aboriginal_lang <- can_lang  %>%
filter(category == "Aboriginal languages")
rare_lang <- can_lang  %>%
filter(mother_tongue < 100)
install.packages("quarto")
quarto preview
quarto render
quarto preview
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
flights_joined <- flights %>%
inner_join(airlines, by="carrier")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
#LOAD PACKAGES
library(tidyverse)
#LOAD DATA
library(nycflights23)
#data("flights")
#data("airlines")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
#LOAD PACKAGES
library(tidyverse)
#LOAD DATA
library(nycflights23)
#data("flights")
#data("airlines")
flights_joined <- flights %>%
inner_join(airlines, by="carrier")
flights _joined <- flights_joined %>%
?left_join
install.packages("canlang")
?can_lang
#| warning: FALSE
#| message: FALSE
library(tidyverse) #<1>
can_lang <- read.csv("can_lang.csv") #<1>
can_lang <- read.csv("https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv") #<1>
head(can_lang)
can_lang  %>%                                  #<1>
filter(category == "Aboriginal languages")   #<2>
aboriginal_lang <- can_lang  %>%             #<1>
filter(category == "Aboriginal languages")
rare_lang <- can_lang  %>%        #<1>
filter(mother_tongue < 100)     #<2>
#<3>
aboriginal_lang %>%  #<1>
select(language)  #<2>
can_lang %>%
filter(category == "Aboriginal languages") %>%
select(language)
aboriginal_lang %>%
arrange(desc(mother_tongue))  #<1>
View(can_lang)
?mutate
aboriginal_lang <- aboriginal_lang %>%
mutate(mother_tongue_K = mother_tongue/1000)
can_lang  %>%                                  #<1>
filter(category == "Aboriginal languages") %>%  #<2>
as.tibble()
?count
penguins %>%
count(species)
#LOAD PACKAGES
library(tidyverse)
#LOAD DATA
library(palmerpenguins) #<1>
data(penguins)          #<2>
penguins <- penguins %>%    #<2>
drop_na()                 #<1>
penguins %>%
count(species)
penguins %>%
count(island)
penguins %>%
filter(species == "Adelie") %>%
summarize(average_bill_lenth = mean(bill_length_mm))
penguins %>%
filter(species == "Adelie") %>%
summarize(average_bill_lenth = mean(bill_length_mm),
average_bill_depth = mean(bill_depth_mm))
penguins %>%
filter(species == "Adelie") %>%
summarize(average_bill_lenth = mean(bill_length_mm),  #<1>
average_bill_depth = mean(bill_depth_mm))
# Install required package
if (!require(rvest)) install.packages("rvest", dependencies=TRUE)
library(rvest)
get_definition_scrape <- function(word) {
url <- paste0("https://www.merriam-webster.com/dictionary/", word)
page <- read_html(url)
definition <- page %>%
html_nodes(".dtText") %>%  # CSS selector for definition text
html_text()
if (length(definition) > 0) {
return(definition)
} else {
return("Definition not found.")
}
}
# Example lookup
get_definition_scrape("apple")
# LOAD DATA SET
library(gapminder)
data(gapminder)
force(gapminder)
View(gapminder)
install.packages("tidyverse")
#| warning: FALSE
#| message: FALSE
library(tidyverse)
can_lang <- read.csv("can_lang.csv")
can_lang <- read.csv("can_lang.csv")
View(can_lang)
?filter
can_lang  %>%
filter(category == "Aboriginal languages")
aboriginal_lang <- can_lang  %>%
filter(category == "Aboriginal languages")
can_lang %>%
filter(mother_tongue < 100)
can_lang %>%
filter(mother_tongue < 100)
rare_lang <- can_lang %>%
filter(mother_tongue < 100)
aboriginal_lang <- can_lang  %>%
filter(category == "Aboriginal languages")
aboriginal_lang %>%
select(language)
aboriginal_lang %>%
select(language, mother_tongue)
aboriginal_lang %>%
select(!category)
aboriginal_lang %>%
select(language)
can_lang  %>%
filter(category == "Aboriginal languages") %>%
select(language)
aboriginal_lang %>%
arrange(mother_tongue)
aboriginal_lang %>%
arrange(-mother_tongue)
aboriginal_lang %>%
arrange( desc(mother_tongue) )
aboriginal_lang %>%
arrange(desc(mother_tongue))
aboriginal_lang %>%
arrange(desc(mother_tongue)) %>%
slice(1:10)
can_lang %>%
mutate(mother_tongue_K = mother_tongue/1000)
can_lang <- can_lang %>%
mutate(mother_tongue_K = mother_tongue/1000)
#| warning: FALSE
#| message: FALSE
library(tidyverse)
can_lang <- read.csv("can_lang.csv")
View(can_lang)
View(can_lang)
View(can_lang)
head(can_lang)
View(can_lang)
# Use keyboard shortcut for %>%  --
can_lang %>%
filter(category == "Aboriginal Languages")
# Use keyboard shortcut for %>%  --
can_lang %>%
filter(category == "Aboriginal languages")
# Use keyboard shortcut for %>%  --
can_lang %>%
filter(category == "Aboriginal languages")
aboriginal_lang <- can_lang %>%
filter(category == "Aboriginal languages")
aboriginal_lang <- can_lang %>%
filter(category == "Aboriginal languages")
aboriginal_lang
can_lang %>%
filter(mother_tongue < 100)
aboriginal_lang %>%
select(language)
aboriginal_lang %>%
select(language, mother_tongue)
can_lang %>%
filter(category == "Aboriginal languages") %>%
select(Language)
can_lang %>%
filter(category == "Aboriginal languages") %>%
select(language)
View(can_lang)
aboriginal_lang %>%
arrange(mother_tongue)
aboriginal_lang %>%
arrange(-mother_tongue)
aboriginal_lang %>%
arrange(desc(mother_tongue)) %>%
slice(1:10)
aboriginal_lang %>%
arrange(desc(mother_tongue)) %>%
slice(1:5)
aboriginal_lang %>%
arrange(desc(mother_tongue))
aboriginal_lang %>%
arrange(desc(mother_tongue)) %>%
slice(62:67)
aboriginal_lang %>%
arrange(desc(mother_tongue)) %>%
slice(1:10)
can_lang %>%
mutate(mother_tongue_K = mother_tongue/1000)
can_lang <- can_lang %>%
mutate(mother_tongue_K = mother_tongue/1000)
can_lang <- can_lang %>%
mutate(mother_tongue_K = mother_tongue/1000)
can_lang <- can_lang %>%
mutate(mother_tongue_K <- mother_tongue/1000)
can_lang <- can_lang %>%
mutate(mother_tongue_K = mother_tongue/1000)
