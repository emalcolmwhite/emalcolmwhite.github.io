summarize( mean_bill_length_mm = mean(bill_length_mm),
median_bill_length_mm = median(bill_length_mm))
# penguins %>%
#   filter(species == "Gentoo") %>%
#   summarize( mean_bill_length_mm = mean(bill_length_mm),
#              median_bill_length_mm = median(bill_length_mm))
#
# penguins %>%
#   filter(species == "Chinstrap") %>%
#   summarize( mean_bill_length_mm = mean(bill_length_mm),
#              median_bill_length_mm = median(bill_length_mm))
penguins %>%
group_by(species) %>%
summarize( mean_bill_length_mm = mean(bill_length_mm),
mean_bill_depth_mm = mean(bill_depth_mm))
penguins %>%
summarize( value = n())
# n() never has any arguments inside , it doesn't care about a column name if it's just counting the number of row
penguins %>%
summarize( value = n_distinct(island))
# counts the number of distinct values within a column
penguins %>%
summarize( value = n())
# n() never has any arguments inside , it doesn't care about a column name if it's just counting the number of row
penguins %>%
summarize( value = n_distinct(island))
# counts the number of distinct values within a column
penguins %>%
summarize( value = n())
# n() never has any arguments inside , it doesn't care about a column name if it's just counting the number of row
penguins %>%
summarize( value = n_distinct(island))
# counts the number of distinct values within a column
penguins %>%
group_by(species, sex) %>%
summarize( mean_bill_length_mm = mean(bill_length_mm),
mean_bill_depth_mm = mean(bill_depth_mm))
penguins %>%
group_by(sex, species) %>%
summarize( mean_bill_length_mm = mean(bill_length_mm),
mean_bill_depth_mm = mean(bill_depth_mm))
penguins %>%
group_by(species, sex) %>%
summarize( mean_bill_length_mm = mean(bill_length_mm),
mean_bill_depth_mm = mean(bill_depth_mm))
penguins %>%
mutate(body_mass_lbs = body_mass_g*0.00220462)
penguins <- penguins %>%
mutate(body_mass_lbs = body_mass_g*0.00220462)
?geom_bar
??geom_bar
ggplot(ten_lang, aes(x = language, y = mother_tongue)) +
geom_bar(stat = "identity") +
coord_flip()
library(tidyverse)
#Import the can_lang dataset
can_lang <- read.csv("https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv")
ten_lang <- can_lang %>%  #<1>
filter(category == "Aboriginal languages") %>% #<2>
arrange(desc(mother_tongue)) %>% #<3>
select(language, mother_tongue) %>%  #<4>
slice(1:10) #<5>
ten_lang %>% #<1>
ggplot(aes(x = language, y = mother_tongue)) + #<2>
geom_bar(stat = "identity") #<3>
library(tidyverse)
#Import the can_lang dataset
can_lang <- read.csv("https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv")
ten_lang <- can_lang %>%  #<1>
filter(category == "Aboriginal languages") %>% #<2>
arrange(desc(mother_tongue)) %>% #<3>
select(language, mother_tongue) %>%  #<4>
slice(1:10) #<5>
ten_lang %>% #<1>
ggplot(aes(x = language, y = mother_tongue)) + #<2>
geom_bar(stat = "identity") #<3>
ggplot(ten_lang, aes(x = language, y = mother_tongue)) +
geom_bar(stat = "identity") +
coord_flip() #<1>
#OR
ggplot(ten_lang, aes(x = mother_tongue, y = language)) +
geom_bar(stat = "identity")
ggplot(ten_lang, aes(x = mother_tongue, y = reorder(language, mother_tongue))) + #<1>
geom_bar(fill="lightblue", stat = "identity") +
ylab("Language") +
xlab("Mother Tongue (Number of Canadian Residents)") +
ggtitle("Ten Aboriginal Languages Most Often \n Reported by Canadian Residents \n as Their Mother Tongue") +
theme_minimal()
# load packages
library(tidyverse)
library(DAAG)
data("possum")
force(possum)
View(possum)
library(DAAG)
data("possum")
library(DAAG)
data("possum")
possums %>%
ggplot(aes(x=hdlngth))
possum %>%
ggplot(aes(x=hdlngth))
possum %>%
ggplot(aes(x=hdlngth)) +
geom_histogram()
?possum
possum %>%
ggplot(aes(x=hdlngth)) +
geom_histogram(binwidth=1)
possum %>%
ggplot(aes(x=hdlngth)) +
geom_histogram(binwidth=10)
possum %>%
ggplot(aes(x=hdlngth)) +
geom_histogram(binwidth=0.1)
possum %>%
ggplot(aes(x=hdlngth)) +
geom_histogram(binwidth=1)
possum %>%
ggplot(aes(x=hdlngth)) +
geom_histogram(binwidth=1, fill="red")
possum %>%
ggplot(aes(x=hdlngth)) +
geom_histogram(binwidth=1, fill="red")
possum %>%
ggplot(aes(x=hdlngth)) +
geom_histogram(binwidth=1, aes(fill=Pop))
possum %>%
ggplot(aes(x=hdlngth)) +
geom_density(aes(fill=Pop))
possum %>%
ggplot(aes(x=hdlngth)) +
geom_density(aes(fill=Pop), alpha=0.5)
#alpha is opacity 1 = totally solid, 0 = totally see through
possum %>%
ggplot(aes(x=hdlngth)) +
geom_boxplot()
possum %>%
ggplot(aes(y=hdlngth)) +
geom_boxplot()
ggplot(possum, aes(y = footlgth)) +
geom_boxplot(color = "blue", fill = "lightblue") +
theme(
axis.text.x = element_blank(),  # Hide text
axis.ticks.x = element_blank(), # Hide tick marks
axis.title.x = element_blank()  # Hide axis title
)
ggplot(possum, aes(y = skullw)) +
geom_boxplot(color = "blue", fill = "lightblue") +
theme(
axis.text.x = element_blank(),  # Hide text
axis.ticks.x = element_blank(), # Hide tick marks
axis.title.x = element_blank()  # Hide axis title
)
# same color for both boxplots
possum %>%
ggplot(aes(x = Pop, y=hdlngth)) +
geom_boxplot()
# different color for both boxplots
# same color for both boxplots
possum %>%
ggplot(aes(x = Pop, y=hdlngth)) +
geom_boxplot(fill="lightblue")
# different color for both boxplots
possum %>%
ggplot(aes(x = Pop, y=hdlngth)) +
geom_boxplot(aes(fill=Pop))
possum %>%
ggplot(aes(x = Pop, y=hdlngth)) +
geom_boxplot(aes(fill=Pop)) +
theme(legend.position = "none")
possum %>%
ggplot(aes(x = Pop, y=hdlngth)) +
geom_boxplot(aes(fill=Pop)) +
theme(legend.position = "none") + # hide legend
scale_fill_manual(values = c("purple", "pink"))
possum %>%
ggplot(aes(x = Pop, y=hdlngth)) +
geom_boxplot(aes(fill=Pop)) +
theme(legend.position = "none") + # hide legend
scale_color_manual(values = c("purple", "pink"))
data("economics")
force(economics)
View(economics)
View(economics)
?economics
economics %>%
ggplot(aes(x = date , y = unemploy))
economics %>%
ggplot(aes(x = date , y = unemploy)) +
geom_line()
economics %>%
ggplot(aes(x = date , y = unemploy)) +
geom_line(color="blue")
economics %>%
ggplot(aes(x = date , y = unemploy)) +
geom_line(color="blue", linetype = "dashed")
# Example dataset
df <- data.frame(
time = rep(1:5, 2),
value = c(1, 3, 5, 7, 9, 2, 5, 8, 11, 14),
category = rep(c("A", "B"), each = 5)
)
df
# Incorrect: Only one line drawn without group
ggplot(df, aes(x = time, y = value)) +
geom_line() +
ggtitle("Incorrect - Missing Group")
# Correct: Separate lines for each category using group
ggplot(df, aes(x = time, y = value, group = category)) +
geom_line() +
ggtitle("Correct - Grouped by Category")
# Automatically groups by color
ggplot(df, aes(x = time, y = value, color = category)) +
geom_line() +
ggtitle("Grouping by Color")
# Automatically groups by color
ggplot(df, aes(x = time, y = value, color = category)) +
geom_line(aes(linetype=category)) +
ggtitle("Grouping by Color")
gapminder %>%  group_by(continent, country) %>%  count()
library(gapminder)
gapminder %>%  group_by(continent, country) %>%  count()
unique(gapminder$country)
data("gapminder")
gapminder %>%
filter(year == 2007)
data("gapminder")
gapminder %>%
filter(year == 2007) %>%
count(continent)
data("gapminder")
gapminder %>%
filter(year == 2007) %>%
count(continent)
gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(count = n())
# load packages
library(tidyverse)
library(DAAG)
data("possum")
force(possum)
View(possum)
possum %>%
ggplot(aes(x=footlgth))
possum %>%
ggplot(aes(x=footlgth)) +
geom_histogram()
possum %>%
ggplot(aes(x=footlgth)) +
geom_histogram()
possum %>%
ggplot(aes(x=footlgth)) +
geom_histogram(binwidth=1)
possum %>%
ggplot(aes(x=footlgth)) +
geom_histogram(binwidth=10)
possum %>%
ggplot(aes(x=footlgth)) +
geom_histogram(binwidth=1)
possum %>%
ggplot(aes(x=footlgth)) +
geom_histogram(binwidth=0.1)
possum %>%
ggplot(aes(x=footlgth)) +
geom_histogram(binwidth=1)
possum %>%
ggplot(aes(x=footlgth)) +
geom_histogram(binwidth=1, color="olivegreen")
possum %>%
ggplot(aes(x=footlgth)) +
geom_histogram(binwidth=1, color="green")
possum %>%
ggplot(aes(x=footlgth)) +
geom_histogram(binwidth=1, fill="green")
possum %>%
ggplot(aes(x=footlgth)) +
geom_histogram(binwidth=1, aes(fill=Pop))
possum %>%
ggplot(aes(x=footlgth)) +
geom_density(binwidth=1, aes(fill=Pop))
possum %>%
ggplot(aes(x=footlgth)) +
geom_density(aes(fill=Pop))
possum %>%
ggplot(aes(x=footlgth)) +
geom_density(aes(fill=Pop), alpha = 0.5)
# alpha is opacity 1 = solid, 0 = totally see through
possum %>%
ggplot(aes(x=footlgth)) +
geom_histogram()
possum %>%
ggplot(aes(x=footlgth)) +
geom_boxplot()
possum %>%
ggplot(aes(y=footlgth)) +
geom_boxplot()
ggplot(possum, aes(y = footlgth)) +
geom_boxplot(color = "blue", fill = "lightblue") +
theme(
axis.text.x = element_blank(),  # Hide text
axis.ticks.x = element_blank(), # Hide tick marks
axis.title.x = element_blank()  # Hide axis title
)
# same color for both boxplots
possum %>%
ggplot(aes(x=Pop, y=footlngth)) +
geom_boxplot()
# same color for both boxplots
possum %>%
ggplot(aes(x=Pop, y=footlgth)) +
geom_boxplot()
# different color for both boxplots
# same color for both boxplots
possum %>%
ggplot(aes(x=Pop, y=footlgth)) +
geom_boxplot(fill = "lightblue")
# different color for both boxplots
possum %>%
ggplot(aes(x=Pop, y=footlgth)) +
geom_boxplot(aes(fill=Pop))
possum %>%
ggplot(aes(x=Pop, y=footlgth)) +
geom_boxplot(aes(fill=Pop)) +
theme(legend.position = "none")
data("economics")
force(economics)
View(economics)
?economics
economics %>%
ggplot(aes(x=date, y=unemploy)) +
geom_line()
economics %>%
ggplot(aes(x=date, y=unemploy)) +
geom_line(color="blue")
economics %>%
ggplot(aes(x=date, y=unemploy)) +
geom_line(color="blue", linetype = "dashed")
# Example dataset
df <- data.frame(
time = rep(1:5, 2),
value = c(1, 3, 5, 7, 9, 2, 5, 8, 11, 14),
category = rep(c("A", "B"), each = 5)
)
df
# Incorrect: Only one line drawn without group
ggplot(df, aes(x = time, y = value)) +
geom_line() +
ggtitle("Incorrect - Missing Group")
# Correct: Separate lines for each category using group
ggplot(df, aes(x = time, y = value, group = category)) +
geom_line() +
ggtitle("Correct - Grouped by Category")
# Automatically groups by color
ggplot(df, aes(x = time, y = value, color = category)) +
geom_line() +
ggtitle("Grouping by Color")
# Automatically groups by color
ggplot(df, aes(x = time, y = value, color = category, linetype=category)) +
geom_line() +
ggtitle("Grouping by Color")
gapminder
gapminder %>%
filter(year == 2007)
gapminder %>%
filter(year == 2007) %>%
count(continent)
gapminder %>%
filter(year == 2007) %>%
count(continent)
gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(n())
gapminder %>%
filter(year == 2007) %>%
count(continent)
gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(n=n())
gapminder %>%
filter(year == 2007) %>%
#group_by(continent) %>%
summarize(n=n())
gapminder %>%
filter(year == 2007) %>%
group_by(continent) %>%
summarize(n=n())
group_by(continent) %>%
summarize(mean_lifeExp = mean(lifeExp))
gapminder %>%
group_by(continent) %>%
summarize(mean_lifeExp = mean(lifeExp))
data %>%
ggplot(aes(x=continent, y=mean_lifeExp)) %>%
geom_col(stat="identity")
data <- gapminder %>%
group_by(continent) %>%
summarize(mean_lifeExp = mean(lifeExp))
data %>%
ggplot(aes(x=continent, y=mean_lifeExp)) %>%
geom_col(stat="identity")
data %>%
ggplot(aes(x=continent, y=mean_lifeExp)) +
geom_col(stat="identity")
#Be sure to install the openintro package if you've never used it before...
library(openintro)
data("possum")
force(possum)
ggplot(can_lang, aes(x=most_at_home, y=mother_tongue)) +
geom_point() +
xlab("Language spoken most at home \n (number of Canadian residents)") +
ylab("Mother tongue \n (number of Canadian residents)") +
theme(text = element_text(size = 12))
#| warning: FALSE
#| message: FALSE
library(tidyverse)
#Import the can_lang dataset
can_lang <- read.csv("https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv")
#| warning: FALSE
#| message: FALSE
library(tidyverse)
#Import the can_lang dataset
can_lang <- read.csv("https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv")
ggplot(can_lang, aes(x=most_at_home, y=mother_tongue)) +
geom_point() +
xlab("Language spoken most at home \n (number of Canadian residents)") +
ylab("Mother tongue \n (number of Canadian residents)") +
theme(text = element_text(size = 12))
ggplot(can_lang, aes(x = most_at_home, y = mother_tongue)) +
geom_point() +
xlab("Language spoken most at home \n (number of Canadian residents)") +
ylab("Mother tongue \n (number of Canadian residents)") +
theme(text = element_text(size = 12)) +
scale_x_log10(labels = label_comma()) +
scale_y_log10(labels = label_comma())
#| warning: FALSE
#| message: FALSE
library(scales)
ggplot(can_lang, aes(x = most_at_home, y = mother_tongue)) +
geom_point() +
xlab("Language spoken most at home \n (number of Canadian residents)") +
ylab("Mother tongue \n (number of Canadian residents)") +
theme(text = element_text(size = 12)) +
scale_x_continuous(labels = label_comma()) +
scale_y_continuous(labels = label_comma())
ggplot(can_lang, aes(x = most_at_home, y = mother_tongue)) +
geom_point() +
xlab("Language spoken most at home \n (number of Canadian residents)") +
ylab("Mother tongue \n (number of Canadian residents)") +
scale_x_continuous(labels = label_comma()) +
scale_y_continuous(labels = label_comma())
ggplot(can_lang, aes(x = most_at_home, y = mother_tongue)) +
geom_point() +
xlab("Language spoken most at home \n (number of Canadian residents)") +
ylab("Mother tongue \n (number of Canadian residents)") +
scale_x_log10(labels = label_comma()) +
scale_y_log10(labels = label_comma())
ggplot(can_lang, aes(x = most_at_home, y = mother_tongue)) +
geom_point() +
xlab("Language spoken most at home \n (number of Canadian residents)") +
ylab("Mother tongue \n (number of Canadian residents)") +
scale_x_continuous(labels = label_comma()) +
scale_y_continuous(labels = label_comma())
library(ggplot2)
library(gganimate)
install.packages("gganimate")
library(ggplot2)
library(gganimate)
library(dplyr)
library(gifski)  # For rendering the animation
# Simulate exponential growth data
set.seed(123)
data <- expand.grid(time = 1:100, group = LETTERS[1:5]) %>%
mutate(value = 10^(time / 20) * runif(n(), 0.8, 1.2))  # Exponential growth with randomness
p <- ggplot(data, aes(x = time, y = value, color = group)) +
geom_line(size = 1.2) +  # Draw lines for each group
scale_y_log10() +  # Log-transform the y-axis
labs(title = "Exponential Growth on a Log Scale",
subtitle = "Time vs. Value",
x = "Time",
y = "Value") +
theme_minimal(base_size = 14) +
theme(legend.position = "right")
animated_plot <- p +
transition_reveal(time)  # Lines gradually appear over time
# Render the animation
animate(animated_plot, width = 800, height = 500, fps = 20, renderer = gifski_renderer())
library(ggplot2)
library(gganimate)
library(dplyr)
library(gifski)  # For rendering the animation
# Simulate exponential growth data
set.seed(123)
data <- expand.grid(time = 1:100, group = LETTERS[1:5]) %>%
mutate(value = 10^(time / 20) * runif(n(), 0.8, 1.2))  # Exponential growth with randomness
p <- ggplot(data, aes(x = time, y = value, color = group)) +
geom_line(size = 1.2) +  # Draw lines for each group
scale_y_log10() +  # Log-transform the y-axis
labs(title = "Exponential Growth on a Log Scale",
subtitle = "Time vs. Value",
x = "Time",
y = "Value") +
theme_minimal(base_size = 14) +
theme(legend.position = "right")
animated_plot <- p +
transition_reveal(time)  # Lines gradually appear over time
# Render the animation
animate(animated_plot, width = 800, height = 500, fps = 20, renderer = gifski_renderer())
