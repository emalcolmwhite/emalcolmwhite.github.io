[
  {
    "objectID": "CV/index.html",
    "href": "CV/index.html",
    "title": "Curriculum vitae",
    "section": "",
    "text": "Download current CV"
  },
  {
    "objectID": "courses/math103/index.html",
    "href": "courses/math103/index.html",
    "title": "EMW",
    "section": "",
    "text": "More Coming Soon!"
  },
  {
    "objectID": "courses/math103/index.html#math-103-functions",
    "href": "courses/math103/index.html#math-103-functions",
    "title": "EMW",
    "section": "",
    "text": "More Coming Soon!"
  },
  {
    "objectID": "courses/stat0118/118_E_ggplot_2_homework.html",
    "href": "courses/stat0118/118_E_ggplot_2_homework.html",
    "title": "STAT 118: Homework E",
    "section": "",
    "text": "Code\n#LOAD PACKAGES \nlibrary(tidyverse)\n\n\nTo the best of your ability, recreate the following plots from the penguins dataset. Focus your efforts on getting the content correct. If you have time at the end, as a bonus, you can try to match the styling as closely as you can.\n\n1. Iris Side-by-Side Boxplot\n\n\n\nCode\n#load the iris dataset\ndata(\"iris\")\n\n\n\n\n2. Gapminder Barplot\n\n\n\nCode\n#load the gapminder dataset\nlibrary(gapminder)\ndata(\"gapminder\")\n\n\n\n\n3. Gapminder Line Graph\n\n\n\nCode\nlibrary(ggthemes) # you might need this to help with the theme... \n\n\n\n\n4. Penguins Histogram\n\n\n\nCode\n#Load Penguins Data\nlibrary(palmerpenguins)\ndata(\"penguins\")"
  },
  {
    "objectID": "courses/stat0118/118_D_ggplot_homework.html",
    "href": "courses/stat0118/118_D_ggplot_homework.html",
    "title": "STAT 118: Homework D",
    "section": "",
    "text": "Code\n#make sure the package is installed on your computer or this won't run! \nlibrary(tidyverse)\n\n\n\n\nCode\n#load the gapminder data for this lab\nlibrary(gapminder)\ndata('gapminder')\n\n\n\n1.\nPick a year. Create a dataset which only contains that data for that year and is appropriately labeled. For example, if you choose the year 2007, you might choose to call this new dataset gapminder2007. You will use this dataset for the rest of the assignment.\n\n\n2.\nUsing your dataset you created in 1, create a barplot which displays the GDP per capita of the ten countries with the highest GDP per capita that year. Be sure your axes are appropriately labeled.\n\n\n3.\nPick a continent. Using your dataset you created in 1, create a barplot which displays the life expectancy of all the countries in that continent in that year. You should sort the countries from highest life expectancy to lowest life expectancy. Be sure your axes are appropriately labeled.\n\n\n4.\n\n\nCode\n#Load Penguins Data\nlibrary(palmerpenguins)\ndata(\"penguins\")\n\n\nTo the best of your ability, recreate the following plot from the penguins dataset. Focus your efforts on getting the content correct. If you have time at the end, as a bonus, you can try to match the styling as closely as you can. \nThis image will also be available on the Canvas assignment (in case this link/preview don’t work for you)."
  },
  {
    "objectID": "courses/stat0118/118_R_lubridate.html",
    "href": "courses/stat0118/118_R_lubridate.html",
    "title": "Working with dates using lubridate",
    "section": "",
    "text": "Date Formats\nThink of how many different formats you know of to format a date:\n\n2023 07 06\nWed, Jun 7, 2023\n07-06-23\n06-07-23 14:55 ET\n06/07/2023 2:55pm\n\nYikes!\n\n\nDate, Time, and Datetime\nDate/time data are data that conveys information about, you guessed it, date and/or time! There are three relevant data types when we talk about date/time data:\n\nDate - only has the date (e.g. 2020-05-15)\nTime - only has the time (e.g. 20:45:00)\nDatetime - has both the date and time (e.g. 2020-05-15 20:45:00)\n\n\n\nLubridate\n\n\n\nArtwork by @allisonhorst\n\n\n\n#LOAD PACKAGES \nlibrary(tidyverse)\nlibrary(lubridate)\n\n\n\nStandard Date Format\nThe ymd() function transforms data in all kinds of different formats into a standardized date format displaying year, then month, then day.\n\nymd(\"06 02 04\")\n\n[1] \"2006-02-04\"\n\nymd(\"06/02/04\")\n\n[1] \"2006-02-04\"\n\nymd(\"20060204\")  # works as well\n\n[1] \"2006-02-04\"\n\nymd(\"2006 2 4\")\n\n[1] \"2006-02-04\"\n\nymd(060204)  # works with numbers\n\n[1] \"2006-02-04\"\n\n\nmdy() (month day year) and dmy() (day month year) formats also exist.\n\nymd_hms(\"2020-04-01 10:30:13\")\n\n[1] \"2020-04-01 10:30:13 UTC\"\n\nymd_hm(\"2020/04/01 10.30\")\n\n[1] \"2020-04-01 10:30:00 UTC\"\n\n\n\n\nSolar Data\nShoal Marine Lab (SML) is a remote field station located on Appledore Island, Maine jointly operated by Cornell University and the University of New Hampshire. The island is powered primarily by solar power.\n\n#read in Data\npower &lt;- read.csv(\"data/power.csv\")\n\nWhat format is the date in?\n\n\n\n\n\n\nWarning\n\n\n\nWhat happens if we try to make a line plot with the date in this format?\n\npower %&gt;% \n  ggplot(aes(x=Date, y=power_kW)) +\n  geom_line()\n\n\n\n\nYikes!\n\n\nWe need to put it in standardized date format first:\n\npower &lt;- power %&gt;% \n  mutate(Date = mdy_hm(Date))  \n\nStandardized Format helps us to create time series plots very easily!\n\npower %&gt;% \n  ggplot(aes(x=Date, y=power_kW)) +\n  geom_line()\n\n\n\n\n\n\nPicking out information\n\n\n\nArtwork by @allisonhorst\n\n\nSometimes we need to pick out year, month, date so we can filter, sort, etc.\n\npower &lt;- power %&gt;% \n  mutate(Year = year(Date)) %&gt;%   \n  mutate(Month = month(Date)) %&gt;% \n  mutate(Day = day(Date))\n\nSuppose we only want the time series plot for June 1:\n\npower %&gt;% \n  filter(Month == \"6\") %&gt;%\n  filter(Day == \"1\") %&gt;% \n  ggplot(aes(x=Date, y=power_kW)) +\n  geom_line()\n\n\n\n\n\n\nPortal Data\nThe Portal Project is a long-term ecological study being conducted near Portal, AZ. Since 1977, the site has been used to study the interactions among rodents, ants and plants and their respective responses to climate.\n\n#LOAD DATA\nportal_rodent &lt;- read.csv(\"https://github.com/weecology/PortalData/raw/main/Rodents/Portal_rodent.csv\")\n\nUnfortunately, because the information about datetime is divided up into different columns, R does not recognize it as date/time data. What we need to do is combine and convert all of these columns into datetime. To do this, we can use the function make_datetime()\n\nportal_rodent &lt;- portal_rodent %&gt;% \n  mutate(datetime = make_datetime(year, month, day))"
  },
  {
    "objectID": "courses/stat0118/118_F_ggplot_3.html",
    "href": "courses/stat0118/118_F_ggplot_3.html",
    "title": "Customizing Plots",
    "section": "",
    "text": "library(tidyverse)\n#Import the can_lang dataset \ncan_lang &lt;- read.csv(\"https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv\")"
  },
  {
    "objectID": "courses/stat0118/118_F_ggplot_3.html#logarithmic-axes-transformations",
    "href": "courses/stat0118/118_F_ggplot_3.html#logarithmic-axes-transformations",
    "title": "Customizing Plots",
    "section": "Logarithmic Axes Transformations",
    "text": "Logarithmic Axes Transformations\n\n\n\n\n\n\nApplying a Log Transformation\n\n\n\nWhen you apply a log transformation to an axis (or both axes) in a plot, you convert values using a logarithmic scale instead of a linear scale. This means:\n\nInstead of evenly spaced values (1, 2, 3, 4, …), a logarithmic scale spaces values exponentially (1, 10, 100, 1000, …).\nThe distance between ticks represents a multiplicative factor instead of an additive one.\n\n\n\n\n\n\nSee how much more clearly we can see all the points!\n\n\nFor you to do this yourself, you need to use scale_*_log10() instead of scale_*_continuous():\n\ncan_lang_plot +\n1  scale_x_log10(labels = label_comma()) +\n2  scale_y_log10(labels = label_comma())\n\n\n1\n\nconverts x-axis to a log-scale\n\n2\n\nconverts y-axis to a log-scale\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse ✅ scale_*_log10() instead of 🚫log(variable)"
  },
  {
    "objectID": "courses/stat0118/118_F_ggplot_3.html#using-percents-on-a-log-scale",
    "href": "courses/stat0118/118_F_ggplot_3.html#using-percents-on-a-log-scale",
    "title": "Customizing Plots",
    "section": "Using percents on a log scale",
    "text": "Using percents on a log scale\n\nmutate to create new columns with percentage of Canadians who speak the language as their mother tongue:\n\ncan_lang &lt;- can_lang %&gt;%\n  mutate(\n    mother_tongue_percent = (mother_tongue / 35151728) * 100,\n    most_at_home_percent = (most_at_home / 35151728) * 100\n  )\n\n\n\nScatterplot with Percents and Colors\nCreate a scatterplot with most_at_home_percent and mother_tongue_percent. Vary the color and shape of the points depending on the category of language. You may need to adjust the position of the legend:\n\n1can_lang_percent_plot &lt;- ggplot(can_lang, aes(x = most_at_home_percent,\n2                     y = mother_tongue_percent )) +\n3  geom_point(aes(color = category, shape=category), alpha=0.5) +\n  xlab(\"Language spoken most at home \\n (percentage of Canadian residents)\") +\n  ylab(\"Mother tongue \\n (percentage of Canadian residents)\") +\n4  theme(legend.position = \"top\", legend.direction = \"vertical\") +\n  scale_x_log10(labels = comma) +\n  scale_y_log10(labels = comma)\n\ncan_lang_percent_plot \n\n\n1\n\nUse most_at_home_percent as the x-axis\n\n2\n\nUse mother_tongue_percent as as the y-axis\n\n3\n\nvary the shape and the color based on the category of language. Note this is included in the aesthetics of the points. It also would have been okay to put these directly inside the global aesthetics (ggplot(aes(...))) so that these characteristics apply to any layers.\n\n\n4\n\nAdjusts the position of the legend"
  },
  {
    "objectID": "courses/stat0118/118_F_ggplot_3.html#using-ggrepel",
    "href": "courses/stat0118/118_F_ggplot_3.html#using-ggrepel",
    "title": "Customizing Plots",
    "section": "Using ggrepel",
    "text": "Using ggrepel\n\n\n\nArtwork by @allisonhorst\n\n\n\nlibrary(ggrepel)\n\ncan_lang_percent_plot + \n  geom_text_repel(aes(label=language), max.overlaps = Inf)"
  },
  {
    "objectID": "courses/stat0118/118_F_ggplot_3.html#subset-the-labels",
    "href": "courses/stat0118/118_F_ggplot_3.html#subset-the-labels",
    "title": "Customizing Plots",
    "section": "Subset the labels",
    "text": "Subset the labels\nCreate a new column for the labels. Use case_when (or ifelse) to only use the official language names and not to put a label for other language categories.\n\ncan_lang &lt;- can_lang %&gt;% \n  mutate(official_languages = case_when(category == \"Official languages\" ~ language, TRUE ~ NA ))\n\n\n# We need to redo the base plot with the new can_lang dataset with the new official_languages column in it \ncan_lang_percent_plot &lt;- ggplot(can_lang, aes(x = most_at_home_percent,  y = mother_tongue_percent)) +\n  geom_point(aes(color = category, shape=category)) +\n  xlab(\"Language spoken most at home \\n (percentage of Canadian residents)\") +\n  ylab(\"Mother tongue \\n (percentage of Canadian residents)\") +\n  theme(legend.position = \"top\", legend.direction = \"vertical\") + \n  scale_x_log10(labels = comma) +\n  scale_y_log10(labels = comma)\n\n\ncan_lang_percent_plot + \n  geom_text_repel(aes(label=official_languages, min.segment.length=0, box.padding=1))"
  },
  {
    "objectID": "courses/stat0118/118_project_template.html",
    "href": "courses/stat0118/118_project_template.html",
    "title": "YOUR WITTY TITLE HERE",
    "section": "",
    "text": "Code\n#LOAD PACKAGES\nlibrary(tidyverse)\n\n\n\nIntroduction\n\n\nResults\n\n\nDiscussion\n\n\nAuthor Contributions\n\n\nReferences\n\n\nSupplemental Materials"
  },
  {
    "objectID": "courses/stat0118/118_I_joining_homework.html",
    "href": "courses/stat0118/118_I_joining_homework.html",
    "title": "STAT 118: Homework I",
    "section": "",
    "text": "Code\n#LOAD PACKAGES \nlibrary(tidyverse)\n\n#Load gapminder data\nlibrary(gapminder)\ndata(gapminder)\n\n\n\n0.\nDownload the co2.csv file from Canvas. Import the dataset into this assignment in a dataframe called co2.\n\n\n1.\nUse your brain and skills to figure out what the code below is doing. Add a sentence describing what this does.\n\n\nCode\ncountry_continent &lt;- gapminder %&gt;% \n  select(country, continent) %&gt;% \n  distinct()\n\n\n\n\n2.\nWhat columns do country_continent and co2 have in common? (This is your key)\n\n\n3.\nWhat columns does country_continent have that co2 doesn’t?\n\n\n4.\nWhat columns does co2 have that country_continent doesn’t?\n\n\n5.\nCreate a new table called co2_joined, which includes all columns from co2 in addition to the column continent. To start, use inner_join(). Make a note of how many rows you have in the new table, and compare it with the original tables.\n\n\n6.\nCreate a new table called co2_joined_left, which includes all columns from co2 in addition to the column continent but this time use left_join() instead of inner_join(). Make a note of how many rows you have in the new table, and compare it with the original tables.\n\n\n7.\nWhat columns do gapminder and co2 have in common?\n\n\n8.\nWhat columns does gapminder have that co2 doesn’t?\n\n\n9.\nWhat columns does co2 have that gapminder doesn’t?\n\n\n10.\nCreate a new table called gapminder_joined, which includes all rows from both tables joined together by their common variable keys (use inner_join()). Make a note of how many rows you have in the new table, and compare it with the original tables.\n\n\n11.\nUse the anti_join() function to identify which rows (if any) in the gapminder dataset do NOT have a match in out co2 dataset.\n\n\n12.\nUse the anti_join() function to identify which rows (if any) in the co2 dataset do NOT have a match in out gapminder dataset.\n\n\n13.\nUse gapminder_joined to create a scatterplot of gdpPercap vs. co2_emissions_pc."
  },
  {
    "objectID": "courses/stat0118/118_B_wrangling_notes.html",
    "href": "courses/stat0118/118_B_wrangling_notes.html",
    "title": "Wrangling Basics",
    "section": "",
    "text": "Installing and Using Packages\n\nlibrary(tidyverse) \n\nToday we are specifically going to be talking about the package dplyr which is useful to manipulating data sets.\n\n\ncan_lang dataset\nIn this class, we are going to be working with a dataset relating to the languages spoken at home by Canadian residents. Many Indigenous peoples exist in Canada with their own languages and cultures. Sadly, colonization has led to the loss of many of these languages. This data is a subset of data collected during the 2016 census.\n\n\nImporting Data\nWhat is a .csv file?\nHow do we import it into R?\nUse read.csv()! Note that your data file (.csv) needs to be saved in the same folder as your notes template document (.qmd).\n\n#can_lang &lt;- read.csv(\"can_lang.csv\") \n\nAlternatively, you can download it directly from the internet. Github user ttimbers hosts this file to share with the public at the link: https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv\n\n#can_lang &lt;- read.csv(\"https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv\") \n\nLet’s take a look at this data for a minute to see what information has been recorded. In the environment in the top left, if you click on the word can_lang (not the blue play button, the word itself) it will open the object so you can see what is saved inside.\n\n\nfilter()\nWe can use the filter function to extract rows from the data that have a particular characteristic.\nFor example, we may be interested in only looking at only the languages in this dataset that are Aboriginal languages.\nOftentimes, we want to take our subset and give it a new name. This takes our subset and assigns it to a new dataset called aboriginal_lang.\nSuppose we want a list of all the languages in Canada that are spoken by less than 100 people as their mother tongue.\nThe logical operators are given below:\n\n\n\nOperator\nDescription\n\n\n\n\n&lt;\nLess than\n\n\n&gt;\nGreater than\n\n\n&lt;=\nLess than or equal to\n\n\n&gt;=\nGreater than or equal to\n\n\n==\nEqual to\n\n\n!=\nNot equal to\n\n\n!x\nNot x\n\n\nx | y\nx OR y\n\n\nx & y\nx AND y\n\n\n\n\n\nselect()\nselect is used to extract only certain columns. For example, perhaps we only want to print out a list names of the aboriginal languages (language column).\nWe can combine criteria together as well in one command with multiple pipes:\n\n\narrange()\nThe arrange function allows us to order the rows of the data frame by the values of a particular column.\nFor example, arrange all the aboriginal languages in canada by from most to least spoken as mother tongue.\nNote:\n\nuse arrange(variable) to go from least to most\nuse arrange(desc(variable)) to go from most to least, arrange(-variable) also works\n\n\n\nslice()\nThe slice function will allow us to pick only a subset of the rows based on their numeric order (1st through last).\nFor example, if I want a list of the 10 most commonly spoken aboriginal languages.\n\n\nmutate()\nmutate() creates new columns that are functions of existing variables.\nFor example, if I want to create a new column called mother_tongue_K which represents the number of people who speak the language their mother tongue in thousands. You may want to save this new dataset over top of the original dataset so you could use this new column in the future.\nThis can be useful for unit conversions. It also be useful for making new calculations based on existing data (for example, price and number of square feet could be used to calculate price per square foot)."
  },
  {
    "objectID": "courses/stat0118/118_G_maps_homework.html",
    "href": "courses/stat0118/118_G_maps_homework.html",
    "title": "STAT 118: Homework G",
    "section": "",
    "text": "Code\n#LOAD PACKAGES \nlibrary(tidyverse)\nlibrary(sf) #this is a package needed so R can work with sf objects\n\n\n\n\nCode\n#LOAD DATA\nlibrary(spData) #this packages contains the dataset (with sf objects) that we will be using today\ndata(\"us_states\")\n\nlibrary(rnaturalearth)\nworld &lt;- ne_countries(scale = \"medium\", returnclass = \"sf\")\nafrica &lt;- world[world$continent == \"Africa\", ]\n\n\n\n1.\nCreate a basic map of the countries of the world. To access sf geometries for the world use the world dataset loaded above. The land should be some shade of green.\n\n\n2.\nUse the columns pop_est and gdp_md to create a new column called gdp_per_cap which contains the GDP per capita for each country in the world in this dataset.\n\n\n3.\nCreate a cloropleth map which colors each country depending on the GDP per capita.\n\nUtilize an appropriate color palette for this data\nAdd a theme\nmake sure the legend labels are clear to a general audience (you might need to research this a bit…)\nthe country borders should be “black”\n\n\n\n4.\nCreate a cloropleth map which colors each country based on their economy type (economy).\n\nUtilize an appropriate color palette for this data\nAdd a theme\nmake sure the legend labels are clear to a general audience (you might need to research this a bit…)\nthe country borders should be “grey”\n\n` # 5.\nCreate a cloropleth map of Africa based on the population in each country. Use scale_fill_viridis_c(option = \"viridis\").\n\n\n6.\nCreate a cloropleth map of Africa based on the population in each country. Use scale_fill_viridis_c(option = \"viridis\", trans = \"log\").\n\n\n7.\nWhy is the trans = “log” transformation applied?\n\n\n8.\nAdd country names to your map from #6."
  },
  {
    "objectID": "courses/stat0118/118_A_intro.html",
    "href": "courses/stat0118/118_A_intro.html",
    "title": "Quarto & Markdown Formatting",
    "section": "",
    "text": "If you type…\nOutput\n\n\n\n\n*italics*\nitalics\n\n\n**bold**\nbold\n\n\n***bold italics***\nbold italics\n\n\n- chai tea\n- green tea\n- earl grey tea\n\nchai tea\ngreen tea\nearl grey tea\n\n\n\n[this is the text that will display](www.google.com)\nthis is the text that will display\n\n\n![a caption here](jellyfish.jpg)\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nA comprehensive list of markdown syntax can be found at https://quarto.org/docs/authoring/markdown-basics.html."
  },
  {
    "objectID": "courses/stat0118/118_A_intro.html#centered-and-large-equations",
    "href": "courses/stat0118/118_A_intro.html#centered-and-large-equations",
    "title": "Quarto & Markdown Formatting",
    "section": "Centered and large equations",
    "text": "Centered and large equations\nType in the plain text section:\n$$y=\\frac{x^2}{SE(x^2)} $$\nDisplays as:\n\\[y=\\frac{x^2}{SE(x^2)} \\]\nHint: Some people like to use the visual editor to insert equations"
  },
  {
    "objectID": "courses/stat0118/118_A_intro.html#inline-equations",
    "href": "courses/stat0118/118_A_intro.html#inline-equations",
    "title": "Quarto & Markdown Formatting",
    "section": "Inline equations",
    "text": "Inline equations\nType in the plain text section:\nWe take and calculate the standard error $SE(x_1)$.\nDisplays as:\nWe take and calculate the standard error \\(SE(x_1)\\)."
  },
  {
    "objectID": "courses/stat0118/118_A_intro.html#inline-code",
    "href": "courses/stat0118/118_A_intro.html#inline-code",
    "title": "Quarto & Markdown Formatting",
    "section": "Inline code",
    "text": "Inline code\nType in the plain text section:\nThis is a sentence. The value of x is `r x`\nDisplays as:\nThis is a sentence. The value of x is 11."
  },
  {
    "objectID": "courses/stat0118/118_B_wrangling_homework.html",
    "href": "courses/stat0118/118_B_wrangling_homework.html",
    "title": "STAT 118: Homework B",
    "section": "",
    "text": "Code\n#LOAD PACKAGES\nlibrary(tidyverse)\n\n\nThis assignment concerns the gapminder dataset which is available in the gapminder package.\nFirst, Download gapminder from the menu at the right. You only need to do this once. Once it has been download, you need to call it using the code below.\n\n\nCode\n# LOAD DATA SET\nlibrary(gapminder)\ndata(gapminder) \n\n\nIf you want to view this data, click on the word gapminder in your environment and it should open up\n\n\n\n\n\n\nTip\n\n\n\nThere are often many different ways to get to the right answer on this assignment! I don’t care how you get the answer. I care that you are clearly explaining how you got your answer – either by showing any code you used or explaining in words how you got to the answer you did.\n\n\n\n\n\n\n\n\nTip\n\n\n\nIn the problems below, I have not given you any blank R chunks. If you wish to use some R code to answer the problem, you can add your own R chunk – either by typing it directly OR going to Code –&gt; Insert Chunk in the top menu.\n\n\n\n1.\nHow many rows and columns does this dataset have?\n\n\n2.\nWhat are the names of the 6 columns?\n\n\n3.\nCreate a dataset called gapminder2002 which only contains information for each of the countries in 2002.\n\n\n4.\nIf you instead try to choose the subset with year equal to 2005, something will go wrong. Try it and explain what happens and why.\n\n\n5.\nPrint out the row of data corresponding to the US in 2002.\n\n\n6.\nIn the above problem, you would have put quotes around United States but not around 2002. Explain why.\n\n\n7.\nWhich country had a higher life expectancy in 1977: Japan or Ireland? Note there are many different possible correct ways of solving this. You just need to find one\n\n\n8.\nWhat is the lowest life expectancy in the gapminder dataset? Which country and year does it correspond to?\n\n\n9.\nFor the year 2002, print out a list of the top 10 countries with the highest life expectancy. They should be ordered from highest life expectancy to 10th highest life expectancy. You should only display the countries name and life expectancy (and no other data)."
  },
  {
    "objectID": "courses/stat0118/118_B_wrangling.html",
    "href": "courses/stat0118/118_B_wrangling.html",
    "title": "Wrangling Basics",
    "section": "",
    "text": "Sometimes everything we need (data, functions, etc) are not available in base R. In R, expert users will package up useful things like data and functions into packages that be download and used.\nFirst, you need to download the package from the right hand menu –&gt; You only need to do this once.\nIn each new .qmd document, you need to call any packages you want to use but adding the code library(packagename) inside an R chunk.\n\n\nIn this class we will use the tidyverse package a lot.\n\n1library(tidyverse)\n\n\n1\n\nLoads the tidyverse package\n\n\n\n\nThere are actually many commonly used packages wrapped up inside one tidyverse package.\n\n\n\nCredit: https://uopsych-r-bootcamp-2020.netlify.app/\n\n\nToday we are specifically going to be talking about the package dplyr which is useful to manipulating data sets."
  },
  {
    "objectID": "courses/stat0118/118_B_wrangling.html#the-tidyverse-package",
    "href": "courses/stat0118/118_B_wrangling.html#the-tidyverse-package",
    "title": "Wrangling Basics",
    "section": "",
    "text": "In this class we will use the tidyverse package a lot.\n\n1library(tidyverse)\n\n\n1\n\nLoads the tidyverse package\n\n\n\n\nThere are actually many commonly used packages wrapped up inside one tidyverse package.\n\n\n\nCredit: https://uopsych-r-bootcamp-2020.netlify.app/\n\n\nToday we are specifically going to be talking about the package dplyr which is useful to manipulating data sets."
  },
  {
    "objectID": "courses/stat0118/118_H_forcats_notes.html",
    "href": "courses/stat0118/118_H_forcats_notes.html",
    "title": "forcats: working with categorical data",
    "section": "",
    "text": "The R package forcats is designed to make working with categorical variables easier and more efficient. It provides a set of functions that allow you to manipulate and analyze categorical data with ease. In this lesson, we’ll cover the basics of the forcats package and some of its most useful functions."
  },
  {
    "objectID": "courses/stat0118/118_H_forcats_notes.html#categorical-variables",
    "href": "courses/stat0118/118_H_forcats_notes.html#categorical-variables",
    "title": "forcats: working with categorical data",
    "section": "Categorical Variables",
    "text": "Categorical Variables\nLet’s review what categorical data is. Categorical data is a type of data that consists of categories or labels.\nExamples of categorical data include:\n\nColors (red, blue, green, etc.)\nTypes of vehicles (sedan, SUV, truck)\nEducational degrees (high school, college, graduate school)\n\nCategorical data can be further divided into two types: nominal and ordinal. Nominal data consists of categories that have no inherent order, while ordinal data consists of categories that have a natural order. For example, educational degrees are ordinal data because they can be ordered from least to most advanced."
  },
  {
    "objectID": "courses/stat0118/118_H_forcats_notes.html#mpg-data",
    "href": "courses/stat0118/118_H_forcats_notes.html#mpg-data",
    "title": "forcats: working with categorical data",
    "section": "mpg Data",
    "text": "mpg Data\nWe will play with different functions in the forcats packages using the mpg dataset from earlier in the semester.\n\nlibrary(forcats)\nlibrary(tidyverse)\ndata(\"mpg\")\n\nRecall our side-by-side boxplot:\n\nmpg %&gt;% \n  ggplot(aes(x=class, y=hwy)) +\n  geom_boxplot()"
  },
  {
    "objectID": "courses/stat0118/118_H_forcats_notes.html#reordering-factor-levels",
    "href": "courses/stat0118/118_H_forcats_notes.html#reordering-factor-levels",
    "title": "forcats: working with categorical data",
    "section": "Reordering Factor Levels",
    "text": "Reordering Factor Levels\nOne of the most useful functions is fct_relevel(), which allows you to reorder the levels of a factor. This can be useful when you want to change the default ordering of the levels or when you want to group certain levels together.\nIs class a factor?\nLet’s make it a factor!\nLet’s check the levels and their current ordering!\nTo reorder the levels with fct_relevel()\nLet’s recreate our side-by-side boxplot now:\n\nmpg %&gt;% \n  ggplot(aes(x=class, y=hwy)) +\n  geom_boxplot()\n\n\n\n\nRather than reordering them manually by typing the order, you could also re-level by some numeric criteria using fct_reorder(). For example:"
  },
  {
    "objectID": "courses/stat0118/118_H_forcats_notes.html#renaming-factor-levels-with-fct_recode",
    "href": "courses/stat0118/118_H_forcats_notes.html#renaming-factor-levels-with-fct_recode",
    "title": "forcats: working with categorical data",
    "section": "Renaming Factor levels with fct_recode",
    "text": "Renaming Factor levels with fct_recode\nSometimes you might not like the way the levels are named."
  },
  {
    "objectID": "courses/stat0118/118_H_forcats_notes.html#factor-collapsing-with-fct_collapse",
    "href": "courses/stat0118/118_H_forcats_notes.html#factor-collapsing-with-fct_collapse",
    "title": "forcats: working with categorical data",
    "section": "Factor Collapsing with fct_collapse()",
    "text": "Factor Collapsing with fct_collapse()\nLet’s say we wanted to create only two categories – cars and larger vehicles."
  },
  {
    "objectID": "courses/stat0118/118_H_forcats_notes.html#lumping-into-an-other-category",
    "href": "courses/stat0118/118_H_forcats_notes.html#lumping-into-an-other-category",
    "title": "forcats: working with categorical data",
    "section": "Lumping into an other category",
    "text": "Lumping into an other category\n\nfct_lump_min(): lumps levels that appear fewer than min times.\nfct_lump_prop(): lumps levels that appear in fewer than (or equal to) prop * n times.\nfct_lump_n() lumps all levels except for the n most frequent (or least frequent if n &lt; 0)\n\n\ntable(mpg$manufacturer)\n\n\n      audi  chevrolet      dodge       ford      honda    hyundai       jeep \n        18         19         37         25          9         14          8 \nland rover    lincoln    mercury     nissan    pontiac     subaru     toyota \n         4          3          4         13          5         14         34 \nvolkswagen \n        27 \n\n\nLet’s say we wanted only the manufacturers with at least 15 cars produced. Everything else we want to just be other:\nCreate a table using kableExtra:"
  },
  {
    "objectID": "courses/stat0118/118_C_aggregating_notes.html",
    "href": "courses/stat0118/118_C_aggregating_notes.html",
    "title": "Aggregating data",
    "section": "",
    "text": "#LOAD PACKAGES \nlibrary(tidyverse)"
  },
  {
    "objectID": "courses/stat0118/118_C_aggregating_notes.html#remove-rows-with-missing-data-with-drop_na",
    "href": "courses/stat0118/118_C_aggregating_notes.html#remove-rows-with-missing-data-with-drop_na",
    "title": "Aggregating data",
    "section": "Remove rows with missing data with drop_na()",
    "text": "Remove rows with missing data with drop_na()\n\n\n\n\n\n\nWarning\n\n\n\nIs it appropriate to remove rows with missing data? How many rows have missing data? Do the missing rows have something in common?\nRemoving rows can affect the validity and generalizability of your analysis!"
  },
  {
    "objectID": "courses/stat0118/118_C_aggregating_notes.html#multiple-groups",
    "href": "courses/stat0118/118_C_aggregating_notes.html#multiple-groups",
    "title": "Aggregating data",
    "section": "Multiple Groups",
    "text": "Multiple Groups\nSuppose we wish to have the average bill length and average bill depth broken down by sex AND species:"
  },
  {
    "objectID": "courses/stat0118/118_missing_data.html",
    "href": "courses/stat0118/118_missing_data.html",
    "title": "Some notes on missing data",
    "section": "",
    "text": "If the data isn’t missing completely at random (MCAR), you might systematically lose information from a particular subgroup. For example, if respondents with lower incomes are less likely to answer a survey question about income, the overall average income could be overestimated.\n\nMissing values in key variables can distort summary statistics (mean, median, variance) and lead to misinterpretations of the underlying distribution.\nIn time series plots, missing data points can create gaps or misleading trends. For example, if sales data is missing for several months, a line chart might falsely suggest a sharp drop or spike.\nVisualizations like heatmaps or choropleth maps may display blank areas or irregular patterns if underlying data is missing. This might lead to incorrect conclusions about regional performance or density.\nIn plots comparing groups, if one group has more missing data than another, the comparisons might be skewed."
  },
  {
    "objectID": "courses/stat0118/118_missing_data.html#deletion-if-appropriate",
    "href": "courses/stat0118/118_missing_data.html#deletion-if-appropriate",
    "title": "Some notes on missing data",
    "section": "Deletion (if appropriate)",
    "text": "Deletion (if appropriate)\n\nListwise deletion (Complete-case analysis): Remove rows with missing values.\n\nr drop_na()\nBest for missing at random data and when missing values are minimal.\nNot ideal if a large portion of data is lost.\n\nPairwise deletion: Use available data in analyses without deleting entire rows.\n\nr drop_na(var1, var2)"
  },
  {
    "objectID": "courses/stat0118/118_missing_data.html#imputation-filling-in-missing-values",
    "href": "courses/stat0118/118_missing_data.html#imputation-filling-in-missing-values",
    "title": "Some notes on missing data",
    "section": "Imputation (Filling in Missing Values)",
    "text": "Imputation (Filling in Missing Values)\n\nMean/Median/Mode Imputation: Replace missing values with the mean, median, or mode of the column.\n\nBest for numerical data with few missing values.\n\nForward/Backward Fill (Time Series Data): Fill missing values using previous or next observed values.\nK-Nearest Neighbors (KNN) Imputation: Estimate missing values using similar observations. (Take STAT 218: Statistical Learning)"
  },
  {
    "objectID": "courses/stat0118/118_missing_data.html#use-models-to-predict-missing-values",
    "href": "courses/stat0118/118_missing_data.html#use-models-to-predict-missing-values",
    "title": "Some notes on missing data",
    "section": "Use Models to Predict Missing Values",
    "text": "Use Models to Predict Missing Values\n\nRegression-based imputation: Predict missing values using other variables.(Take STAT 211: Regression or ECON 211: Regression)\nMachine learning approaches: Use decision trees or random forests to fill in missing values.(Take STAT 218: Statistical Learning and/or CSCI 451: Machine Learning )"
  },
  {
    "objectID": "courses/stat0118/118_A_intro_quarto.html",
    "href": "courses/stat0118/118_A_intro_quarto.html",
    "title": "Intro to R and RStudio",
    "section": "",
    "text": "You will need to follow the directions available at https://posit.co/download/rstudio-desktop/ to download both R and RStudio.\n\n\n\nCredit: moderndive\n\n\nR (The brain behind it all)\n\nR is the actual programming language and the computational engine that performs all the calculations, data analysis, and visualizations.\nWithout R, there’s no way to run your code or perform any data analysis tasks.\nWorking in base R is possible, but it’s\n\nRStudio (The interface you work with)\nRStudio is an IDE (Integrated Development Environment) that gives you a user-friendly interface to write and run your R code.\n\n\n\n\n\n\nTip\n\n\n\nThink of it like this:1\n\nR is the engine of a car that powers the vehicle,\nRStudio is the dashboard, steering wheel, and GPS that help you control and navigate the car.\nYou need both for a smooth ride! 🚗\n\n\n\nWhen you open RStudio, you should see something similar to this:"
  },
  {
    "objectID": "courses/stat0118/118_A_intro_quarto.html#open-your-.qmd-file-in-rstudio",
    "href": "courses/stat0118/118_A_intro_quarto.html#open-your-.qmd-file-in-rstudio",
    "title": "Intro to R and RStudio",
    "section": "1️⃣ Open Your .qmd File in RStudio",
    "text": "1️⃣ Open Your .qmd File in RStudio\nNavigate to the file on your local computer and click to open it!\n\nSome folks prefer to use the “Files” tab within RStudio to navigate to the file\nOther folks prefer to interact with their files in their typical way (Using Finder on Mac or File Explorer on PC)\n\nEither way works just fine!"
  },
  {
    "objectID": "courses/stat0118/118_A_intro_quarto.html#install-quarto-in-rstudio",
    "href": "courses/stat0118/118_A_intro_quarto.html#install-quarto-in-rstudio",
    "title": "Intro to R and RStudio",
    "section": "2️⃣ Install Quarto in RStudio",
    "text": "2️⃣ Install Quarto in RStudio\nOption 1: Using the RStudio Interface\n\nGo to the Packages pane in RStudio (bottom-right by default),\nClick Install,\nIn the box that appears:\n\nEnter the package name (quarto),\n\nMake sure Install dependencies is checked,\nClick Install.\n\n\n\nOption 2: Using R Code in the Console\n\ninstall.packages(\"quarto\")"
  },
  {
    "objectID": "courses/stat0118/118_A_intro_quarto.html#render-and-preview",
    "href": "courses/stat0118/118_A_intro_quarto.html#render-and-preview",
    "title": "Intro to R and RStudio",
    "section": "3️⃣ Render and Preview",
    "text": "3️⃣ Render and Preview\nClick the Render button () at the top-right of your RStudio editor window.\nTada! You now have created a .html file!\nThe file has been created in the same folder as your .qmd file: \nWhen you render, a preview of the document will show up!\n\n\n\n\n\n\nTip\n\n\n\nBy default, the preview of .html will pop up in your web browser. This is totally okay. In fact, I tend to prefer this approach when I’m working at a computer station with multiple monitors.\nHowever, you may prefer to have the .html preview in your viewer pane right within RStudio. This is what I prefer when I’m just working on just my laptop.\nClick on the “gear button”  and select “Preview in Viewer Pane”\n\n\nThe preview will update whenever you re-render the document."
  },
  {
    "objectID": "courses/stat0118/118_A_intro_quarto.html#footnotes",
    "href": "courses/stat0118/118_A_intro_quarto.html#footnotes",
    "title": "Intro to R and RStudio",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://moderndive.com/1-getting-started.html↩︎"
  },
  {
    "objectID": "courses/stat0118/118_H_forcats_homework.html",
    "href": "courses/stat0118/118_H_forcats_homework.html",
    "title": "Homework H",
    "section": "",
    "text": "Code\n#LOAD PACKAGES \nlibrary(tidyverse)\nlibrary(forcats)\n\n#LOAD DATASET\n# This diamonds dataset is built into the tidyverse package\ndata(\"gss_cat\")\n\n\nToday’s dataset, gss_cat, is a sample of data from the General Social Survey, a long-running US survey conducted by the independent research organization NORC at the University of Chicago. The survey has thousands of questions, but gss_cat only contains the 9 variables.\nBegin by reading more about each variable in the dataset by typing ?gss_cat into the console.\n\n1.\nFor each categorical/factor variable in gss_cat identify whether the order of the levels is ordinal or nominal.\nmarital - race - rincome - partyid - relig - denom -\n\n\n2.\nWhat are the levels of the variable partyid? Create a table which displays how many people are in each category of partyid.\n\n\n3.\nConstruct a barplot which displays partyid on the x-axis and the the height of the bars represents the count of how many people fall in each category. What makes the default bar chart hard to understand?\n\n\n4.\nRegroup partyid variable to only contain four groups: “rep”, “ind”, “dem”, and “other”. Recreate the barchart above with your improved groupings.\n\n\n5.\nWhat are the levels of the relig variable? Create a table which counts how many people belong to each religion. Be sure to print out your table is a pretty way using the kableExtra package.\n\n\n6.\nCreate a new variable in the dataset called top_relig which only contains the 5 most popular religions and all other categories are grouped into an “other category”. Create table which counts the number of people in each top_relig category. Be sure to print out your table is a pretty way using the kableExtra package.\n\n\n7.\nExplore the relationship between marital status and the number of TV hours watched. Your results should include an appropriate plot that is well-labelled. Pay attention to the ordering of any categorical variables in your plot to ensure they are ordered in an appropriate way.\n\n\n8.\nExplore the relationship between one of the categorical variables in this dataset over time. Your results should include an appropriate plot that is well-labelled. Pay attention to the ordering of any categorical variables in your plot to ensure they are ordered in an appropriate way."
  },
  {
    "objectID": "courses/stat0118/118_G_maps.html",
    "href": "courses/stat0118/118_G_maps.html",
    "title": "Maps with maps and sf",
    "section": "",
    "text": "R is fantastic for spacial analysis (not covered in this class… look for classes related to spacial statistics)\nR is great for interactive data visualization (via leaflet or shiny… more on this on Thursday)\nR is okay at spacial data visualization (creating maps).\n\nThere are many different packages in R for creating maps. I’ve found that different packages perform best for different maps. We will talk about a few different ones today.\nIf you have a highly map-centric project, there is nothing wrong with working in ArcGIS or QGIS if you find the mapping tools in R insufficient. There are many recent improvements with new packages (like sp, rgdal and rgeos) which profiles much of the functionality of GIS packages! Exciting! (not very beginner friendly - requires familiarity with GIS concepts)"
  },
  {
    "objectID": "courses/stat0118/118_G_maps.html#qualitative-color-palettes",
    "href": "courses/stat0118/118_G_maps.html#qualitative-color-palettes",
    "title": "Maps with maps and sf",
    "section": "Qualitative Color Palettes",
    "text": "Qualitative Color Palettes\n\n\n\n\n\n\n\nBest for…\nCategories (unordered)\n\n\nExamples\nSpecies, Groups, Brands\n\n\nRColorBrewer Palettes\n\"Set1\", \"Dark2\", \"Paired\"\n\n\nExample R Code\nscale_fill_brewer(palette = \"Set1\")\n\n\nwesanderson Palettes\n\"GrandBudapest1\", \"Darjeeling1\", \"Moonrise2\"\n\n\nExample R Code\nscale_fill_manual(values = wes_palette(\"GrandBudapest1\"))"
  },
  {
    "objectID": "courses/stat0118/118_G_maps.html#sequential-color-palettes",
    "href": "courses/stat0118/118_G_maps.html#sequential-color-palettes",
    "title": "Maps with maps and sf",
    "section": "Sequential Color Palettes",
    "text": "Sequential Color Palettes\n\n\n\n\n\n\n\nBest for…\nOrdered, continuous data\n\n\nExamples\nTemperature, Population Density\n\n\nRColorBrewer Palettes\n\"Blues\", \"Reds\", \"Greens\"\n\n\nExample R Code\nscale_fill_brewer(palette = \"Blues\")\n\n\nviridis Palettes\n\"viridis\", \"magma\", \"plasma\", \"cividis\"\n\n\nExample R Code\nscale_fill_viridis_c(option = \"magma\")\n\n\nBuild your Own\nscale_fill_gradientn(c(\"red\", \"yellow\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote: Be sure that higher values are encoded with the darkest colors!"
  },
  {
    "objectID": "courses/stat0118/118_G_maps.html#diverging-color-palettes",
    "href": "courses/stat0118/118_G_maps.html#diverging-color-palettes",
    "title": "Maps with maps and sf",
    "section": "Diverging Color Palettes",
    "text": "Diverging Color Palettes\n\n\n\n\n\n\n\nBest for…\nData with a central midpoint\n\n\nExamples\nElection Results, Anomaly Detection\n\n\nRColorBrewer Palettes\n\"RdBu\", \"Spectral\"\n\n\nExample R Code\nscale_fill_brewer(palette = \"RdBu\")\n\n\nBuild your Own\nscale_fill_manual(values = c(\"red\", \"orange\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSome general guidelines when choosing color palettes:\n\n\n\n✅ Match palette type to data type\n✅ Choose colorblind-friendly palettes when designing for general audiences\n✅ Limit colors to avoid overwhelming the reader - for categortical data limit the number of distinct colors to 5-8 max (beyond that, consider grouping)\n✅ Consider the meaning of colors in your audience’s cultural context.\n✅ If the data is skewed, consider using the scales package to log -scale.\n🔴 Avoid: Using blue for land in maps"
  },
  {
    "objectID": "courses/stat0118/118_G_maps.html#adding-labels-with-geom_sf_text",
    "href": "courses/stat0118/118_G_maps.html#adding-labels-with-geom_sf_text",
    "title": "Maps with maps and sf",
    "section": "Adding labels with geom_sf_text()",
    "text": "Adding labels with geom_sf_text()\n\nmap + \n  scale_fill_viridis_c(option = \"magma\", direction = -1)+ \n  geom_sf_text(aes(label = NAME), size = 1)\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nSince population density naturally drives most data trends, these maps frequently fail to provide any useful or surprising information.\n\n\n\nXKCD\n\n\n🔴 Correlation doesn’t imply causation! Just because two variables show similar patterns doesn’t mean one causes the other.\n✅ Use rates, percentages, or per capita values rather than absolute numbers. Example: Instead of showing total website users per state, show website users per 100,000 residents.\n✅ Use location quotients or z-scores to highlight areas with unusually high or low values relative to expectations. Example: Show the percentage of a state’s population that subscribes to Martha Stewart Living relative to the national average."
  },
  {
    "objectID": "courses/stat0118/118_O_webscraping_tables.html",
    "href": "courses/stat0118/118_O_webscraping_tables.html",
    "title": "Webscraping Tables",
    "section": "",
    "text": "#LOAD PACKAGES \nlibrary(tidyverse)\nData doesn’t just magically appear on your computer you need to get it from somewhere.\nOften times, we download data (.csv files or other) and save it locally on our computer.\nOther times, we download it from R packages (like we did with the gapminder dataset)."
  },
  {
    "objectID": "courses/stat0118/118_O_webscraping_tables.html#basics-of-html",
    "href": "courses/stat0118/118_O_webscraping_tables.html#basics-of-html",
    "title": "Webscraping Tables",
    "section": "Basics of HTML",
    "text": "Basics of HTML\n\nHTML stands for Hyper Text Markup Language and is the standard markup language for creating webpages\nHTML code consists of a series of elements\n\n\n\n\n\n\n\nTip\n\n\n\nTypically, an HTML element is defined by a start tag, some content, and an end tag\n&lt;tagname&gt; ...some content here... &lt;/tagname&gt;\n\n\nFor example:\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Page Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;My First Heading&lt;/h1&gt;\n&lt;p&gt;My first paragraph.&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\nThere are many, many different possible tag elements. In this class, it’s not important that you know the specifics of what each element is. It’s useful for you to understand the basic structure."
  },
  {
    "objectID": "courses/stat0118/118_O_webscraping_tables.html#html-tables",
    "href": "courses/stat0118/118_O_webscraping_tables.html#html-tables",
    "title": "Webscraping Tables",
    "section": "HTML Tables",
    "text": "HTML Tables\nAn HTML table is used to represent data in a structured way\n\n&lt;table&gt; Defines a table\n&lt;th&gt; Defines a header cell in a table\n&lt;tr&gt; Defines a row in a table\n&lt;td&gt; Defines a cell in a table\n\nHere is the HTML code:\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Name&lt;/th&gt;\n    &lt;th&gt;Birth Year&lt;/th&gt;  \n    &lt;th&gt;Country&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Harry Styles&lt;/td&gt;\n    &lt;td&gt;Feb 1, 1994&lt;/td&gt;\n    &lt;td&gt;Britain&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Taylor Swift&lt;/td&gt;\n    &lt;td&gt;Dec 13, 1989&lt;/td&gt;\n    &lt;td&gt;USA&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Justin Bieber&lt;/td&gt;\n    &lt;td&gt;Mar 1, 1994&lt;/td&gt;\n    &lt;td&gt;Canada&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\nHere is how the HTML displays in a web browser:\n\n\n\n\nName\n\n\nBirth Year\n\n\nCountry\n\n\n\n\nHarry Styles\n\n\nFeb 1, 1994\n\n\nBritain\n\n\n\n\nTaylor Swift\n\n\nDec 13, 1989\n\n\nUSA\n\n\n\n\nJustin Bieber\n\n\nMar 1, 1994\n\n\nCanada\n\n\n\n\nToday’s class will focus on scraping data from HTML tables!"
  },
  {
    "objectID": "courses/stat0118/118_O_webscraping_tables.html#html-class",
    "href": "courses/stat0118/118_O_webscraping_tables.html#html-class",
    "title": "Webscraping Tables",
    "section": "HTML class",
    "text": "HTML class\nThe class attribute can be added to any HTML element. Often it is used to help customize the styling of the element (among other things).\n&lt;h2 class=\"city\"&gt;Middlebury&lt;/h2&gt;\n&lt;p class=\"city\"&gt;Middlebury is a town in Vermont&lt;/p&gt;\nThis can be particularly useful in web scraping – we can ask to scrape particular elements, particular classes, or both!"
  },
  {
    "objectID": "courses/stat0118/118_O_webscraping_tables.html#viewing-raw-html-from-a-website",
    "href": "courses/stat0118/118_O_webscraping_tables.html#viewing-raw-html-from-a-website",
    "title": "Webscraping Tables",
    "section": "Viewing Raw HTML from a website",
    "text": "Viewing Raw HTML from a website\nYou can inspect the source code of any webpage by using a web browser like Firefox or Chrome.\n\nOn Firefox, navigate to the “Tools” menu item in the top menu and click on “Web Developer/Page Source”. You can also use the shortcut Command + U\nOn Chrome, navigate to the top menu item “View” and click on “Developer/View Source.” You can also use the keyboard shortcut Option-Command-U. It also can be useful to use the SelectorGadget Extension."
  },
  {
    "objectID": "courses/stat0118/118_O_webscraping_tables.html#webscraping-tables-from-wikipedia",
    "href": "courses/stat0118/118_O_webscraping_tables.html#webscraping-tables-from-wikipedia",
    "title": "Webscraping Tables",
    "section": "Webscraping Tables from Wikipedia",
    "text": "Webscraping Tables from Wikipedia\nCheck out the information on the (List of the Most Viewed YouTube Videos on Wikipedia)[https://en.wikipedia.org/wiki/List_of_most-viewed_YouTube_videos]. Suppose we want to scrape this data to use in R.\n\nread_html scrapes the raw html from the webpage as text\nhtml_element (and html_elements) selects particular elements from the HTML code\nhtml_table formats a scraped html table as a tibble (R table)\n\n\nyoutube_videos &lt;- read_html(\"https://en.wikipedia.org/wiki/List_of_most-viewed_YouTube_videos\") %&gt;%\n  html_element(\".wikitable\") %&gt;%\n  html_table() \n\nyoutube_videos\n\n# A tibble: 31 × 6\n   `Video name`                    Uploader `Views (billions)` Date  Notes ``   \n   &lt;chr&gt;                           &lt;chr&gt;    &lt;chr&gt;              &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 Baby Shark Dance[7]             Pinkfon… 15.65              June… \"[A]\" &lt;NA&gt; \n 2 Despacito[10]                   Luis Fo… 8.66               Janu… \"[B]\" &lt;NA&gt; \n 3 Wheels on the Bus[18]           Cocomel… 7.17               May … \"\"    &lt;NA&gt; \n 4 Johny Johny Yes Papa[19]        LooLoo … 7.02               Octo… \"\"    &lt;NA&gt; \n 5 Bath Song[20]                   Cocomel… 7.01               May … \"\"    &lt;NA&gt; \n 6 See You Again[21]               Wiz Kha… 6.58               Apri… \"[C]\" &lt;NA&gt; \n 7 Shape of You[26]                Ed Shee… 6.42               Janu… \"[D]\" &lt;NA&gt; \n 8 Phonics Song with Two Words[29] ChuChu … 6.31               Marc… \"\"    &lt;NA&gt; \n 9 Uptown Funk[30]                 Mark Ro… 5.49               Nove… \"\"    &lt;NA&gt; \n10 Gangnam Style[31]               Psy      5.48               July… \"[E]\" &lt;NA&gt; \n# ℹ 21 more rows\n\n\n\nWe could have used html_element(\"table\") If we did this, it would have pulled the first &lt;table&gt; from the page.\nWe could have used html_elements(\"table\") If we did this, it would have pulled all the &lt;table&gt; elements from the page.\nIf you want a specific table that isn’t the first table, scrape all the tables and apply html_table(). Then take that new object of the tables and add [[n]] to get the \\(n^{th}\\) table. For example to call the \\(2^{nd}\\) table,\n\ntables &lt;- html %&gt;% \n  html_elements(\"table\") %&gt;%\n  html_table() \n  \ntables[[2]]\n\nIn this case, we used html_elements(\".wikitable\") I choose to use this because the &lt;table&gt; was also defined with a unique class: &lt;table class=\"wikitable sortable\"&gt;\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that if we are using html_element to call a class, it is important to add a “.” before the class element name. You do not need to do this is you are calling an HTML element (like “table”)"
  },
  {
    "objectID": "courses/stat0118/118_O_webscraping_tables.html#cleaning-up-with-janitor",
    "href": "courses/stat0118/118_O_webscraping_tables.html#cleaning-up-with-janitor",
    "title": "Webscraping Tables",
    "section": "Cleaning up with janitor",
    "text": "Cleaning up with janitor\nWeb scraping doesn’t always format perfectly. Let’s clean it up!\n\nlibrary(janitor)\n\n\n\n\nArtwork by @allisonhorst\n\n\nClean up the names of the header:\n\nyoutube_videos &lt;- clean_names(youtube_videos)\n\nRemove the last row:\n\n# youtube_videos &lt;- youtube_videos %&gt;% \n#   filter(no != \"As of August 8, 2023\")\n\nFormat the views as a number using as.numeric:\n\nyoutube_videos &lt;- youtube_videos %&gt;% \n  mutate(views_billions = as.numeric(views_billions))\n\nWhat are the top 10 most viewed YouTube Videos?\n\ntop10 &lt;- youtube_videos %&gt;%\n  arrange(desc(views_billions)) %&gt;%\n  slice(1:10)\n\ntop10\n\n# A tibble: 10 × 6\n   video_name                      uploader     views_billions date  notes x    \n   &lt;chr&gt;                           &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;\n 1 Baby Shark Dance[7]             Pinkfong Ba…          15.6  June… \"[A]\" &lt;NA&gt; \n 2 Despacito[10]                   Luis Fonsi             8.66 Janu… \"[B]\" &lt;NA&gt; \n 3 Wheels on the Bus[18]           Cocomelon -…           7.17 May … \"\"    &lt;NA&gt; \n 4 Johny Johny Yes Papa[19]        LooLoo Kids…           7.02 Octo… \"\"    &lt;NA&gt; \n 5 Bath Song[20]                   Cocomelon -…           7.01 May … \"\"    &lt;NA&gt; \n 6 See You Again[21]               Wiz Khalifa            6.58 Apri… \"[C]\" &lt;NA&gt; \n 7 Shape of You[26]                Ed Sheeran             6.42 Janu… \"[D]\" &lt;NA&gt; \n 8 Phonics Song with Two Words[29] ChuChu TV N…           6.31 Marc… \"\"    &lt;NA&gt; \n 9 Uptown Funk[30]                 Mark Ronson            5.49 Nove… \"\"    &lt;NA&gt; \n10 Gangnam Style[31]               Psy                    5.48 July… \"[E]\" &lt;NA&gt; \n\n\nOnce we have this data, we can make cool plots!\n\ntop10 %&gt;% \n  ggplot( aes(x=views_billions, y=reorder(video_name, views_billions))) +\n    geom_bar(stat=\"identity\") +\n    xlab(\"Views (in billions)\") +\n    ylab(\"Videos\") +\n    ggtitle(\"Top 10 Most Watched YouTube Videos of All Time\") +\n    theme_minimal()\n\n\n\n\n:::callout-tip In this case, the list of the names is still not displaying very neatly. For example, rather than \"Baby Shark Dance\"[6] I might want it to just say Baby Shark Dance.\nWe can use the stringr package to remove symbols and numbers from the video names. We will be talking more about stringr later this semester and it’s not something I expect you to be able to do at this point in the semester.\n\nlibrary(stringr)\n\ntop10 %&gt;% \n  mutate(video_name=str_replace_all(video_name, \"[^[:alpha:]]\", \" \")) %&gt;% \n  ggplot(aes(x=views_billions, y=reorder(video_name, views_billions))) +\n    geom_bar(stat=\"identity\") +\n    xlab(\"Views (in billions)\") +\n    ylab(\"Videos\") +\n    ggtitle(\"Top 10 Most Watched YouTube Videos of All Time\") +\n    theme_minimal()\n\n\n\n\n\n\n\n\n\n\nExternal Resources\n\n\n\n\nR for Data Science, Webscraping"
  },
  {
    "objectID": "courses/stat0118/118_Q_stringr.html#str_detect",
    "href": "courses/stat0118/118_Q_stringr.html#str_detect",
    "title": "Working with text using stringr",
    "section": "str_detect",
    "text": "str_detect\n\n\n\nartwork by @allisonhorst\n\n\ninputs: - string - pattern\noutput: - TRUE/FALSE\nlittle example:\n\nstr_detect(\"Welcome to data science, look at this cool data\", \"data\")\n\n[1] TRUE\n\n\n\nstr_detect(\"Welcome to data science, look at this cool data\", \"pineapple\")\n\n[1] FALSE\n\n\nI only want to take classes in Warner!\n\ncourses %&gt;% \n  filter(str_detect(location, \"WNS\"))\n\n# A tibble: 45 × 9\n   titles      distros department time  location professor description courseNum\n   &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;       &lt;chr&gt;    \n 1 Gothic and… AMR HI… Program i… 2:15… \"Warner… Michael … \"\\nThis co… AMST0225…\n 2 Education … AMR SOC Program i… 2:15… \"Warner… Melissa … \"\\nWhat ar… BLST0115…\n 3 Economic S… DED     Economics  2:15… \"Warner… Amanda G… \"\\nAn intr… ECON0111…\n 4 Introducto… SOC     Economics  9:45… \"Warner… Raphaell… \"\\nAn intr… ECON0150…\n 5 Introducto… SOC     Economics  11:1… \"Warner… Raphaell… \"\\nAn intr… ECON0150…\n 6 Introducto… SOC     Economics  8:15… \"Warner… Will Pyle \"\\nAn intr… ECON0155…\n 7 Introducto… SOC     Economics  9:45… \"Warner… Will Pyle \"\\nAn intr… ECON0155…\n 8 Microecono… &lt;NA&gt;    Economics  12:4… \"Warner… &lt;NA&gt;      \"\\nMicroec… ECON0255…\n 9 Microecono… &lt;NA&gt;    Economics  2:15… \"Warner… &lt;NA&gt;      \"\\nMicroec… ECON0255…\n10 Federal Re… AMR DED Economics  1:30… \"Warner… Erin Wol… \"\\nIn this… ECON0360…\n# ℹ 35 more rows\n# ℹ 1 more variable: meet &lt;chr&gt;\n\n\nSuppose I don’t want any classes on Friday. Let’s use str_detect to find our options.\n\nnotFriday &lt;- courses %&gt;% \n  filter(!str_detect(meet, \"Friday\"))\n\nPerhaps I’m interested in immigration.\nThe regex function is used to write regular expressions in R. Regular expressions are helpful if you want to search for a pattern rather than a specific word or phrase.\nFor now, we will only use regex to ignore capitalization.\nIf you’re interested in using regular expressions at some point, this regex cheat sheet will be super helpful.\n\nimmigrationclasses &lt;- courses %&gt;% \n  filter(str_detect(description, regex(\"immigration\", ignore_case=TRUE)))\n\nimmigrationclasses\n\n# A tibble: 10 × 9\n   titles      distros department time  location professor description courseNum\n   &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;       &lt;chr&gt;    \n 1 Immigrant … AMR HIS Program i… 11:1… \"Axinn … Rachael … \"\\nIn this… AMST0175…\n 2 Introducti… EUR LN… French     2:15… \"Le Cha… William … \"\\nIn this… FREN0230…\n 3 Introducti… CW EUR… French     2:15… \"Le Cha… William … \"\\nIn this… FREN0230…\n 4 The United… AMR HIS History    9:45… \"Axinn … Joyce Mao \"\\nThis co… HIST0206…\n 5 Introducti… CMP     Internati… 12:4… \"Twilig… Amit Pra… \"\\nThis is… IGST0101…\n 6 An Introdu… EUR LN… Italian    9:45… \"Wright… Thomas V… \"\\nIntende… ITAL0251…\n 7 An Introdu… EUR LN… Italian    11:1… \"75 Sha… Sandra C… \"\\nIntende… ITAL0251…\n 8 Globalizat… SOC     Political… 2:15… \"Librar… Orion Le… \"\\nHow doe… PSCI0314…\n 9 City Polit… &lt;NA&gt;    Political… 11:1… \"LaForc… Bert Joh… \"\\nCities … PSCI0465…\n10 Christiani… AMR HI… Religion   7:30… \"Librar… James Ca… \"\\nReligio… RELI0398…\n# ℹ 1 more variable: meet &lt;chr&gt;"
  },
  {
    "objectID": "courses/stat0118/118_Q_stringr.html#str_extract-and-str_remove",
    "href": "courses/stat0118/118_Q_stringr.html#str_extract-and-str_remove",
    "title": "Working with text using stringr",
    "section": "str_extract and str_remove",
    "text": "str_extract and str_remove\nstr_extract inputs: - string - pattern str_extract output: - the extracted pattern, if it appears in the the string\nstr_remove inputs: - string - pattern str_extract output: - the string without the pattern, if it appears in the string\nlittle example:\n\nstr_extract(\"Welcome to data science, look at this cool data\", \"data\")\n\n[1] \"data\"\n\nstr_extract_all(\"Welcome to data science, look at this cool data\", \"data\")\n\n[[1]]\n[1] \"data\" \"data\"\n\nstr_remove(\"Welcome to data science, look at this cool data\", \"data\")\n\n[1] \"Welcome to  science, look at this cool data\"\n\nstr_remove_all(\"Welcome to data science, look at this cool data\", \"data\")\n\n[1] \"Welcome to  science, look at this cool \"\n\n\nCW is part of the distribution requirement column. I want CW to be its own column.\n\ncourses %&gt;% \n  mutate(CW = str_extract(distros, \"CW\")) %&gt;% \n  mutate(distros = str_remove(distros, \"CW\"))\n\n# A tibble: 586 × 10\n   titles      distros department time  location professor description courseNum\n   &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;       &lt;chr&gt;    \n 1 Introducti… AMR CMP Program i… 12:4… \"Axinn … Roberto … \"\\nIn this… AMST0101…\n 2 Immigrant … AMR HIS Program i… 11:1… \"Axinn … Rachael … \"\\nIn this… AMST0175…\n 3 American L… AMR LIT Program i… 11:1… \"Axinn … Ellery F… \"\\nA study… AMST0209…\n 4 Introducti… AMR HI… Program i… 1:30… \"Twilig… Roberto … \"\\nIn this… AMST0213…\n 5 Gothic and… AMR HI… Program i… 2:15… \"Warner… Michael … \"\\nThis co… AMST0225…\n 6 American C… AMR HIS Program i… 9:45… \"Axinn … Holly Al… \"\\nFor man… AMST0234…\n 7 Constructi… AMR ART Program i… 1:30… \"Ross C… Deb Evans \"\\n“Democr… AMST0251…\n 8 African Am… AMR LIT Program i… 9:45… \"Axinn … William … \"\\nThis co… AMST0252…\n 9 American D… AMR HI… Program i… 11:1… \"Axinn … Susan Bu… \"\\nIn this… AMST0260…\n10 Chicagoland AMR HIS Program i… 11:1… \"Giffor… Jim Ralp… \"\\nIn this… AMST0264…\n# ℹ 576 more rows\n# ℹ 2 more variables: meet &lt;chr&gt;, CW &lt;chr&gt;"
  },
  {
    "objectID": "courses/stat0118/118_Q_stringr.html#str_sub",
    "href": "courses/stat0118/118_Q_stringr.html#str_sub",
    "title": "Working with text using stringr",
    "section": "str_sub",
    "text": "str_sub\nstr_sub inputs: - string\n- starting character - ending character str_sub output: - string with only the characters between the start and the end\nlittle example:\n\nstr_sub(\"Welcome to data science, look at this cool data\", start=12, end=23) \n\n[1] \"data science\"\n\n\n\nBounds are inclusive!\n\nMaybe I only want 200 level math classes.\n\nFirst we filter for just math classes.\nThen we can create a new column called level that contains only the sixth character from the courses column.\n\nWe call this a substring, hence the function str_sub.\n\nMathClasses &lt;- courses %&gt;% \n  filter(department == \"Mathematics\") %&gt;% \n  mutate(level=str_sub(courseNum, start=6, end=6)) \n\nMath2Classes &lt;- MathClasses %&gt;% \n  filter(level== \"2\")"
  },
  {
    "objectID": "courses/stat0118/118_Q_stringr.html#str_count",
    "href": "courses/stat0118/118_Q_stringr.html#str_count",
    "title": "Working with text using stringr",
    "section": "str_count",
    "text": "str_count\nstr_count inputs: - string\n- pattern str_count output: - a count of the number of times the pattern appears in the string\nlittle example:\n\nstr_count(\"Welcome to data science, look at this cool data\", \"data\")\n\n[1] 2\n\n\nMaybe I only want my classes to meet twice a week.\n\ncourses &lt;- courses %&gt;% \n  mutate(dayCount = str_count(meet, \"day\"))\n\n#what's the maximum number of days a week a class meets?\nmax(courses$dayCount)\n\n[1] 5\n\n#what's the mean number of days?\nmean(courses$dayCount)\n\n[1] 2.187713\n\n\nLet’s visualize this data.\n\ncourses %&gt;% \n  ggplot() + \n  geom_bar(aes(x=dayCount), fill=\"blue\") + \n  xlab(\"Number of Days Class Meets\") + \n  ylab(\"Number of Classes\") + \n  labs(title=\"How many Days a Week do Classes at Middlebury Meet?\")+\n  theme_classic()"
  },
  {
    "objectID": "courses/stat0118/118_J_pivoting.html",
    "href": "courses/stat0118/118_J_pivoting.html",
    "title": "reshaping data with tidyr",
    "section": "",
    "text": "The goal of tidyr is to help you create tidy data.\n\n\n\nIllustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst\n\n\n\n\n\nhttps://r4ds.hadley.nz/data-tidy\n\n\n\nReshaping with Pivoting – Why?\nData frames are often described as wide or long.\nWide when a row has more than one observation, and the units of observation are on one row each\nLong when a row has only one observation, but the units of observation are repeated down the column\nCredit: datasciencebook.ca\n\n\ncanlang dataset\n\n#LOAD PACKAGES\nlibrary(tidyverse)\n\n#LOAD DATA\nlang_wide &lt;- read.csv(\"https://raw.githubusercontent.com/UBC-DSCI/introduction-to-datascience/master/data/region_lang_top5_cities_wide.csv\")\n\n\n\nPivot Longer\nCredit: datasciencebook.ca\nCredit: datasciencebook.ca\n\nlang_mother_tidy &lt;- pivot_longer(lang_wide,\n  cols = Toronto:Edmonton,\n  names_to = \"region\",\n  values_to = \"mother_tongue\"\n)\n\nlang_mother_tidy\n\n# A tibble: 1,070 × 4\n   category                                language         region mother_tongue\n   &lt;chr&gt;                                   &lt;chr&gt;            &lt;chr&gt;          &lt;int&gt;\n 1 Aboriginal languages                    Aboriginal lang… Toron…            80\n 2 Aboriginal languages                    Aboriginal lang… Montr…            30\n 3 Aboriginal languages                    Aboriginal lang… Vanco…            70\n 4 Aboriginal languages                    Aboriginal lang… Calga…            20\n 5 Aboriginal languages                    Aboriginal lang… Edmon…            25\n 6 Non-Official & Non-Aboriginal languages Afrikaans        Toron…           985\n 7 Non-Official & Non-Aboriginal languages Afrikaans        Montr…            90\n 8 Non-Official & Non-Aboriginal languages Afrikaans        Vanco…          1435\n 9 Non-Official & Non-Aboriginal languages Afrikaans        Calga…           960\n10 Non-Official & Non-Aboriginal languages Afrikaans        Edmon…           575\n# ℹ 1,060 more rows\n\n\nThe data above is now tidy because all three criteria for tidy data have now been met:\n\nAll the variables (category, language, region and mother_tongue) are now their own columns in the data frame.\nEach observation, (i.e., each language in a region) is in a single row.\nEach value is a single cell, i.e., its row, column position in the data frame is not shared with another value.\n\n\n\nPivot Wider\n\nlang_long &lt;- read.csv(\"https://raw.githubusercontent.com/UBC-DSCI/introduction-to-datascience/master/data/region_lang_top5_cities_long.csv\")\n\nCredit: datasciencebook.ca\nCredit: datasciencebook.ca\n\nlang_home_tidy &lt;- pivot_wider(lang_long,\n  names_from = type,\n  values_from = count\n)\nlang_home_tidy\n\n# A tibble: 1,070 × 5\n   region    category                         language most_at_home most_at_work\n   &lt;chr&gt;     &lt;chr&gt;                            &lt;chr&gt;           &lt;int&gt;        &lt;int&gt;\n 1 Montréal  Aboriginal languages             Aborigi…           15            0\n 2 Toronto   Aboriginal languages             Aborigi…           50            0\n 3 Calgary   Aboriginal languages             Aborigi…            5            0\n 4 Edmonton  Aboriginal languages             Aborigi…           10            0\n 5 Vancouver Aboriginal languages             Aborigi…           15            0\n 6 Montréal  Non-Official & Non-Aboriginal l… Afrikaa…           10            0\n 7 Toronto   Non-Official & Non-Aboriginal l… Afrikaa…          265            0\n 8 Calgary   Non-Official & Non-Aboriginal l… Afrikaa…          505           15\n 9 Edmonton  Non-Official & Non-Aboriginal l… Afrikaa…          300            0\n10 Vancouver Non-Official & Non-Aboriginal l… Afrikaa…          520           10\n# ℹ 1,060 more rows\n\n\ngif\n\n\nGapminder\n\nlibrary(gapminder)\ndata(\"gapminder\")\n\nLet’s say we’d like to look at LifeExp over time for all the countries in Asia in our dataset.\n\n# Create a dataset called asia with the data we need\nasia &lt;- gapminder %&gt;% \n  filter(continent == \"Asia\") %&gt;% \n  select(country, year, lifeExp)\n\nWe can create a wide version of our table, where each row is a country and each column a year, with values of lifeExp in each cell of the table.\n\nlifeExp_wide &lt;- asia %&gt;% \n1  pivot_wider(names_from = \"year\",\n2              names_prefix = \"yr\",\n              values_from = \"lifeExp\")\nlifeExp_wide\n\n\n1\n\nuse pivot_wider to go from long to wide format\n\n2\n\nAdds the pre-fix “yr” to all the column names – it’s a good idea to avoid column names that start with a number.\n\n\n\n\n# A tibble: 33 × 13\n   country yr1952 yr1957 yr1962 yr1967 yr1972 yr1977 yr1982 yr1987 yr1992 yr1997\n   &lt;fct&gt;    &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n 1 Afghan…   28.8   30.3   32.0   34.0   36.1   38.4   39.9   40.8   41.7   41.8\n 2 Bahrain   50.9   53.8   56.9   59.9   63.3   65.6   69.1   70.8   72.6   73.9\n 3 Bangla…   37.5   39.3   41.2   43.5   45.3   46.9   50.0   52.8   56.0   59.4\n 4 Cambod…   39.4   41.4   43.4   45.4   40.3   31.2   51.0   53.9   55.8   56.5\n 5 China     44     50.5   44.5   58.4   63.1   64.0   65.5   67.3   68.7   70.4\n 6 Hong K…   61.0   64.8   67.6   70     72     73.6   75.4   76.2   77.6   80  \n 7 India     37.4   40.2   43.6   47.2   50.7   54.2   56.6   58.6   60.2   61.8\n 8 Indone…   37.5   39.9   42.5   46.0   49.2   52.7   56.2   60.1   62.7   66.0\n 9 Iran      44.9   47.2   49.3   52.5   55.2   57.7   59.6   63.0   65.7   68.0\n10 Iraq      45.3   48.4   51.5   54.5   57.0   60.4   62.0   65.0   59.5   58.8\n# ℹ 23 more rows\n# ℹ 2 more variables: yr2002 &lt;dbl&gt;, yr2007 &lt;dbl&gt;\n\n\n\n\n\n\n\n\nExternal Resources\n\n\n\n\nR for Data Science, Data Tidying"
  },
  {
    "objectID": "courses/stat0118/118_L_maps2.html",
    "href": "courses/stat0118/118_L_maps2.html",
    "title": "Plotting Points on Maps",
    "section": "",
    "text": "#LOAD PACKAGES \nlibrary(tidyverse)\nlibrary(sf) #this is a package needed so R can work with sf objects\n\n#LOAD DATA\nlibrary(spData) #this packages contains the dataset (with sf objects) that we will be using today\ndata(\"us_states\")"
  },
  {
    "objectID": "courses/stat0118/118_L_maps2.html#using-openstreet-maps",
    "href": "courses/stat0118/118_L_maps2.html#using-openstreet-maps",
    "title": "Plotting Points on Maps",
    "section": "Using OpenStreet Maps",
    "text": "Using OpenStreet Maps\nA simple map of Warner Hall:\n\nleaflet() %&gt;%\n  addTiles() %&gt;%  \n  # Add default OpenStreetMap map tiles\n  addMarkers(lng=-73.175, lat=44.010, popup=\"Warner Hall\")\n\n\n\n\n\nA map of all airports in the USA:\n\nleaflet(data=airports_count) %&gt;%\n  addTiles() %&gt;% # Add default OpenStreetMap map tiles\n  addMarkers(lng=~lon, lat=~lat, popup=~faa)\n\n\n\n\n\nor using Circle Markers:\n\nleaflet(data=airports_count) %&gt;%\n  addTiles() %&gt;%# Add default OpenStreetMap map tiles\n  addCircleMarkers(lng=~lon, lat=~lat, popup=~faa, radius = ~count/1000, stroke =FALSE, fillOpacity =0.5)"
  },
  {
    "objectID": "courses/stat0116/index.html",
    "href": "courses/stat0116/index.html",
    "title": "EMW",
    "section": "",
    "text": "More Coming Soon!"
  },
  {
    "objectID": "courses/stat0116/index.html#stat-116-introduction-to-statistical-science",
    "href": "courses/stat0116/index.html#stat-116-introduction-to-statistical-science",
    "title": "EMW",
    "section": "",
    "text": "More Coming Soon!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Emily Malcolm-White (she/her)",
    "section": "",
    "text": "Hi there! 👋\nI’m an educator and student support specialist with a passion for teaching and developing quantitative skills for students from a wide variety of backgrounds. I’m deeply committed to creating an inclusive and equitable learning environment where all students can thrive.\nAt Middlebury College, I teach a range of courses, including statistics, data science, and mathematics. I also serve as the Interim Director of the Quantitative Center (Q-Center), a new initiative dedicated to supporting Middlebury students in developing quantitative skills.\nEvery year, I co-teach “R by the Sea”, a hands-on data science workshop for marine ecologists. It’s a rewarding opportunity to merge data science education with real-world applications in marine ecology."
  },
  {
    "objectID": "courses/stat0118/118_D_ggplot.html",
    "href": "courses/stat0118/118_D_ggplot.html",
    "title": "Making plots with ggplot2: Barplots and Scatterplots",
    "section": "",
    "text": "ggplot2 is a package built within the tidyverse package for creating awesome graphs!\n\n\n\nArtwork by @allisonhorst\n\n\n\nlibrary(tidyverse)\n\n\n#Import the can_lang dataset \ncan_lang &lt;- read.csv(\"https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv\")\n\n\nRecall our Top 10 example:\nThis code gave a list of 10 Aboriginal Languages which have the most number of people who speak them as their mother tongue:\n\n1ten_lang &lt;- can_lang %&gt;%\n2  filter(category == \"Aboriginal languages\") %&gt;%\n3  arrange(desc(mother_tongue)) %&gt;%\n4  select(language, mother_tongue) %&gt;%\n5  slice(1:10)\n\n\n1\n\nStart with the can_lang dataset\n\n2\n\nFilter for aboriginal languages only\n\n3\n\narrange the rows from highest number of people who speak the language as their mother tongue, to the lowest number of people who speak the language as their mother tongue\n\n4\n\nonly include the language and mother_tongue columns\n\n5\n\nonly include the top 10 rows\n\n\n\n\n\n\nBarplots\nSuppose we wanted to display this information in a barplot instead of in a table. Let’s take a look at the ggplot syntax:\n\n\n\nCredit: https://github.com/UBC-DSCI/introduction-to-datascience/\n\n\n\n1ten_lang %&gt;%\n2  ggplot(aes(x = language, y = mother_tongue)) +\n3  geom_bar(stat = \"identity\")\n\n\n1\n\nBegin with the ten_lang dataset\n\n2\n\nCreate a plot – the x-axis contains the languages and the y-axis contains the number of people who speak the language as their mother tongue. This sets up the coordinate system, but no visualization appears yet.\n\n3\n\nadd a layer with a barplot. The height of the bars should simply be the number of people who speak the language as their mother tongue. Without stat = \"identity\", geom_bar() defaults to stat = \"count\", which means it counts rows instead of using a y-variable.\n\n\n\n\n\n\n\nIs there any improvements we could make to this graph?\n\n\nTo better view text\nDisplay the bars horizontally instead of vertically!\n\nggplot(ten_lang, aes(x = language, y = mother_tongue)) +\n  geom_bar(stat = \"identity\") +  \n1  coord_flip()\n\n\n1\n\nThis flips the x and y axes!\n\n\n\n\n\n\n#OR\n\nggplot(ten_lang, aes(x = mother_tongue, y = language)) +\n  geom_bar(stat = \"identity\") \n\n\n\n\n\n\nLabels, Colors, and Themes\n\n1ggplot(ten_lang, aes(x = mother_tongue, y = reorder(language, mother_tongue))) +\n2  geom_bar(fill=\"lightblue\", stat = \"identity\") +\n3  ylab(\"Language\") +\n4  xlab(\"Mother Tongue (Number of Canadian Residents)\") +\n5  ggtitle(\"Ten Aboriginal Languages Most Often \\n Reported by Canadian Residents \\n as Their Mother Tongue\") +\n6  theme_minimal()\n\n\n1\n\nThe reorder function helps to reorder the languages from highest to lowest value of mother tongue.\n\n2\n\nChanges the colors of the bars to light blue!\n\n3\n\nUpdates x-axis label\n\n4\n\nUpdates y-axis label\n\n5\n\nadds a title\n\n6\n\nchanges the theme\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nBarplots are good for displaying one categorical variable and one numeric variable. The number variable could be counts (as above) or they could be averages or totals or maximums or minimums (or many other things!)\n\n\n\n\nggplot: scatterplot with geom_point\n\n\n\n\n\n\nTip\n\n\n\nScatterplots are good for displaying the relationship between two numerical variables.\n\n\nThe mtcars dataset was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models). It’s available inside the ggplot package which is already installed.\n\n#load the data\ndata(mtcars)\n\n\n1mtcars %&gt;%\n2ggplot(aes(x=wt, y=mpg)) +\n3  geom_point()\n\n\n1\n\nBegin with the mtcars dataset\n\n2\n\nset up the plot – weight on the x-axis and miles per gallon on the y-axis\n\n3\n\nAdds a scatter plot layer to the plot.\n\n\n\n\n\n\n\nNote that you can change the color, shape (pch for plotting character) and size of these points!\n\nQuick update to the dataset\n\n#code to update `mtcars` dataset so that `am` is treated as a factor rather than a continuous numeric variable\nmtcars &lt;- mtcars %&gt;%  \n  mutate(am = as.factor(am)) \n\nThis modifies the am column, which represents the transmission type of the car (0 = automatic, 1 = manual). The as.factor(am) function converts the am variable from a numeric type (0 or 1) into a categorical factor.\n\n\n\nInside aes() or outside aes()?\nWhat is the difference between these two graphs?\n\n#color not in aesthetics\nggplot(mtcars, aes(x=wt, y=mpg)) +\n1  geom_point(color=\"red\")\n\n\n1\n\ncolor the same for all points\n\n\n\n\n\n\n\n\n#color in aesthetics\nggplot(mtcars, aes(x=wt, y=mpg)) +\n1  geom_point(aes(color=am))\n\n\n1\n\ncolor will vary based on the value of am\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nIf the thing you are trying to change (color, shape, size, etc.) depends on a variable, you should put in inside the aesthetics\nIf the thing you are trying to change (color, shape, size, etc.) should happen for all things, you should not put it inside the aesthetics.\n\n\n\n\n\nCustomizing Colors in Aesthetics\n\n#color in aesthetics\nggplot(mtcars, aes(x=wt, y=mpg)) +\n  geom_point(aes(color=am)) +\n1  scale_color_manual(values=c(\"black\", \"orange\"))\n\n\n1\n\nThis updates the two colors to black and orange, instead of the default colors.\n\n\n\n\n\n\n\n\n\nGlobal vs. Local Aesthetics\nGlobal aesthetic mappings apply to all geometries and can be defined when you initially call ggplot(). All the geometries added as layers will default to this mapping. Local aesthetic mappings add additional information or override the default mappings.\n\n#color = am as a global aethetic\nggplot(mtcars, aes(x=wt, y=mpg, color=am)) +\n  geom_point()\n\n\n\n\n\n#color = am as a local aethetic\nggplot(mtcars, aes(x=wt, y=mpg)) +\n  geom_point(aes(color=am))\n\n\n\n\n\n#overwriting color = am as a global aethetic with a local aesthetic\nggplot(mtcars, aes(x=wt, y=mpg, color=am)) +\n  geom_point(color=\"purple\")"
  },
  {
    "objectID": "courses/stat0118/118_gganimate.html",
    "href": "courses/stat0118/118_gganimate.html",
    "title": "Animating plots using gganimate",
    "section": "",
    "text": "Artwork by @allisonhorst\n\n\nComing soon!"
  },
  {
    "objectID": "courses/stat0118/118_H_forcats.html",
    "href": "courses/stat0118/118_H_forcats.html",
    "title": "forcats: working with categorical data",
    "section": "",
    "text": "The R package forcats is designed to make working with categorical variables easier and more efficient. It provides a set of functions that allow you to manipulate and analyze categorical data with ease. In this lesson, we’ll cover the basics of the forcats package and some of its most useful functions."
  },
  {
    "objectID": "courses/stat0118/118_H_forcats.html#categorical-variables",
    "href": "courses/stat0118/118_H_forcats.html#categorical-variables",
    "title": "forcats: working with categorical data",
    "section": "Categorical Variables",
    "text": "Categorical Variables\nLet’s review what categorical data is. Categorical data is a type of data that consists of categories or labels.\nExamples of categorical data include:\n\nColors (red, blue, green, etc.)\nTypes of vehicles (sedan, SUV, truck)\nEducational degrees (high school, college, graduate school)\n\nCategorical data can be further divided into two types: nominal and ordinal. Nominal data consists of categories that have no inherent order, while ordinal data consists of categories that have a natural order. For example, educational degrees are ordinal data because they can be ordered from least to most advanced."
  },
  {
    "objectID": "courses/stat0118/118_H_forcats.html#mpg-data",
    "href": "courses/stat0118/118_H_forcats.html#mpg-data",
    "title": "forcats: working with categorical data",
    "section": "mpg Data",
    "text": "mpg Data\nWe will play with different functions in the forcats packages using the mpg dataset from earlier in the semester.\n\nlibrary(forcats)\nlibrary(tidyverse)\ndata(\"mpg\")\n\nRecall our side-by-side boxplot:\n\nmpg %&gt;% \n  ggplot(aes(x=class, y=hwy)) +\n  geom_boxplot()"
  },
  {
    "objectID": "courses/stat0118/118_H_forcats.html#reordering-factor-levels",
    "href": "courses/stat0118/118_H_forcats.html#reordering-factor-levels",
    "title": "forcats: working with categorical data",
    "section": "Reordering Factor Levels",
    "text": "Reordering Factor Levels\nOne of the most useful functions is fct_relevel(), which allows you to reorder the levels of a factor. This can be useful when you want to change the default ordering of the levels or when you want to group certain levels together.\nIs class a factor?\n\nmpg$class %&gt;% is.factor()\n\n[1] FALSE\n\n\nLet’s make it a factor!\n\nmpg &lt;- mpg %&gt;% \n  mutate(class = class %&gt;%  as.factor())\n\nLet’s check the levels and their current ordering!\n\nmpg$class %&gt;%  \n  levels()\n\n[1] \"2seater\"    \"compact\"    \"midsize\"    \"minivan\"    \"pickup\"    \n[6] \"subcompact\" \"suv\"       \n\n\nTo reorder the levels with fct_relevel()\n\nmpg &lt;- mpg %&gt;% \n  mutate(class = class %&gt;%  fct_relevel( \"compact\",\"subcompact\",\"midsize\",\"2seater\",\"minivan\",\"suv\",\"pickup\"))\n\nmpg$class %&gt;% \n  levels()\n\n[1] \"compact\"    \"subcompact\" \"midsize\"    \"2seater\"    \"minivan\"   \n[6] \"suv\"        \"pickup\"    \n\n\nLet’s recreate our side-by-side boxplot now:\n\nmpg %&gt;% \n  ggplot(aes(x=class, y=hwy)) +\n  geom_boxplot()\n\n\n\n\nRather than reordering them manually by typing the order, you could also re-level by some numeric criteria using fct_reorder(). For example:\n\nmpg &lt;- mpg %&gt;% \n  mutate(class = class %&gt;% fct_reorder(hwy, median))\n\nmpg$class %&gt;% \n  levels()\n\n[1] \"pickup\"     \"suv\"        \"minivan\"    \"2seater\"    \"subcompact\"\n[6] \"compact\"    \"midsize\""
  },
  {
    "objectID": "courses/stat0118/118_H_forcats.html#renaming-factor-levels-with-fct_recode",
    "href": "courses/stat0118/118_H_forcats.html#renaming-factor-levels-with-fct_recode",
    "title": "forcats: working with categorical data",
    "section": "Renaming Factor levels with fct_recode",
    "text": "Renaming Factor levels with fct_recode\nSometimes you might not like the way the levels are named.\n\nmpg &lt;- mpg %&gt;% \n  mutate(class = class %&gt;%  fct_recode(\"two-seater\" = \"2seater\"))\n\n## NEW NAME = OLD NAME\n\nmpg$class %&gt;% \n  levels()\n\n[1] \"pickup\"     \"suv\"        \"minivan\"    \"two-seater\" \"subcompact\"\n[6] \"compact\"    \"midsize\""
  },
  {
    "objectID": "courses/stat0118/118_H_forcats.html#factor-collapsing-with-fct_collapse",
    "href": "courses/stat0118/118_H_forcats.html#factor-collapsing-with-fct_collapse",
    "title": "forcats: working with categorical data",
    "section": "Factor Collapsing with fct_collapse()",
    "text": "Factor Collapsing with fct_collapse()\nLet’s say we wanted to create only two categories – cars and larger vehicles.\n\nmpg &lt;- mpg %&gt;% \n  mutate(class_two = class %&gt;%  fct_collapse( cars = c(\"compact\", \"subcompact\", \"midsize\", \"two-seater\"), big = c(\"pickup\", \"suv\", \"minivan\")))\n\nmpg$class_two %&gt;% \n  levels()\n\n[1] \"big\"  \"cars\""
  },
  {
    "objectID": "courses/stat0118/118_H_forcats.html#lumping-into-an-other-category",
    "href": "courses/stat0118/118_H_forcats.html#lumping-into-an-other-category",
    "title": "forcats: working with categorical data",
    "section": "Lumping into an other category",
    "text": "Lumping into an other category\n\nfct_lump_min(): lumps levels that appear fewer than min times.\nfct_lump_prop(): lumps levels that appear in fewer than (or equal to) prop * n times.\nfct_lump_n() lumps all levels except for the n most frequent (or least frequent if n &lt; 0)\n\n\nmpg %&gt;% \n  count(manufacturer)\n\n# A tibble: 15 × 2\n   manufacturer     n\n   &lt;chr&gt;        &lt;int&gt;\n 1 audi            18\n 2 chevrolet       19\n 3 dodge           37\n 4 ford            25\n 5 honda            9\n 6 hyundai         14\n 7 jeep             8\n 8 land rover       4\n 9 lincoln          3\n10 mercury          4\n11 nissan          13\n12 pontiac          5\n13 subaru          14\n14 toyota          34\n15 volkswagen      27\n\n\nLet’s say we wanted only the manufacturers with at least 15 cars produced. Everything else we want to just be other:\n\nmpg &lt;- mpg %&gt;% \n  mutate(class_lumped = class %&gt;% fct_lump_min(15))\n\nmpg$manufacturer %&gt;% \n  levels()\n\nNULL\n\n\nCreate a table using kableExtra:\n\nlibrary(kableExtra)\n\nmpg %&gt;% \n  count(manufacturer) %&gt;% \n  kbl() %&gt;% \n  kable_styling()\n\n\n\n\nmanufacturer\nn\n\n\n\n\naudi\n18\n\n\nchevrolet\n19\n\n\ndodge\n37\n\n\nford\n25\n\n\nhonda\n9\n\n\nhyundai\n14\n\n\njeep\n8\n\n\nland rover\n4\n\n\nlincoln\n3\n\n\nmercury\n4\n\n\nnissan\n13\n\n\npontiac\n5\n\n\nsubaru\n14\n\n\ntoyota\n34\n\n\nvolkswagen\n27"
  },
  {
    "objectID": "courses/stat0118/118_E_ggplot_2.html",
    "href": "courses/stat0118/118_E_ggplot_2.html",
    "title": "Making plots with ggplot2: histograms, boxplots, line graphs",
    "section": "",
    "text": "# load packages\nlibrary(tidyverse)"
  },
  {
    "objectID": "courses/stat0118/118_E_ggplot_2.html#without-the-needed-group-command",
    "href": "courses/stat0118/118_E_ggplot_2.html#without-the-needed-group-command",
    "title": "Making plots with ggplot2: histograms, boxplots, line graphs",
    "section": "Without the needed group command",
    "text": "Without the needed group command\n\n# Incorrect: Only one line drawn without group\nggplot(df, aes(x = time, y = value)) +\n  geom_line() +\n  ggtitle(\"Incorrect - Missing Group\")"
  },
  {
    "objectID": "courses/stat0118/118_E_ggplot_2.html#with-the-group-command",
    "href": "courses/stat0118/118_E_ggplot_2.html#with-the-group-command",
    "title": "Making plots with ggplot2: histograms, boxplots, line graphs",
    "section": "With the group command",
    "text": "With the group command\n\n# Correct: Separate lines for each category using group\nggplot(df, aes(x = time, y = value, group = category)) +\n  geom_line() +\n  ggtitle(\"Correct - Grouped by Category\")"
  },
  {
    "objectID": "courses/stat0118/118_E_ggplot_2.html#using-color-or-linetype-instead",
    "href": "courses/stat0118/118_E_ggplot_2.html#using-color-or-linetype-instead",
    "title": "Making plots with ggplot2: histograms, boxplots, line graphs",
    "section": "Using color (or linetype) instead",
    "text": "Using color (or linetype) instead\n\n# Automatically groups by color\nggplot(df, aes(x = time, y = value, color = category)) +\n  geom_line() +\n  ggtitle(\"Grouping by Color\")"
  },
  {
    "objectID": "courses/stat0118/118_KeyboardShortcuts.html",
    "href": "courses/stat0118/118_KeyboardShortcuts.html",
    "title": "Keyboard Shortcuts",
    "section": "",
    "text": "Action\nWindows/Linux\nMac\n\n\n\n\n\nInsert Chunk\nCtrl + Alt + I\nCmd + Option + I\n\n\n%&gt;%\nInsert pipe operator\nCtrl + Shift + M\nCmd + Shift + M\n\n\n#\nUn/Comment out a line\nCtrl + Shift + C\nCmd + Shift + C\n\n\n\nRun Current line/selection\nCtrl+Enter\nCmd+Return\n\n\n\nRun Current Chunk\nCtrl + Alt + C\nCmd + Option + C\n\n\n\nRun All Chunks Above\nCtrl + Alt + P\nCmd + Option + P\n\n\n\nRender document\nCtrl + Shift + K\nCmd + Shift + K\n\n\n\nUndo\nCtrl + Z\nCmd + Z\n\n\n\nCut\nCtrl+X\nCmd+X\n\n\n\nCopy\nCtrl+C\nCmd+C\n\n\n\nPaste\nCtrl+V\nCmd+V"
  },
  {
    "objectID": "courses/stat0118/118_G_maps_notes.html",
    "href": "courses/stat0118/118_G_maps_notes.html",
    "title": "Maps with maps and sf",
    "section": "",
    "text": "R is fantastic for spacial analysis (not covered in this class… look for classes related to spacial statistics)\nR is great for interactive data visualization (via leaflet or shiny… more on this on Thursday)\nR is okay at spacial data visualization (creating maps).\n\nThere are many different packages in R for creating maps. I’ve found that different packages perform best for different maps. We will talk about a few different ones today.\nIf you have a highly map-centric project, there is nothing wrong with working in ArcGIS or QGIS if you find the mapping tools in R insufficient. There are many recent improvements with new packages (like sp, rgdal and rgeos) which profiles much of the functionality of GIS packages! Exciting! (not very beginner friendly - requires familiarity with GIS concepts)"
  },
  {
    "objectID": "courses/stat0118/118_G_maps_notes.html#qualitative-color-palettes",
    "href": "courses/stat0118/118_G_maps_notes.html#qualitative-color-palettes",
    "title": "Maps with maps and sf",
    "section": "Qualitative Color Palettes",
    "text": "Qualitative Color Palettes\n\n\n\n\n\n\n\nBest for…\nCategories (unordered)\n\n\nExamples\nSpecies, Groups, Brands\n\n\nRColorBrewer Palettes\n\"Set1\", \"Dark2\", \"Paired\"\n\n\nExample R Code\nscale_fill_brewer(palette = \"Set1\")\n\n\nwesanderson Palettes\n\"GrandBudapest1\", \"Darjeeling1\", \"Moonrise2\"\n\n\nExample R Code\nscale_fill_manual(values = wes_palette(\"GrandBudapest1\"))"
  },
  {
    "objectID": "courses/stat0118/118_G_maps_notes.html#sequential-color-palettes",
    "href": "courses/stat0118/118_G_maps_notes.html#sequential-color-palettes",
    "title": "Maps with maps and sf",
    "section": "Sequential Color Palettes",
    "text": "Sequential Color Palettes\n\n\n\n\n\n\n\nBest for…\nOrdered, continuous data\n\n\nExamples\nTemperature, Population Density\n\n\nRColorBrewer Palettes\n\"Blues\", \"Reds\", \"Greens\"\n\n\nExample R Code\nscale_fill_brewer(palette = \"Blues\")\n\n\nviridis Palettes\n\"viridis\", \"magma\", \"plasma\", \"cividis\"\n\n\nExample R Code\nscale_fill_viridis_c(option = \"magma\")\n\n\nBuild your Own\nscale_fill_gradientn(c(\"red\", \"yellow\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote: Be sure that higher values are encoded with the darkest colors!"
  },
  {
    "objectID": "courses/stat0118/118_G_maps_notes.html#diverging-color-palettes",
    "href": "courses/stat0118/118_G_maps_notes.html#diverging-color-palettes",
    "title": "Maps with maps and sf",
    "section": "Diverging Color Palettes",
    "text": "Diverging Color Palettes\n\n\n\n\n\n\n\nBest for…\nData with a central midpoint\n\n\nExamples\nElection Results, Anomaly Detection\n\n\nRColorBrewer Palettes\n\"RdBu\", \"Spectral\"\n\n\nExample R Code\nscale_fill_brewer(palette = \"RdBu\")\n\n\nBuild your Own\nscale_fill_manual(values = c(\"red\", \"orange\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSome general guidelines when choosing color palettes:\n\n\n\n✅ Match palette type to data type\n✅ Choose colorblind-friendly palettes when designing for general audiences\n✅ Limit colors to avoid overwhelming the reader - for categortical data limit the number of distinct colors to 5-8 max (beyond that, consider grouping)\n✅ Consider the meaning of colors in your audience’s cultural context.\n✅ If the data is skewed, consider using the scales package to log -scale.\n🔴 Avoid: Using blue for land in maps"
  },
  {
    "objectID": "courses/stat0118/118_G_maps_notes.html#adding-labels-with-geom_sf_text",
    "href": "courses/stat0118/118_G_maps_notes.html#adding-labels-with-geom_sf_text",
    "title": "Maps with maps and sf",
    "section": "Adding labels with geom_sf_text()",
    "text": "Adding labels with geom_sf_text()\n\n\n\n\n\n\nWarning\n\n\n\nSince population density naturally drives most data trends, these maps frequently fail to provide any useful or surprising information.\n\n\n\nXKCD\n\n\n🔴 Correlation doesn’t imply causation! Just because two variables show similar patterns doesn’t mean one causes the other.\n✅ Use rates, percentages, or per capita values rather than absolute numbers. Example: Instead of showing total website users per state, show website users per 100,000 residents.\n✅ Use location quotients or z-scores to highlight areas with unusually high or low values relative to expectations. Example: Show the percentage of a state’s population that subscribes to Martha Stewart Living relative to the national average."
  },
  {
    "objectID": "courses/stat0118/118_C_aggregating.html",
    "href": "courses/stat0118/118_C_aggregating.html",
    "title": "Aggregating",
    "section": "",
    "text": "#LOAD PACKAGES \nlibrary(tidyverse)"
  },
  {
    "objectID": "courses/stat0118/118_C_aggregating.html#remove-rows-with-missing-data-with-drop_na",
    "href": "courses/stat0118/118_C_aggregating.html#remove-rows-with-missing-data-with-drop_na",
    "title": "Aggregating",
    "section": "Remove rows with missing data with drop_na()",
    "text": "Remove rows with missing data with drop_na()\n\n2penguins &lt;- penguins %&gt;%\n1  drop_na()\n\n\n1\n\nDrops all the rows in the penguins dataset which has missing data (NA values)\n\n2\n\noverwrite the penguins dataset with the penguins dataset without the missing rows\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nIs it appropriate to remove rows with missing data? How many rows have missing data? Do the missing rows have something in common?\nRemoving rows can affect the validity and generalizability of your analysis!"
  },
  {
    "objectID": "courses/stat0118/118_C_aggregating.html#multiple-groups",
    "href": "courses/stat0118/118_C_aggregating.html#multiple-groups",
    "title": "Aggregating",
    "section": "Multiple Groups",
    "text": "Multiple Groups\nSuppose we wish to have the average bill length and average bill depth broken down by sex AND species:\n\npenguins %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(average_bill_length = mean(bill_length_mm), \n            average_bill_depth = mean(bill_depth_mm))\n\n# A tibble: 6 × 4\n# Groups:   species [3]\n  species   sex    average_bill_length average_bill_depth\n  &lt;fct&gt;     &lt;fct&gt;                &lt;dbl&gt;              &lt;dbl&gt;\n1 Adelie    female                37.3               17.6\n2 Adelie    male                  40.4               19.1\n3 Chinstrap female                46.6               17.6\n4 Chinstrap male                  51.1               19.3\n5 Gentoo    female                45.6               14.2\n6 Gentoo    male                  49.5               15.7"
  },
  {
    "objectID": "courses/stat0118/118_patchwork.html",
    "href": "courses/stat0118/118_patchwork.html",
    "title": "Arranging plots with patchwork",
    "section": "",
    "text": "Artwork by @allisonhorst\n\n\nComing soon!"
  },
  {
    "objectID": "courses/stat0118/118_F_ggplot_3_homework.html",
    "href": "courses/stat0118/118_F_ggplot_3_homework.html",
    "title": "STAT 118: Homework F",
    "section": "",
    "text": "Code\n# load packages\nlibrary(tidyverse)\n\n# load data\nlibrary(gapminder)\n\n\n\n1. Gapminder Scatterplot\n\nFor the year 2007, plot GDP per capita (x-axis) vs. life expectancy (y-axis).\nFormat large numbers as numbers with commas (not scientific notation)\ncolor points by continent\nBe sure your axes are clearly labelled for a general audience\n\n\n\n2. Log-Transformed Gapminder Scatterplot\nTake your scatterplot from the previous problem. Log-transform the GDP per capita axis. Explain why a log-transformed x-axis is useful here.\n\n\n3. Gapminder Scatterplot with labels\nTake your scatterplot from the previous problem. Use geom_text_repel() to label the subset of countres which have a GDP per capita over over $40,000.\n\n\n4. Gapminder Scatterplot over the years\nRepeat this plot for all years in the dataset. Hint: you’ll need to make sure you are using the full dataset for all years (not just 2007 like in the previous plots) AND you can use a nifty function that we talked about to repeat the analysis for all years in only one line of code!\n\n\n5. Gapminder US Time Series\n\nCreate a time-series line plot for GDP per capita in the United States\nLabel the highest and lowest years using geom_text_repel().\nBe sure that the axis showing the GDP per capita is shown in currency format (with dollar signs!)\nBe sure your axes are clearly labelled for a general audience\n\n\n\n6. Explain using Gapminder US Time Series\nHow has GDP per capita in the U.S. changed over time? What major historical events might explain large shifts?"
  },
  {
    "objectID": "courses/stat0118/index.html",
    "href": "courses/stat0118/index.html",
    "title": "STAT 118: Intro to Data Science",
    "section": "",
    "text": "Use the sidebar to navigate through course topics and download notes, templates, and homework assignments."
  },
  {
    "objectID": "courses/stat0118/118_K_maps1.html",
    "href": "courses/stat0118/118_K_maps1.html",
    "title": "Cloropleth Maps with maps and sf",
    "section": "",
    "text": "Before we get started, some context:"
  },
  {
    "objectID": "courses/stat0118/118_K_maps1.html#what-about-subsetting-the-data",
    "href": "courses/stat0118/118_K_maps1.html#what-about-subsetting-the-data",
    "title": "Cloropleth Maps with maps and sf",
    "section": "What about subsetting the data?",
    "text": "What about subsetting the data?\n\n#Subset to get Italy\nitaly &lt;- map_data(\"world\", region =\"Italy\")\n\n#Subset to get USA\nusa &lt;- map_data(\"world\", region =\"USA\")"
  },
  {
    "objectID": "courses/stat0118/118_K_maps1.html#what-if-aspect-ratio-is-not-maintained",
    "href": "courses/stat0118/118_K_maps1.html#what-if-aspect-ratio-is-not-maintained",
    "title": "Cloropleth Maps with maps and sf",
    "section": "What if aspect ratio is not maintained?",
    "text": "What if aspect ratio is not maintained?\n\n# ASPECT RATIO NOT MAINTAINED\nggplot(italy, aes(long, lat)) + \n  geom_polygon(aes(group=group)) + \n  theme_light() +\n  ggtitle(\"Italy - Aspect Ratio Not Maintained (not good)\")\n\n\n\n\n\n# ASPECT RATIO MAINTAINED\nggplot(italy, aes(long, lat)) + \n  geom_polygon(aes(group=group)) + \n  coord_quickmap()  +\n  theme_light() +\n  ggtitle(\"Italy - Aspect Ratio Maintained (better)\")"
  },
  {
    "objectID": "courses/stat0118/118_K_maps1.html#usa-with-states",
    "href": "courses/stat0118/118_K_maps1.html#usa-with-states",
    "title": "Cloropleth Maps with maps and sf",
    "section": "USA with states",
    "text": "USA with states\n\n#Load Data from maps\nusa_states &lt;- map_data(\"state\")\n\n#Plot of USA with state borders\nggplot(usa_states, aes(long, lat)) +\ngeom_polygon(aes(group=group)) +\ncoord_quickmap()"
  },
  {
    "objectID": "courses/stat0118/118_K_maps1.html#how-to-customize-colors",
    "href": "courses/stat0118/118_K_maps1.html#how-to-customize-colors",
    "title": "Cloropleth Maps with maps and sf",
    "section": "How to customize colors?",
    "text": "How to customize colors?\n\nggplot(usa_states, aes(long, lat)) +\ngeom_polygon(aes(group=group), fill =\"#75816b\", color =\"#292c26\") +\ncoord_quickmap() +\ntheme_light()"
  },
  {
    "objectID": "courses/stat0118/118_K_maps1.html#adding-labels",
    "href": "courses/stat0118/118_K_maps1.html#adding-labels",
    "title": "Cloropleth Maps with maps and sf",
    "section": "Adding labels",
    "text": "Adding labels\n\nggplot(nc) + \n  geom_sf() + \n  aes(fill = BIR74) +\n  ggtitle(\"North Carolina, Birth Rates in 1974\") +\n  scale_fill_gradientn(colors = brewer.pal(8, \"Spectral\") ) +  #customize colors\n  theme_light() +\n  geom_sf_text(data = nc[nc$BIR74 &gt;15000,], aes(label = NAME), fontface=\"bold\")"
  },
  {
    "objectID": "courses/stat0118/118_I_joining_notes.html",
    "href": "courses/stat0118/118_I_joining_notes.html",
    "title": "Joining tables with dplyr",
    "section": "",
    "text": "#LOAD PACKAGES\nlibrary(tidyverse)\n\n#LOAD DATA\nlibrary(nycflights23)\ndata(\"flights\")\n\nnycflights23 contains information about all 435352 flights departing NYC in 2023."
  },
  {
    "objectID": "courses/stat0118/118_I_joining_notes.html#matching-key-variable-names",
    "href": "courses/stat0118/118_I_joining_notes.html#matching-key-variable-names",
    "title": "Joining tables with dplyr",
    "section": "Matching key variable names",
    "text": "Matching key variable names\nSome airline names might be easy to guess (ie. “UA” is United Airlines), but what airlines have the code “VX”, “HA”, and “B6”? Data on airline codes is provided in a dataset called airlines.\n\n#data(\"airlines\")\n\nWe want to have all this information in one data frame instead of two separate data frames.\nThe variable carrier in flights match the variable carrier in the airlines dataset – this is our key variable. In this case, they have the same name, but this doesn’t necessarily have to be true."
  },
  {
    "objectID": "courses/stat0118/118_I_joining_notes.html#different-key-variable-names",
    "href": "courses/stat0118/118_I_joining_notes.html#different-key-variable-names",
    "title": "Joining tables with dplyr",
    "section": "Different key variable names",
    "text": "Different key variable names\nSay instead you are interested in the destinations of all domestic flights departing NYC in 2013, and you ask yourself questions like: “What cities are these airports in?”, or “Is”ORD” Orlando?”\n\ndata(\"airports\")\n\nIn airports the airport code is in faa, whereas in flights the airport codes are in origin and dest.\nLet’s construct the chain of pipe operators %&gt;% that computes the number of flights from NYC to each destination, but also includes information about each destination airport:"
  },
  {
    "objectID": "courses/stat0118/118_I_joining_notes.html#multiple-key-variables",
    "href": "courses/stat0118/118_I_joining_notes.html#multiple-key-variables",
    "title": "Joining tables with dplyr",
    "section": "Multiple Key variables",
    "text": "Multiple Key variables\nIn order to join the flights and weather data frames, we need more than one key variable: year, month, day, hour, and origin. This is because the combination of these 5 variables act to uniquely identify each observational unit in the weather data frame: hourly weather recordings at each of the 3 NYC airports.\n\ndata(\"weather\")"
  },
  {
    "objectID": "courses/stat0118/118_I_joining_notes.html#why-is-this-useful",
    "href": "courses/stat0118/118_I_joining_notes.html#why-is-this-useful",
    "title": "Joining tables with dplyr",
    "section": "Why is this useful?",
    "text": "Why is this useful?\nUpdating labels:\n\nflights %&gt;% \nggplot(aes(x = carrier, fill = origin)) +\n  geom_bar() + \n  coord_flip()\n\n#VS\n\nflights %&gt;% \n  inner_join(airports, by = c(\"origin\" = \"faa\")) %&gt;% \n  rename(origin_airport = name) %&gt;% \n  inner_join(airlines, by = c(\"carrier\")) %&gt;%  \n  rename(carrier_name= name) %&gt;% \nggplot(mapping = aes(x = carrier_name, fill = origin_airport)) +\n  geom_bar() + \n  coord_flip()\n\nExploring relationships between variables in separate tables:\n\nflights_weather_joined %&gt;% \n  filter(dep_delay &gt;0) %&gt;% \n  ggplot(aes(x=temp, y=dep_delay)) +\n  geom_point()"
  },
  {
    "objectID": "courses/stat0118/118_D_ggplot_notes.html",
    "href": "courses/stat0118/118_D_ggplot_notes.html",
    "title": "Making plots with ggplot2: Barplots and Scatterplots",
    "section": "",
    "text": "ggplot2 is a package built within the tidyverse package for creating awesome graphs!\n\nlibrary(tidyverse)\n\n\n#Import the can_lang dataset \ncan_lang &lt;- read.csv(\"https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv\")\n\n\nRecall our Top 10 example:\nThis code gave a list of 10 Aboriginal Languages which have the most number of people who speak them as their mother tongue:\n\nten_lang &lt;- can_lang %&gt;%  \n  filter(category == \"Aboriginal languages\") %&gt;% \n  arrange(desc(mother_tongue)) %&gt;% \n  select(language, mother_tongue) %&gt;%  \n  slice(1:10) #\n\n\n\nBarplots\nSuppose we wanted to display this information in a barplot instead of in a table.\nIs there any improvements we could make to this graph?\n\n\nTo better view text\nDisplay the bars horizontally instead of vertically!\n\nThis flips the x and y axes!\n\n\n\nLabels, Colors, and Themes\n\nggplot(ten_lang, aes(x = mother_tongue, y = language)) +\n  geom_bar(stat = \"identity\") \n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nBarplots are good for displaying one categorical variable and one numeric variable. The number variable could be counts (as above) or they could be averages or totals or maximums or minimums (or many other things!)\n\n\n\n\nggplot: scatterplot with geom_point\n\n\n\n\n\n\nTip\n\n\n\nScatterplots are good for displaying the relationship between two numerical variables.\n\n\nThe mtcars dataset was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models). It’s available inside the ggplot package which is already installed.\n\n#load the data\ndata(mtcars)\n\nNote that you can change the color, shape (pch for plotting character) and size of these points!\n\nQuick update to the dataset\n\n#code to update `mtcars` dataset so that `am` is treated as a factor rather than a continuous numeric variable\nmtcars &lt;- mtcars %&gt;%  \n  mutate(am = as.factor(am)) \n\nThis modifies the am column, which represents the transmission type of the car (0 = automatic, 1 = manual). The as.factor(am) function converts the am variable from a numeric type (0 or 1) into a categorical factor.\n\n\n\nInside aes() or outside aes()?\nWhat is the difference between these two graphs?\n\nggplot(mtcars, aes(x=wt, y=mpg)) +\n  geom_point(color=\"red\") \n\n\n\n\n\nggplot(mtcars, aes(x=wt, y=mpg)) +\n  geom_point(aes(color=am))\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nIf the thing you are trying to change (color, shape, size, etc.) depends on a variable, you should put in inside the aesthetics\nIf the thing you are trying to change (color, shape, size, etc.) should happen for all things, you should not put it inside the aesthetics.\n\n\n\n\n\nCustomizing Colors in Aesthetics\n\n#color in aesthetics\nggplot(mtcars, aes(x=wt, y=mpg)) +\n  geom_point(aes(color=am)) +\n  scale_color_manual(values=c(\"black\", \"orange\")) \n\n\n\n\n\n\nGlobal vs. Local Aesthetics\nGlobal aesthetic mappings apply to all geometries and can be defined when you initially call ggplot(). All the geometries added as layers will default to this mapping. Local aesthetic mappings add additional information or override the default mappings.\n\n#color = am as a global aethetic\nggplot(mtcars, aes(x=wt, y=mpg, color=am)) +\n  geom_point()\n\n\n\n\n\n#color = am as a local aethetic\nggplot(mtcars, aes(x=wt, y=mpg)) +\n  geom_point(aes(color=am))\n\n\n\n\n\n#overwriting color = am as a global aethetic with a local aesthetic\nggplot(mtcars, aes(x=wt, y=mpg, color=am)) +\n  geom_point(color=\"purple\")"
  },
  {
    "objectID": "courses/stat0118/118_F_ggplot_3_notes.html",
    "href": "courses/stat0118/118_F_ggplot_3_notes.html",
    "title": "Customizing Plots",
    "section": "",
    "text": "library(tidyverse)\n#Import the can_lang dataset \ncan_lang &lt;- read.csv(\"https://raw.githubusercontent.com/ttimbers/canlang/master/inst/extdata/can_lang.csv\")"
  },
  {
    "objectID": "courses/stat0118/118_F_ggplot_3_notes.html#logarithmic-axes-transformations",
    "href": "courses/stat0118/118_F_ggplot_3_notes.html#logarithmic-axes-transformations",
    "title": "Customizing Plots",
    "section": "Logarithmic Axes Transformations",
    "text": "Logarithmic Axes Transformations\n\n\n\n\n\n\nApplying a Log Transformation\n\n\n\nWhen you apply a log transformation to an axis (or both axes) in a plot, you convert values using a logarithmic scale instead of a linear scale. This means:\n\nInstead of evenly spaced values (1, 2, 3, 4, …), a logarithmic scale spaces values exponentially (1, 10, 100, 1000, …).\nThe distance between ticks represents a multiplicative factor instead of an additive one.\n\n\n\n\n\n\nSee how much more clearly we can see all the points!\n\n\nFor you to do this yourself, you need to use scale_*_log10() instead of scale_*_continuous():\n\ncan_lang_plot \n\n\n\n\n\nconverts x-axis to a log-scale\nconverts y-axis to a log-scale\n\n\n\n\n\n\n\nUse ✅ scale_*_log10() instead of 🚫log(variable)"
  },
  {
    "objectID": "courses/stat0118/118_F_ggplot_3_notes.html#using-percents-on-a-log-scale",
    "href": "courses/stat0118/118_F_ggplot_3_notes.html#using-percents-on-a-log-scale",
    "title": "Customizing Plots",
    "section": "Using percents on a log scale",
    "text": "Using percents on a log scale\n\nmutate to create new columns with percentage of Canadians who speak the language as their mother tongue:\n\ncan_lang &lt;- can_lang %&gt;%\n  mutate(\n    mother_tongue_percent = (mother_tongue / 35151728) * 100,\n    most_at_home_percent = (most_at_home / 35151728) * 100\n  )\n\n\n\nScatterplot with Percents and Colors\nCreate a scatterplot with most_at_home_percent and mother_tongue_percent. Vary the color and shape of the points depending on the category of language. You may need to adjust the position of the legend:\n\ncan_lang_percent_plot &lt;- ggplot(can_lang, aes(x = most_at_home,  \n                     y = mother_tongue )) +  \n  geom_point(aes(color = category, shape=category), alpha=0.5) +\n  xlab(\"Language spoken most at home \\n (percentage of Canadian residents)\") +\n  ylab(\"Mother tongue \\n (percentage of Canadian residents)\") +\n  theme(legend.position = \"top\", legend.direction = \"vertical\") +\n  scale_x_log10(labels = comma) +\n  scale_y_log10(labels = comma)\n\ncan_lang_percent_plot"
  },
  {
    "objectID": "courses/stat0118/118_F_ggplot_3_notes.html#using-ggrepel",
    "href": "courses/stat0118/118_F_ggplot_3_notes.html#using-ggrepel",
    "title": "Customizing Plots",
    "section": "Using ggrepel",
    "text": "Using ggrepel\n\n\n\nArtwork by @allisonhorst\n\n\n\nlibrary(ggrepel)\n\ncan_lang_percent_plot"
  },
  {
    "objectID": "courses/stat0118/118_F_ggplot_3_notes.html#subset-the-labels",
    "href": "courses/stat0118/118_F_ggplot_3_notes.html#subset-the-labels",
    "title": "Customizing Plots",
    "section": "Subset the labels",
    "text": "Subset the labels\nCreate a new column for the labels. Use case_when (or ifelse) to only use the official language names and not to put a label for other language categories.\n\ncan_lang &lt;- can_lang %&gt;% \n  mutate(official_languages = case_when(category == \"Official languages\" ~ language, TRUE ~ NA ))\n\n\ncan_lang_percent_plot \n\n\n\n\n\n# We need to redo the base plot with the new can_lang dataset with the new official_languages column in it \ncan_lang_percent_plot &lt;- ggplot(can_lang, aes(x = most_at_home_percent,  y = mother_tongue_percent)) +\n  geom_point(aes(color = category, shape=category)) +\n  xlab(\"Language spoken most at home \\n (percentage of Canadian residents)\") +\n  ylab(\"Mother tongue \\n (percentage of Canadian residents)\") +\n  theme(legend.position = \"top\", legend.direction = \"vertical\") + \n  scale_x_log10(labels = comma) +\n  scale_y_log10(labels = comma)"
  },
  {
    "objectID": "courses/stat0118/118_C_aggregating_homework.html",
    "href": "courses/stat0118/118_C_aggregating_homework.html",
    "title": "STAT 118: Homework C",
    "section": "",
    "text": "Code\n#LOAD PACKAGES \nlibrary(tidyverse)\n\n\n\n\nCode\n#LOAD DATASET\n# This iris dataset should be built into base R (no need to download a package). Just run the code below to load it. \ndata(\"iris\")\n\n\nThis famous (Fisher’s or Anderson’s) iris data set gives the measurements in centimeters of the variables sepal length and width and petal length and width, respectively, for 50 flowers from each of 3 species of iris. The species are Iris setosa, versicolor, and virginica.\n\n1.\nVerify using group_by and summarize that there are indeed 50 different flowers from each of the different species of iris.\n\n\n2.\nCreate a table which displays the average sepal length and average sepal width for the setosa species of iris. No other data should be in this table.\n\n\n3.\nCreate a table which displays the average sepal length and the median sepal length for the setosa species of iris. No other data should be in this table.\n\n\n4.\nCreate a table which displays the minimum sepal length and the maximum sepal length for each of the three different species of iris.\n\n\n5.\nCreate one table which displays the minimum sepal length and the maximum sepal length for the species setosa and versicolor. Note that this table should not include any information about the virginica species. (This might be a challenge, but you can do it!)"
  },
  {
    "objectID": "courses/stat0118/archive_118_D_kable.html",
    "href": "courses/stat0118/archive_118_D_kable.html",
    "title": "Pretty tables with kableExtra",
    "section": "",
    "text": "#LOAD PACKAGES \nlibrary(tidyverse)\n\n\n#LOAD DATA \nlibrary(palmerpenguins)\ndata(penguins)\n\n#CLEAN UP DATA\npenguins &lt;- penguins %&gt;%\n  drop_na()\n#sometimes this is appropriate. It's questionable here... \n\n\ndefault printing style of a table\nLet’s consider our table from last class:\n\npenguins %&gt;%\n  group_by(species) %&gt;%\n  summarise(average_bill_lenth = mean(bill_length_mm), \n            average_bill_depth = mean(bill_depth_mm))\n\n# A tibble: 3 × 3\n  species   average_bill_lenth average_bill_depth\n  &lt;fct&gt;                  &lt;dbl&gt;              &lt;dbl&gt;\n1 Adelie                  38.8               18.3\n2 Chinstrap               48.8               18.4\n3 Gentoo                  47.6               15.0\n\n\nWhen we knit this up it looks like of ugly…\n\n\nUsing kable to get pretty tables\n\nlibrary(kableExtra)\n\n\npenguins %&gt;%\n  group_by(species) %&gt;%\n  summarise(average_bill_length = mean(bill_length_mm), \n            average_bill_depth = mean(bill_depth_mm)) %&gt;% \n  kbl()\n\n\n\n\nspecies\naverage_bill_length\naverage_bill_depth\n\n\n\n\nAdelie\n38.82397\n18.34726\n\n\nChinstrap\n48.83382\n18.42059\n\n\nGentoo\n47.56807\n14.99664\n\n\n\n\n\n\n#OR \n\ntable1 &lt;- penguins %&gt;%\n  group_by(species) %&gt;%\n  summarise(average_bill_length = mean(bill_length_mm), \n            average_bill_depth = mean(bill_depth_mm))\n\nkbl(table1)\n\n\n\n\nspecies\naverage_bill_length\naverage_bill_depth\n\n\n\n\nAdelie\n38.82397\n18.34726\n\n\nChinstrap\n48.83382\n18.42059\n\n\nGentoo\n47.56807\n14.99664\n\n\n\n\n\n\n\n\n\nOptions in kable\nWe customize the content so it’s displaying the information more clearly.\n\ntable1 %&gt;%\n  kbl(col.names = c(\"Species\", \"Average Bill Length\", \"Average Bill Depth\"), \n    caption = \"Average Bill Characteristics by Species\", \n    digits = 2)\n\n\nAverage Bill Characteristics by Species\n\n\nSpecies\nAverage Bill Length\nAverage Bill Depth\n\n\n\n\nAdelie\n38.82\n18.35\n\n\nChinstrap\n48.83\n18.42\n\n\nGentoo\n47.57\n15.00\n\n\n\n\n\n\n\nBetter…\n\n\npretty styling\n\ntable1 %&gt;%\n  kbl(col.names = c(\"Species\", \"Average Bill Length\", \"Average Bill Depth\"), \n    caption = \"Average Bill Characteristics by Species\", \n    digits = 2) %&gt;%\n  kable_styling()\n\n\nAverage Bill Characteristics by Species\n\n\nSpecies\nAverage Bill Length\nAverage Bill Depth\n\n\n\n\nAdelie\n38.82\n18.35\n\n\nChinstrap\n48.83\n18.42\n\n\nGentoo\n47.57\n15.00\n\n\n\n\n\n\n\nMany options for customizing the look of the tables – more here: https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html\nLet’s try one…\nLet’s make each row’s color correspond to\n\ntable1 %&gt;%\n  kbl(col.names = c(\"Species\", \"Average Bill Length\", \"Average Bill Depth\"), \n    caption = \"Average Bill Characteristics by Species\", \n    digits = 2) %&gt;%\n  kable_paper() %&gt;%\n  column_spec(1, bold=T) %&gt;%\n  row_spec(2, color = \"#c85bcc\") %&gt;%\n  row_spec(3, color = \"#067176\") %&gt;%\n  row_spec(1, color = \"#ff7501\")\n\n\nAverage Bill Characteristics by Species\n\n\nSpecies\nAverage Bill Length\nAverage Bill Depth\n\n\n\n\nAdelie\n38.82\n18.35\n\n\nChinstrap\n48.83\n18.42\n\n\nGentoo\n47.57\n15.00\n\n\n\n\n\n\n\nRStudio hosts a table contest every year!\n\nHere is a link to this year’s contest https://www.rstudio.com/blog/rstudio-table-contest-2022/\nHere is a link to previous year’s entries and winners to explore what is possible! https://community.rstudio.com/c/table-gallery/64\n\n\n\n\n\n\n\nTip\n\n\n\nAs a general rule, you should have the content of the table as you’d like it (the exact columns and rows you want) first and then you can make it pretty using the kableExtra package."
  },
  {
    "objectID": "courses/stat0118/118_I_joining.html",
    "href": "courses/stat0118/118_I_joining.html",
    "title": "Joining tables with dplyr",
    "section": "",
    "text": "#LOAD PACKAGES\nlibrary(tidyverse)\n\n#LOAD DATA\nlibrary(nycflights23)\ndata(\"flights\")\n\nnycflights23 contains information about all 435352 flights departing NYC in 2023."
  },
  {
    "objectID": "courses/stat0118/118_I_joining.html#matching-key-variable-names",
    "href": "courses/stat0118/118_I_joining.html#matching-key-variable-names",
    "title": "Joining tables with dplyr",
    "section": "Matching key variable names",
    "text": "Matching key variable names\nSome airline names might be easy to guess (ie. “UA” is United Airlines), but what airlines have the code “VX”, “HA”, and “B6”? Data on airline codes is provided in a dataset called airlines.\n\n#data(\"airlines\")\n\nWe want to have all this information in one data frame instead of two separate data frames.\nThe variable carrier in flights match the variable carrier in the airlines dataset – this is our key variable. In this case, they have the same name, but this doesn’t necessarily have to be true.\n\nflights_joined &lt;- flights %&gt;% \n  inner_join(airlines, by=\"carrier\")"
  },
  {
    "objectID": "courses/stat0118/118_I_joining.html#different-key-variable-names",
    "href": "courses/stat0118/118_I_joining.html#different-key-variable-names",
    "title": "Joining tables with dplyr",
    "section": "Different key variable names",
    "text": "Different key variable names\nSay instead you are interested in the destinations of all domestic flights departing NYC in 2013, and you ask yourself questions like: “What cities are these airports in?”, or “Is”ORD” Orlando?”\n\ndata(\"airports\")\n\nIn airports the airport code is in faa, whereas in flights the airport codes are in origin and dest.\n\nflights_with_airport_names &lt;- flights %&gt;% \n  inner_join(airports, by = c(\"dest\" = \"faa\"))\n\nLet’s construct the chain of pipe operators %&gt;% that computes the number of flights from NYC to each destination, but also includes information about each destination airport:\n\nnamed_dests &lt;- flights %&gt;%\n  group_by(dest) %&gt;%\n  summarize(num_flights = n()) %&gt;%\n  arrange(desc(num_flights)) %&gt;%\n  inner_join(airports, by = c(\"dest\" = \"faa\")) %&gt;%\n  rename(airport_name = name)\nnamed_dests\n\n# A tibble: 114 × 9\n   dest  num_flights airport_name             lat    lon   alt    tz dst   tzone\n   &lt;chr&gt;       &lt;int&gt; &lt;chr&gt;                  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n 1 BOS         19036 General Edward Lawren…  42.4  -71.0    20    -5 A     Amer…\n 2 ORD         18200 Chicago O'Hare Intern…  42.0  -87.9   672    -6 A     Amer…\n 3 MCO         17756 Orlando International…  28.4  -81.3    96    -5 A     Amer…\n 4 ATL         17570 Hartsfield Jackson At…  33.6  -84.4  1026    -5 A     Amer…\n 5 MIA         16076 Miami International A…  25.8  -80.3     8    -5 A     Amer…\n 6 LAX         15968 Los Angeles Internati…  33.9 -118.    125    -8 A     Amer…\n 7 FLL         14239 Fort Lauderdale Holly…  26.1  -80.2     9    -5 A     Amer…\n 8 CLT         12866 Charlotte Douglas Int…  35.2  -80.9   748    -5 A     Amer…\n 9 DFW         11675 Dallas Fort Worth Int…  32.9  -97.0   607    -6 A     Amer…\n10 SFO         11651 San Francisco Interna…  37.6 -122.     13    -8 A     Amer…\n# ℹ 104 more rows"
  },
  {
    "objectID": "courses/stat0118/118_I_joining.html#multiple-key-variables",
    "href": "courses/stat0118/118_I_joining.html#multiple-key-variables",
    "title": "Joining tables with dplyr",
    "section": "Multiple Key variables",
    "text": "Multiple Key variables\nIn order to join the flights and weather data frames, we need more than one key variable: year, month, day, hour, and origin. This is because the combination of these 5 variables act to uniquely identify each observational unit in the weather data frame: hourly weather recordings at each of the 3 NYC airports.\n\ndata(\"weather\")\n\n\nflights_weather_joined &lt;- flights %&gt;%\n  inner_join(weather, by = c(\"year\", \"month\", \"day\", \"hour\", \"origin\"))"
  },
  {
    "objectID": "courses/stat0118/118_I_joining.html#why-is-this-useful",
    "href": "courses/stat0118/118_I_joining.html#why-is-this-useful",
    "title": "Joining tables with dplyr",
    "section": "Why is this useful?",
    "text": "Why is this useful?\nUpdating labels:\n\nflights %&gt;% \nggplot(aes(x = carrier, fill = origin)) +\n  geom_bar() + \n  coord_flip()\n\n\n\n#VS\n\nflights %&gt;% \n  inner_join(airports, by = c(\"origin\" = \"faa\")) %&gt;% \n  rename(origin_airport = name) %&gt;% \n  inner_join(airlines, by = c(\"carrier\")) %&gt;%  \n  rename(carrier_name= name) %&gt;% \nggplot(mapping = aes(x = carrier_name, fill = origin_airport)) +\n  geom_bar() + \n  coord_flip()\n\n\n\n\nExploring relationships between variables in separate tables:\n\nflights_weather_joined %&gt;% \n  filter(dep_delay &gt;0) %&gt;% \n  ggplot(aes(x=temp, y=dep_delay)) +\n  geom_point()"
  },
  {
    "objectID": "courses/stat0118/118_E_ggplot_2_notes.html",
    "href": "courses/stat0118/118_E_ggplot_2_notes.html",
    "title": "Making plots with ggplot2: histograms, boxplots, line graphs",
    "section": "",
    "text": "# load packages\nlibrary(tidyverse)"
  },
  {
    "objectID": "courses/stat0118/118_E_ggplot_2_notes.html#without-the-needed-group-command",
    "href": "courses/stat0118/118_E_ggplot_2_notes.html#without-the-needed-group-command",
    "title": "Making plots with ggplot2: histograms, boxplots, line graphs",
    "section": "Without the needed group command",
    "text": "Without the needed group command\n\n# Incorrect: Only one line drawn without group\nggplot(df, aes(x = time, y = value)) +\n  geom_line() +\n  ggtitle(\"Incorrect - Missing Group\")"
  },
  {
    "objectID": "courses/stat0118/118_E_ggplot_2_notes.html#with-the-group-command",
    "href": "courses/stat0118/118_E_ggplot_2_notes.html#with-the-group-command",
    "title": "Making plots with ggplot2: histograms, boxplots, line graphs",
    "section": "With the group command",
    "text": "With the group command\n\n# Correct: Separate lines for each category using group\nggplot(df, aes(x = time, y = value, group = category)) +\n  geom_line() +\n  ggtitle(\"Correct - Grouped by Category\")"
  },
  {
    "objectID": "courses/stat0118/118_E_ggplot_2_notes.html#using-color-or-linetype-instead",
    "href": "courses/stat0118/118_E_ggplot_2_notes.html#using-color-or-linetype-instead",
    "title": "Making plots with ggplot2: histograms, boxplots, line graphs",
    "section": "Using color (or linetype) instead",
    "text": "Using color (or linetype) instead\n\n# Automatically groups by color\nggplot(df, aes(x = time, y = value, color = category)) +\n  geom_line() +\n  ggtitle(\"Grouping by Color\")"
  },
  {
    "objectID": "courses/stat0118/118_P_webscraping_text.html",
    "href": "courses/stat0118/118_P_webscraping_text.html",
    "title": "Webscraping Text",
    "section": "",
    "text": "#LOAD PACKAGES \nlibrary(tidyverse)\nlibrary(rvest)"
  },
  {
    "objectID": "courses/stat0118/118_P_webscraping_text.html#titles",
    "href": "courses/stat0118/118_P_webscraping_text.html#titles",
    "title": "Webscraping Text",
    "section": "Titles",
    "text": "Titles\nFor example, check out the first few lines of html code for Oppenheimer:\n&lt;h3 class=\"lister-item-header\"&gt;\n        &lt;span class=\"lister-item-index unbold text-primary\"&gt;1.&lt;/span&gt;\n    &lt;a href=\"/title/tt15398776/?ref_=adv_li_tt\"\n&gt;Oppenheimer&lt;/a&gt;\n    &lt;span class=\"lister-item-year text-muted unbold\"&gt;(2023)&lt;/span&gt;\n&lt;/h3&gt;\nIn this case, we want to look for the class lister-item-header AND then pull the text inside the &lt;a&gt; (link) tag.\nhtml_elements(\".lister-item-header a\")\n\n\n\n\n\n\nTip\n\n\n\nIn this case, we want ALL titles so we used html_elements(). If we had only wanted the first title we would have used html_element()\n\n\nScrape IMBD for the titles of the 50 most popular feature films in the first 7 months of 2023.\n\n# title_data &lt;- URL %&gt;%\n#   html_elements(\".lister-item-header a\") %&gt;%\n#   html_text()\n# \n# title_data"
  },
  {
    "objectID": "courses/stat0118/118_P_webscraping_text.html#runtime",
    "href": "courses/stat0118/118_P_webscraping_text.html#runtime",
    "title": "Webscraping Text",
    "section": "Runtime",
    "text": "Runtime\nScrape IMBD for the runtime of the 50 most popular feature films so far in 2023.\nCheck out the relevant HTML code for Oppenheimer:\n    &lt;p class=\"text-muted \"&gt;\n            &lt;span class=\"certificate\"&gt;R&lt;/span&gt;\n                 &lt;span class=\"ghost\"&gt;|&lt;/span&gt; \n                 &lt;span class=\"runtime\"&gt;180 min&lt;/span&gt;\n                 &lt;span class=\"ghost\"&gt;|&lt;/span&gt; \n            &lt;span class=\"genre\"&gt;\nBiography, Drama, History            &lt;/span&gt;\n    &lt;/p&gt;\nIn this case, we need to reference the class text-muted AND the class runtime.\n\n# URL %&gt;%\n#   html_nodes(\".text-muted .runtime\") %&gt;%\n#   html_text() \n\nAlternatively, we could have called class text-muted AND the 3rd span, but it’s easier and likely more accurate to ask for the class runtime in case runtime is missing for some reason.\nMaybe we want to keep the min on the end, but it forces it into being a stringr rather than a number which makes it difficult to sort or filter.\n\nlibrary(readr)\n# need this package for parse_number()\n\n\n\n\nArtwork by @allisonhorst\n\n\n\n# runtime_data &lt;- URL %&gt;%\n#   html_nodes(\".text-muted .runtime\") %&gt;%\n#   html_text() %&gt;%\n#   parse_number() %&gt;% #this picks out only the numbers (and drops characters, in this case, \"mins\")\n#   as.numeric()\n# \n# runtime_data"
  },
  {
    "objectID": "courses/stat0118/118_P_webscraping_text.html#ratings",
    "href": "courses/stat0118/118_P_webscraping_text.html#ratings",
    "title": "Webscraping Text",
    "section": "Ratings",
    "text": "Ratings\nScrape IMBD for the ratings of the 50 most popular feature films in the first 7 months of 2023.\nCheck out the relevant HTML code for Oppenheimer:\n    &lt;div class=\"inline-block ratings-imdb-rating\" name=\"ir\" data-value=\"8.6\"&gt;\n        &lt;span class=\"global-sprite rating-star imdb-rating\"&gt;&lt;/span&gt;\n        &lt;strong&gt;8.6&lt;/strong&gt;\n    &lt;/div&gt;\nLet’s scrape it!\n\n# rating_data &lt;- URL %&gt;%\n#   html_elements(\".ratings-imdb-rating strong\") %&gt;%\n#   html_text() %&gt;%\n#   as.numeric()\n# \n# rating_data\n\n\n\n\n\n\n\nWarning\n\n\n\nNotice that there are only 49 ratings listed, not 50! There is no way to figure out which one is missing besides doing it by hand…\nWhich one is it?\nOnce we figure out which one is it is, we should should add a blank element for the rating for that movie using the append function.\nrating_data &lt;- append(rating_data, values=FALSE, after=11)\n\n\nIt’s Killers of the Flower Moon (#32)!\n\n#rating_data &lt;- append(rating_data, values=NA, after=31)\n\nNotice how it is the correct length (50) now!"
  },
  {
    "objectID": "courses/stat0118/118_P_webscraping_text.html#number-of-votes",
    "href": "courses/stat0118/118_P_webscraping_text.html#number-of-votes",
    "title": "Webscraping Text",
    "section": "Number of Votes",
    "text": "Number of Votes\nScrape IMBD for the number of votes of the 50 most popular feature films in the first 7 months of 2023.\nRelevant code for Oppenheimer:\n        &lt;p class=\"sort-num_votes-visible\"&gt;\n                &lt;span class=\"text-muted\"&gt;Votes:&lt;/span&gt;\n                &lt;span name=\"nv\" data-value=\"391689\"&gt;391,689&lt;/span&gt;\n        &lt;/p&gt;\nLet’s scrape it!\n\n# votes_data &lt;- URL %&gt;%\n#   html_elements(\".sort-num_votes-visible span:nth-child(2)\") %&gt;%\n#   html_text() %&gt;%\n#   parse_number() %&gt;%\n#   as.numeric()\n# \n# votes_data\n\n\n\n\n\n\n\nWarning\n\n\n\nSame issue as before! We were supposed to have 50 but only got 49. It’s Killers of the Flower Moon (#32), again!\n\n#votes_data &lt;- append(votes_data, values=NA, after=31)"
  },
  {
    "objectID": "courses/stat0118/118_P_webscraping_text.html#metascore",
    "href": "courses/stat0118/118_P_webscraping_text.html#metascore",
    "title": "Webscraping Text",
    "section": "Metascore",
    "text": "Metascore\nScrape IMBD for the number of votes of the 50 most popular feature films in the first 7 months of 2023.\nRelevant code for Oppenheimer:\n            &lt;div class=\"inline-block ratings-metascore\"&gt;\n&lt;span class=\"metascore  favorable\"&gt;88        &lt;/span&gt;\n        Metascore\n            &lt;/div&gt;\nLet’s scrape it!\n\n# metascore_data &lt;- URL %&gt;%\n#   html_elements(\".metascore\") %&gt;%\n#   html_text() %&gt;%\n#   parse_number() %&gt;%\n#   as.numeric()\n# \n# metascore_data\n\n\n\n\n\n\n\nWarning\n\n\n\nYikes! Now we only have 41 when we should have 50.\nWe could manually go through and figure out which 9 are missing or we could reassess how important the metascore data is to us…"
  },
  {
    "objectID": "courses/stat0118/118_janitor.html",
    "href": "courses/stat0118/118_janitor.html",
    "title": "Cleaning data using janitor",
    "section": "",
    "text": ":::call-out tip Data scientists, according to interviews and expert estimates, spend from 50 percent to 80 percent of their time mired in this more mundane labor of collecting and preparing unruly digital data, before it can be explored for useful nuggets.\n– “For Big-Data Scientists, ‘Janitor Work’ Is Key Hurdle to Insight” (New York Times, 2014) :::\n\n\n\nArtwork by @allisonhorst\n\n\nMore Coming Soon!"
  },
  {
    "objectID": "courses/stat0118/118_P_Webscraping_Text_Notes (1).html",
    "href": "courses/stat0118/118_P_Webscraping_Text_Notes (1).html",
    "title": "STAT 118: Notes P",
    "section": "",
    "text": "#LOAD PACKAGES \nlibrary(tidyverse)\nlibrary(rvest)"
  },
  {
    "objectID": "courses/stat0118/118_P_Webscraping_Text_Notes (1).html#titles",
    "href": "courses/stat0118/118_P_Webscraping_Text_Notes (1).html#titles",
    "title": "STAT 118: Notes P",
    "section": "Titles",
    "text": "Titles\nFor example, check out the first few lines of html code for Oppenheimer:\n&lt;h3 class=\"lister-item-header\"&gt;\n        &lt;span class=\"lister-item-index unbold text-primary\"&gt;1.&lt;/span&gt;\n    &lt;a href=\"/title/tt15398776/?ref_=adv_li_tt\"\n&gt;Oppenheimer&lt;/a&gt;\n    &lt;span class=\"lister-item-year text-muted unbold\"&gt;(2023)&lt;/span&gt;\n&lt;/h3&gt;\nIn this case, we want to look for the class lister-item-header AND then pull the text inside the &lt;a&gt; (link) tag.\nhtml_elements(\".lister-item-header a\")\n\n\n\n\n\n\nTip\n\n\n\nIn this case, we want ALL titles so we used html_elements(). If we had only wanted the first title we would have used html_element()\n\n\nScrape IMBD for the titles of the 50 most popular feature films in the first 7 months of 2023.\n\ntitle_data &lt;- URL %&gt;%\n  html_elements(\".lister-item-header a\") %&gt;%\n  html_text()\n\ntitle_data"
  },
  {
    "objectID": "courses/stat0118/118_P_Webscraping_Text_Notes (1).html#runtime",
    "href": "courses/stat0118/118_P_Webscraping_Text_Notes (1).html#runtime",
    "title": "STAT 118: Notes P",
    "section": "Runtime",
    "text": "Runtime\nScrape IMBD for the runtime of the 50 most popular feature films so far in 2023.\nCheck out the relevant HTML code for Oppenheimer:\n    &lt;p class=\"text-muted \"&gt;\n            &lt;span class=\"certificate\"&gt;R&lt;/span&gt;\n                 &lt;span class=\"ghost\"&gt;|&lt;/span&gt; \n                 &lt;span class=\"runtime\"&gt;180 min&lt;/span&gt;\n                 &lt;span class=\"ghost\"&gt;|&lt;/span&gt; \n            &lt;span class=\"genre\"&gt;\nBiography, Drama, History            &lt;/span&gt;\n    &lt;/p&gt;\nIn this case, we need to reference the class text-muted AND the class runtime.\n\nURL %&gt;%\n  html_nodes(\".text-muted .runtime\") %&gt;%\n  html_text() \n\nAlternatively, we could have called class text-muted AND the 3rd span, but it’s easier and likely more accurate to ask for the class runtime in case runtime is missing for some reason.\nMaybe we want to keep the min on the end, but it forces it into being a stringr rather than a number which makes it difficult to sort or filter.\n\nlibrary(readr)\n# need this package for parse_number()\n\n\n\n\nArtwork by @allisonhorst\n\n\n\nruntime_data &lt;- URL %&gt;%\n  html_nodes(\".text-muted .runtime\") %&gt;%\n  html_text() %&gt;%\n  parse_number() %&gt;% #this picks out only the numbers (and drops characters, in this case, \"mins\")\n  as.numeric()\n\nruntime_data"
  },
  {
    "objectID": "courses/stat0118/118_P_Webscraping_Text_Notes (1).html#ratings",
    "href": "courses/stat0118/118_P_Webscraping_Text_Notes (1).html#ratings",
    "title": "STAT 118: Notes P",
    "section": "Ratings",
    "text": "Ratings\nScrape IMBD for the ratings of the 50 most popular feature films in the first 7 months of 2023.\nCheck out the relevant HTML code for Oppenheimer:\n    &lt;div class=\"inline-block ratings-imdb-rating\" name=\"ir\" data-value=\"8.6\"&gt;\n        &lt;span class=\"global-sprite rating-star imdb-rating\"&gt;&lt;/span&gt;\n        &lt;strong&gt;8.6&lt;/strong&gt;\n    &lt;/div&gt;\nLet’s scrape it!\n\nrating_data &lt;- URL %&gt;%\n  html_elements(\".ratings-imdb-rating strong\") %&gt;%\n  html_text() %&gt;%\n  as.numeric()\n\nrating_data\n\n\n\n\n\n\n\nWarning\n\n\n\nNotice that there are only 49 ratings listed, not 50! There is no way to figure out which one is missing besides doing it by hand…\nWhich one is it?\nOnce we figure out which one is it is, we should should add a blank element for the rating for that movie using the append function.\nrating_data &lt;- append(rating_data, values=FALSE, after=11)\n\n\nIt’s Killers of the Flower Moon (#32)!\n\nrating_data &lt;- append(rating_data, values=NA, after=31)\n\nNotice how it is the correct length (50) now!"
  },
  {
    "objectID": "courses/stat0118/118_P_Webscraping_Text_Notes (1).html#number-of-votes",
    "href": "courses/stat0118/118_P_Webscraping_Text_Notes (1).html#number-of-votes",
    "title": "STAT 118: Notes P",
    "section": "Number of Votes",
    "text": "Number of Votes\nScrape IMBD for the number of votes of the 50 most popular feature films in the first 7 months of 2023.\nRelevant code for Oppenheimer:\n        &lt;p class=\"sort-num_votes-visible\"&gt;\n                &lt;span class=\"text-muted\"&gt;Votes:&lt;/span&gt;\n                &lt;span name=\"nv\" data-value=\"391689\"&gt;391,689&lt;/span&gt;\n        &lt;/p&gt;\nLet’s scrape it!\n\nvotes_data &lt;- URL %&gt;%\n  html_elements(\".sort-num_votes-visible span:nth-child(2)\") %&gt;%\n  html_text() %&gt;%\n  parse_number() %&gt;%\n  as.numeric()\n\nvotes_data\n\n\n\n\n\n\n\nWarning\n\n\n\nSame issue as before! We were supposed to have 50 but only got 49. It’s Killers of the Flower Moon (#32), again!\n\nvotes_data &lt;- append(votes_data, values=NA, after=31)"
  },
  {
    "objectID": "courses/stat0118/118_P_Webscraping_Text_Notes (1).html#metascore",
    "href": "courses/stat0118/118_P_Webscraping_Text_Notes (1).html#metascore",
    "title": "STAT 118: Notes P",
    "section": "Metascore",
    "text": "Metascore\nScrape IMBD for the number of votes of the 50 most popular feature films in the first 7 months of 2023.\nRelevant code for Oppenheimer:\n            &lt;div class=\"inline-block ratings-metascore\"&gt;\n&lt;span class=\"metascore  favorable\"&gt;88        &lt;/span&gt;\n        Metascore\n            &lt;/div&gt;\nLet’s scrape it!\n\nmetascore_data &lt;- URL %&gt;%\n  html_elements(\".metascore\") %&gt;%\n  html_text() %&gt;%\n  parse_number() %&gt;%\n  as.numeric()\n\nmetascore_data\n\n\n\n\n\n\n\nWarning\n\n\n\nYikes! Now we only have 41 when we should have 50.\nWe could manually go through and figure out which 9 are missing or we could reassess how important the metascore data is to us…"
  },
  {
    "objectID": "courses/r-by-the-sea/index.html",
    "href": "courses/r-by-the-sea/index.html",
    "title": "EMW",
    "section": "",
    "text": "I co-teach “R by the Sea”, a hands-on data science workshop for marine ecologists, with my husband Easton White who runs the Quantitative Marine Ecology Lab at the University of New Hampshire. It’s a rewarding opportunity to merge data science education with real-world applications in marine ecology.\n\n\n\n\n\nR by the Sea @ Shoals Marine Lab is a two-week boot camp style course designed to help you harness the power of R for ecological and environmental research through project-based learning. Check out the R by the Sea webpage. It contains resources for the most recent iteration of this course.\nFor more information on upcoming offerings and enrolling in the course, check out the Shoals Marine Lab “R by the Sea” website. The course typically runs in May.\n\n\n\n\n\n\n\nR by the Sea @ Japan 2025 is a one-week boot camp style course taught at the University of Tohoku in Sendai, Japan in January 2025. Check out the R by the Sea Japan webpage for more details."
  },
  {
    "objectID": "courses/r-by-the-sea/index.html#r-by-the-sea",
    "href": "courses/r-by-the-sea/index.html#r-by-the-sea",
    "title": "EMW",
    "section": "",
    "text": "I co-teach “R by the Sea”, a hands-on data science workshop for marine ecologists, with my husband Easton White who runs the Quantitative Marine Ecology Lab at the University of New Hampshire. It’s a rewarding opportunity to merge data science education with real-world applications in marine ecology.\n\n\n\n\n\nR by the Sea @ Shoals Marine Lab is a two-week boot camp style course designed to help you harness the power of R for ecological and environmental research through project-based learning. Check out the R by the Sea webpage. It contains resources for the most recent iteration of this course.\nFor more information on upcoming offerings and enrolling in the course, check out the Shoals Marine Lab “R by the Sea” website. The course typically runs in May.\n\n\n\n\n\n\n\nR by the Sea @ Japan 2025 is a one-week boot camp style course taught at the University of Tohoku in Sendai, Japan in January 2025. Check out the R by the Sea Japan webpage for more details."
  },
  {
    "objectID": "courses/math102/index.html",
    "href": "courses/math102/index.html",
    "title": "EMW",
    "section": "",
    "text": "More Coming Soon!"
  },
  {
    "objectID": "courses/math102/index.html#math-102-logs-exponentials-and-their-applications",
    "href": "courses/math102/index.html#math-102-logs-exponentials-and-their-applications",
    "title": "EMW",
    "section": "",
    "text": "More Coming Soon!"
  }
]